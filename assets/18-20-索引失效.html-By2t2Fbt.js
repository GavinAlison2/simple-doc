import{_ as n,c as a,e,o as p}from"./app-DzmgiGLk.js";const l="/simple-doc/assets/slow-DaqwL07M.png",t={};function o(c,s){return p(),a("div",null,s[0]||(s[0]=[e(`<h1 id="_18-20" tabindex="-1"><a class="header-anchor" href="#_18-20"><span>18-20</span></a></h1><h2 id="_18-为什么这些sql语句逻辑相同-性能却差异巨大" tabindex="-1"><a class="header-anchor" href="#_18-为什么这些sql语句逻辑相同-性能却差异巨大"><span>18 | 为什么这些SQL语句逻辑相同，性能却差异巨大</span></a></h2><h3 id="案例一-条件字段函数操作" tabindex="-1"><a class="header-anchor" href="#案例一-条件字段函数操作"><span>案例一：条件字段函数操作</span></a></h3><p>不要对字段进行计算。</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tradelog <span class="token keyword">where</span> id <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> tradelog <span class="token keyword">where</span> <span class="token keyword">month</span><span class="token punctuation">(</span>create_time<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="案例二-隐式类型转换" tabindex="-1"><a class="header-anchor" href="#案例二-隐式类型转换"><span>案例二：隐式类型转换</span></a></h3><p>数据类型与字段类型不同的，将导致全表扫描。</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tradelog <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token string">&#39;1000&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tradelog <span class="token keyword">where</span> create_time <span class="token operator">=</span> <span class="token string">&#39;2021-10-01&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">select</span> <span class="token string">&quot;10&quot;</span> <span class="token operator">&gt;</span> <span class="token number">9</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="案例三-隐式字符编码转换" tabindex="-1"><a class="header-anchor" href="#案例三-隐式字符编码转换"><span>案例三：隐式字符编码转换</span></a></h3><p>两张表编码格式不一致也会导致全表查询。</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tradelog <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">&#39;张三&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tradelog <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">&#39;张三&#39;</span> <span class="token keyword">collate</span> utf8_general_ci<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_19-为什么我只查一行的语句-也执行这么慢" tabindex="-1"><a class="header-anchor" href="#_19-为什么我只查一行的语句-也执行这么慢"><span>19 | 为什么我只查一行的语句，也执行这么慢？</span></a></h2><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line">mysql<span class="token operator">&gt;</span> <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>t<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span></span>
<span class="line">  <span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token identifier"><span class="token punctuation">\`</span>c<span class="token punctuation">\`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">delimiter</span> <span class="token punctuation">;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">create</span> <span class="token keyword">procedure</span> idata<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">begin</span></span>
<span class="line">  <span class="token keyword">declare</span> i <span class="token keyword">int</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">set</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token keyword">do</span></span>
<span class="line">    <span class="token keyword">insert</span> <span class="token keyword">into</span> t <span class="token keyword">values</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>i<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">set</span> i<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">end</span> <span class="token keyword">while</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">delimiter</span> <span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">call</span> idata<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="第一类-查询长时间不返回" tabindex="-1"><a class="header-anchor" href="#第一类-查询长时间不返回"><span>第一类：查询长时间不返回</span></a></h3><ul><li>等MDL 锁，元数据锁</li><li>等flush</li><li>等行锁</li></ul><p>等MDL 锁，元数据锁</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line"><span class="token keyword">show</span> processlist<span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//或下面sql，可以找出pid（设置 performance_schema=on，相比于设置为 off 会有 10% 左右的性能损失）</span></span>
<span class="line"><span class="token keyword">select</span> blocking_pid <span class="token keyword">from</span> sys<span class="token punctuation">.</span>schema_table_lock_waits<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>等flush</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line"><span class="token comment">//该sql可以查询到当前状态</span></span>
<span class="line"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span>processlist <span class="token keyword">where</span> id<span class="token operator">=</span> <span class="token string">&#39;pid&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>MySQL 里面对表做 flush 操作的用法，一般有以下两个：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line">flush <span class="token keyword">tables</span> t <span class="token keyword">with</span> <span class="token keyword">read</span> <span class="token keyword">lock</span><span class="token punctuation">;</span></span>
<span class="line">flush <span class="token keyword">tables</span> <span class="token keyword">with</span> <span class="token keyword">read</span> <span class="token keyword">lock</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>等行锁</p><p><code>select * from t sys.innodb_lock_waits where locked_table=table_name \\G</code></p><p>KILL pid 断开连接，隐含逻辑自动回滚这个连接里面正在执行的线程，释放行锁。</p><h3 id="第二类-查询慢" tabindex="-1"><a class="header-anchor" href="#第二类-查询慢"><span>第二类：查询慢</span></a></h3><p><code>select * from t where c=50000 limit 1;</code></p><p>如果字段c上没有索引，这个语句只能走id主键顺序扫描，需要扫描5万行。</p><p>扫描一行却很慢的语句</p><ol><li>全表扫描：<code>select * from t where c=50000;</code></li></ol><p><img src="`+l+`" alt="slow"></p><p>session B执行100万次后，生成了100万个undo log，所以第一个select 快照读要将undo log执行100万次回到快照的版本。而第二个select当前读。</p><p>最后，老师提了for update加锁，关于各隔离级别加锁情况参考链接，这个大哥写的可以。</p><h2 id="_20-幻读是什么-幻读有什么问题" tabindex="-1"><a class="header-anchor" href="#_20-幻读是什么-幻读有什么问题"><span>20 | 幻读是什么，幻读有什么问题</span></a></h2><h3 id="幻读是什么" tabindex="-1"><a class="header-anchor" href="#幻读是什么"><span>幻读是什么</span></a></h3><ol><li>事务A读取某一行，事务B插入了一行数据，事务A再次读取时，发现多了一条记录。</li></ol><h3 id="间隙锁和next-key-lock" tabindex="-1"><a class="header-anchor" href="#间隙锁和next-key-lock"><span>间隙锁和next-key lock</span></a></h3><p>innodb为了解决幻读加入了间隙锁，锁住一个索引区间(开区间)。 锁住索引记录的区间，或第一条索引记录之前的范围，或者最后一条索引记录之后的范围。</p><p>间隙锁和行锁合成next-key lock，前开后闭区间。</p><p>如下，间隙锁的引入容易导致死锁。 因为select for update会加入间隙锁。</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line"><span class="token keyword">begin</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t <span class="token keyword">where</span> id<span class="token operator">=</span>N <span class="token keyword">for</span> <span class="token keyword">update</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">/* 如果行不存在 */</span></span>
<span class="line"><span class="token keyword">insert</span> <span class="token keyword">into</span> t <span class="token keyword">values</span><span class="token punctuation">(</span>N<span class="token punctuation">,</span>N<span class="token punctuation">,</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">/* 如果行存在 */</span></span>
<span class="line"><span class="token keyword">update</span> t <span class="token keyword">set</span> d<span class="token operator">=</span>N <span class="token keyword">set</span> id<span class="token operator">=</span>N<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">commit</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,40)]))}const r=n(t,[["render",o]]),d=JSON.parse('{"path":"/guide/mysql/mysql45%E8%AE%B2/18-20-%E7%B4%A2%E5%BC%95%E5%A4%B1%E6%95%88.html","title":"18-20","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"18 | 为什么这些SQL语句逻辑相同，性能却差异巨大","slug":"_18-为什么这些sql语句逻辑相同-性能却差异巨大","link":"#_18-为什么这些sql语句逻辑相同-性能却差异巨大","children":[{"level":3,"title":"案例一：条件字段函数操作","slug":"案例一-条件字段函数操作","link":"#案例一-条件字段函数操作","children":[]},{"level":3,"title":"案例二：隐式类型转换","slug":"案例二-隐式类型转换","link":"#案例二-隐式类型转换","children":[]},{"level":3,"title":"案例三：隐式字符编码转换","slug":"案例三-隐式字符编码转换","link":"#案例三-隐式字符编码转换","children":[]}]},{"level":2,"title":"19 | 为什么我只查一行的语句，也执行这么慢？","slug":"_19-为什么我只查一行的语句-也执行这么慢","link":"#_19-为什么我只查一行的语句-也执行这么慢","children":[{"level":3,"title":"第一类：查询长时间不返回","slug":"第一类-查询长时间不返回","link":"#第一类-查询长时间不返回","children":[]},{"level":3,"title":"第二类：查询慢","slug":"第二类-查询慢","link":"#第二类-查询慢","children":[]}]},{"level":2,"title":"20 | 幻读是什么，幻读有什么问题","slug":"_20-幻读是什么-幻读有什么问题","link":"#_20-幻读是什么-幻读有什么问题","children":[{"level":3,"title":"幻读是什么","slug":"幻读是什么","link":"#幻读是什么","children":[]},{"level":3,"title":"间隙锁和next-key lock","slug":"间隙锁和next-key-lock","link":"#间隙锁和next-key-lock","children":[]}]}],"git":{"updatedTime":1746351827000,"contributors":[{"name":"alice","username":"alice","email":"921757697@qq.com","commits":1,"url":"https://github.com/alice"}],"changelog":[{"hash":"a8d5abca5e84b9407cf50b57467ae6a55092ef14","time":1746351827000,"email":"921757697@qq.com","author":"alice","message":"deploy mysql 45讲"}]},"filePathRelative":"guide/mysql/mysql45讲/18-20-索引失效.md"}');export{r as comp,d as data};
