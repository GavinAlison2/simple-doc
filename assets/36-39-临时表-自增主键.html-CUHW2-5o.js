import{_ as s,c as a,e as p,o as e}from"./app-DN6Q4pKI.js";const t="/simple-doc/assets/temptable-DdnMd2QE.png",o="/simple-doc/assets/temptable2-B2m2QA86.png",l="/simple-doc/assets/groupby-BJiwc7uZ.png",c="/simple-doc/assets/memory-47XpOKW0.png",i="/simple-doc/assets/engine-DgtUSLWZ.png",u="/simple-doc/assets/memory2-CJv3qnVd.png",r={};function k(d,n){return e(),a("div",null,n[0]||(n[0]=[p(`<h1 id="_36-39-临时表-自增主键" tabindex="-1"><a class="header-anchor" href="#_36-39-临时表-自增主键"><span>36-39-临时表-自增主键</span></a></h1><h2 id="_36-为什么临时表可以重名" tabindex="-1"><a class="header-anchor" href="#_36-为什么临时表可以重名"><span>36 | 为什么临时表可以重名？</span></a></h2><p>上节提到了临时表。</p><p>如果是使用 InnoDB 引擎或者 MyISAM 引擎的临时表，写数据的时候是写到磁盘上的。当然，临时表也可以使用 Memory 引擎。 临时表的特点：</p><ol><li>临时表只能被创建它的 session 访问，对其他线程不可见。所以在这个 session 结束的时候，会自动删除临时表。</li><li>临时表可以与普通表同名（还是不要这么做）。</li><li>session A 内有同名的临时表和普通表的时候，show create 语句，以及增删改查语句访问的是临时表。</li><li>show tables 命令不显示临时表。</li></ol><h3 id="临时表的应用" tabindex="-1"><a class="header-anchor" href="#临时表的应用"><span>临时表的应用</span></a></h3><p>分表分库跨库查询</p><p>分库分表系统都有一个中间层 proxy，如果 sql 能够直接确定某个分表，这种情况是最理想的。</p><p>但如果涉及到跨库，一般有两种方式</p><ol><li>在 proxy 层的进程代码中实现排序，但对 proxy 的功能和性能要求较高。</li><li>把各个分库拿到的数据，汇总到一个 MySQL 实例的一个表中，然后在这个汇总实例上做逻辑操作。如果每个分库的计算量都不饱和，那么直接可以在把临时表放到某个分库上。</li></ol><h3 id="为什么临时表可以重名" tabindex="-1"><a class="header-anchor" href="#为什么临时表可以重名"><span>为什么临时表可以重名？</span></a></h3><p>MySQL 要给临时 InnoDB 表创建一个 frm 文件保存表结构定义，还要有地方保存表数据。 这个 frm 文件放在临时文件目录下，文件名的后缀是.frm，前缀是“#sql{进程 id}{线程 id} 序列号”。可以使用 select @@tmpdir 命令，来显示实例的临时文件目录。</p><p>表中数据存放：</p><ol><li>MySQL5.6 会在临时文件目录下创建一个相同前缀、以.ibd 为后缀的文件，用来存放数据文件；</li><li>MySQL5.7版本开始引入了一个临时文件表空间，专门用来存放临时文件的数据。因此，我们就不需要再创建 ibd 文件了。</li></ol><p>MySQL 维护数据表，除了物理上要有文件外，内存里面也有一套机制区别不同的表，每个表都对应一个table_def_key。</p><ol><li>一个普通表的 table_def_key 的值是由“库名+ 表名”得到。</li><li>临时表，table_def_key 在“库名 + 表名”基础上，又加入了“server_id+thread_id”。</li></ol><h3 id="临时表和主备复制" tabindex="-1"><a class="header-anchor" href="#临时表和主备复制"><span>临时表和主备复制</span></a></h3><p>如果当前的 binlog_format=row，那么跟临时表有关的语句，就不会记录到 binlog 里。 binlog_format=statment/mixed 的时候，binlog 中才会记录临时表的操作。</p><p>这种情况下，创建临时表的语句会传到备库执行，因此备库的同步线程就会创建这个临时表。 主库在线程退出的时候，会自动删除临时表，但是备库同步线程是持续在运行的。 所以，这时候我们就需要在主库上再写一个 DROP TEMPORARY TABLE 传给执行。</p><h2 id="_37-什么时候会使用内部临时表" tabindex="-1"><a class="header-anchor" href="#_37-什么时候会使用内部临时表"><span>37 | 什么时候会使用内部临时表</span></a></h2><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line"><span class="token keyword">create</span> <span class="token keyword">table</span> t1<span class="token punctuation">(</span>id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span> a <span class="token keyword">int</span><span class="token punctuation">,</span> b <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">index</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">delimiter</span> <span class="token punctuation">;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">create</span> <span class="token keyword">procedure</span> idata<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">begin</span></span>
<span class="line">  <span class="token keyword">declare</span> i <span class="token keyword">int</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">set</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token keyword">do</span></span>
<span class="line">    <span class="token keyword">insert</span> <span class="token keyword">into</span> t1 <span class="token keyword">values</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> i<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">set</span> i<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">end</span> <span class="token keyword">while</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">delimiter</span> <span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">call</span> idata<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">1000</span> <span class="token keyword">as</span> f<span class="token punctuation">)</span> <span class="token keyword">union</span> <span class="token punctuation">(</span><span class="token keyword">select</span> id <span class="token keyword">from</span> t1 <span class="token keyword">order</span> <span class="token keyword">by</span> id <span class="token keyword">desc</span> <span class="token keyword">limit</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+t+`" alt="temptable"></p><ul><li>第二行key=PRIMARY，说明第二个子句用到了索引 id</li><li>第三行 Extra 字段，说明 UNION 时使用了临时表 (Using temporary)</li></ul><p>执行流程：</p><ul><li>创建一个内存临时表，这个临时表只有一个整型字段 f，并且 f 是主键字段。</li><li>执行第一个子查询，得到 1000 这个值，并存入临时表中。</li><li>执行第二个子查询：拿到第一个1000，但已存在存入失败，拿到第二个999，存入成功。</li><li>从临时表中按行取出数据（1000和999两行），返回结果，并删除临时表。</li></ul><p>如果把上面这个语句中的 union 改成 union all的话，就不需要“去重”。 这样执行的时候，就依次执行子查询，得到的结果直接作为结果集的一部分，发给客户端。因此也就不需要临时表了。</p><h3 id="group-by-执行流程" tabindex="-1"><a class="header-anchor" href="#group-by-执行流程"><span>group by 执行流程</span></a></h3><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line"><span class="token keyword">select</span> id<span class="token operator">%</span><span class="token number">10</span> <span class="token keyword">as</span> m<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> c <span class="token keyword">from</span> t1 <span class="token keyword">group</span> <span class="token keyword">by</span> m<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><img src="`+o+'" alt="temptable2"></p><ol><li>Using index，表示这个语句使用了覆盖索引，选择了索引 a，不需要回表；</li><li>Using temporary，表示使用了临时表；</li><li>Using filesort，表示需要排序。</li></ol><p>执行流程：</p><ul><li>创建内存临时表，表里有两个字段 m 和 c，主键是 m；</li><li>扫描表 t1 的索引 a，依次取出叶子节点上的 id 值，计算 id%10 的结果，记为 x；如果临时表中没有主键为 x 的行，就插入一个记录 (x,1)，如果表中有主键为 x 的行，就将 x 这一行的 c 值加 1；</li><li>遍历完成后，再根据字段 m 做排序（内存临时表的排序 17 篇文章有），得到结果集返回给客户端。</li></ul><p>如果不需要排序则直接取内存临时表的数据。</p><p>但内存临时表的大小是有限制的，参数 tmp_table_size 就是控制这个内存大小的，默认是 16M。如果内存不够则使用磁盘临时表。</p><h3 id="group-by-优化方法" tabindex="-1"><a class="header-anchor" href="#group-by-优化方法"><span>group by 优化方法</span></a></h3><p>索引 假设有个这样的数据结构：</p><p><img src="'+l+`" alt="groupby"></p><p>如果可以确保输入的数据是有序的，那么计算 group by 的时候，就只需要从左到右，顺序扫描，依次累加。</p><ul><li>当碰到第一个 1 的时候，已经知道累积了 X 个 0，结果集里的第一行就是 (0,X);</li><li>当碰到第一个 2 的时候，已经知道累积了 Y 个 1，结果集里的第二行就是 (1,Y);</li></ul><p>InnoDB 的索引，就可以满足这个输入有序的条件。</p><ul><li>直接排序 如果临时表数据量特别大，可让 MySQL 直接走磁盘临时表，在 group by 语句中加入 SQL_BIG_RESULT 这个提示（hint）。 MySQL 的优化器会直接用数组来存，而不是B+ 树存储。这样</li></ul><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line"><span class="token keyword">select</span> SQL_BIG_RESULT id<span class="token operator">%</span><span class="token number">100</span> <span class="token keyword">as</span> m<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> c <span class="token keyword">from</span> t1 <span class="token keyword">group</span> <span class="token keyword">by</span> m<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>执行流程：</p><ul><li>初始化 sort_buffer，确定放入一个整型字段，记为 m；</li><li>扫描表 t1 的索引 a，依次取出里面的 id 值, 将 id%100 的值存入 sort_buffer 中；</li><li>扫描完成后，对 sort_buffer 的字段 m 做排序（如果 sort_buffer 内存不够用，，就会利用磁盘临时文件辅助排序）；</li><li>排序完成后，就得到了一个有序数组。</li></ul><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结：</span></a></h3><p>MySQL 什么时候会使用内部临时表？</p><ul><li>如果语句执行过程可以一边读数据，一边直接得到结果，是不需要额外内存的，否则就需要额外的内存，来保存中间结果；</li><li>join_buffer 是无序数组，sort_buffer 是有序数组，临时表是二维表结构；</li><li>如果执行逻辑需要用到二维表特性，就会优先考虑使用临时表。比如，union 需要用到唯一索引约束， group by 还需要用到另外一个字段来存累积计数。</li></ul><p>group by使用的指导原则：</p><ul><li>如果对 group by 语句的结果没有排序要求，要在语句后面加 order by null；</li><li>尽量让 group by 过程用上表的索引，确认方法是 explain 结果里没有 Using temporary 和 Using filesort；</li><li>如果 group by 需要统计的数据量不大，尽量只使用内存临时表；也可以通过适当调大 tmp_table_size 参数，来避免用到磁盘临时表；</li><li>如果数据量实在太大，使用 SQL_BIG_RESULT 这个提示，来告诉优化器直接使用排序算法得到 group by 的结果。</li></ul><h2 id="_38-都说innodb好-那还要不要使用memory引擎" tabindex="-1"><a class="header-anchor" href="#_38-都说innodb好-那还要不要使用memory引擎"><span>38 | 都说InnoDB好，那还要不要使用Memory引擎？</span></a></h2><p>内存表的数据组织结构 表 t1 使用 Memory 引擎， 表 t2 使用InnoDB 引擎。</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line"><span class="token keyword">create</span> <span class="token keyword">table</span> t1<span class="token punctuation">(</span>id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span> c <span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token keyword">engine</span><span class="token operator">=</span>Memory<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">create</span> <span class="token keyword">table</span> t2<span class="token punctuation">(</span>id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span> c <span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token keyword">engine</span><span class="token operator">=</span><span class="token keyword">innodb</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">insert</span> <span class="token keyword">into</span> t1 <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">insert</span> <span class="token keyword">into</span> t2 <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+c+'" alt="memory"></p><p>可以看到两个引擎顺序不一致。 InnoDB 表的数据就放在主键索引树上，主键索引是 B+ 树。 与 InnoDB 引擎不同，Memory 引擎的数据和索引是分开的。</p><p><img src="'+i+`" alt="engine"></p><p>内存表的数据部分以数组的方式单独存放，而主键 id 索引里，存的是每个数据的位置。主键 id 是 hash 索引，可以看到索引上的 key 并不是有序的。</p><p>在内存表 t1 中，执行 select * 按数组顺序全表扫描。因此，0 就是最后一个被读到。</p><p>所以InnoDB 和 Memory 引擎的数据组织方式是不同的：</p><ol><li>InnoDB 引擎把数据放在主键索引上，其他索引上保存的是主键 id。这种方式，我们称之为索引组织表（Index Organizied Table）。</li><li>Memory 引擎采用的是把数据单独存放，索引上保存数据位置的数据组织形式，我们称之为堆组织表（Heap Organizied Table）。</li></ol><p>两个引擎的一些典型不同：</p><ol><li>InnoDB 表的数据总是有序存放的，而内存表的数据就是按照写入顺序存放的；</li><li>当数据文件有空洞的时候，InnoDB 表在插入新数据的时候，为了保证数据有序性，只能在固定的位置写入新值，而内存表找到空位就可以插入新值；</li><li>数据位置发生变化的时候，InnoDB 表只需要修改主键索引，而内存表需要修改所有索引；</li><li>InnoDB 表用主键索引查询时需要走一次索引查找，用普通索引查询的时候，需要走两次索引查找。而内存表没有这个区别，所有索引的“地位”都是相同的。</li><li>InnoDB 支持变长数据类型，不同记录的长度可能不同；内存表不支持 Blob 和 Text 字段，并且即使定义了 varchar(N)，实际也当作 char(N)，也就是固定长度字符串来存储，因此内存表的每行数据长度相同。</li></ol><p>由于内存表的这些特性，每个数据行被删除以后，空出的这个位置都可以被接下来要插入的数据复用。 内存表 t1 的这个主键索引是哈希索引，因此如果执行范围查询是用不上主键索引的，需要走全表扫描。</p><h3 id="hash-索引和-b-tree-索引" tabindex="-1"><a class="header-anchor" href="#hash-索引和-b-tree-索引"><span>hash 索引和 B-Tree 索引</span></a></h3><p>内存表也是支 B-Tree 索引的</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line"><span class="token keyword">alter</span> <span class="token keyword">table</span> t1 <span class="token keyword">add</span> <span class="token keyword">index</span> a_btree_index <span class="token keyword">using</span> <span class="token keyword">btree</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><img src="`+u+`" alt="memory2"></p><p>不建议你在生产环境上使用内存表 这里的原因主要包括两个方面：</p><ul><li>内存表的锁 内存表不支持行锁，只支持表锁。</li><li>数据持久性问题 数据库重启的时候，所有的内存表都会被清空。</li><li>主从模式，从库掉电重启收到主库请求会找不到行。双主模式下，一台掉电重启会发送delete到另一台清空数据。</li></ul><p>第 35 和 36 篇说到的用户临时表。在数据量可控，不会耗费过多内存的情况下，你可以考虑使用内存表。</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line"><span class="token keyword">create</span> <span class="token keyword">temporary</span> <span class="token keyword">table</span> temp_t<span class="token punctuation">(</span>id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span> a <span class="token keyword">int</span><span class="token punctuation">,</span> b <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">index</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">engine</span><span class="token operator">=</span>memory<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">insert</span> <span class="token keyword">into</span> temp_t <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t2 <span class="token keyword">where</span> b<span class="token operator">&gt;=</span><span class="token number">1</span> <span class="token operator">and</span> b<span class="token operator">&lt;=</span><span class="token number">2000</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t1 <span class="token keyword">join</span> temp_t <span class="token keyword">on</span> <span class="token punctuation">(</span>t1<span class="token punctuation">.</span>b<span class="token operator">=</span>temp_t<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,70)]))}const b=s(r,[["render",k]]),y=JSON.parse('{"path":"/guide/mysql/mysql45%E8%AE%B2/36-39-%E4%B8%B4%E6%97%B6%E8%A1%A8-%E8%87%AA%E5%A2%9E%E4%B8%BB%E9%94%AE.html","title":"36-39-临时表-自增主键","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"36 | 为什么临时表可以重名？","slug":"_36-为什么临时表可以重名","link":"#_36-为什么临时表可以重名","children":[{"level":3,"title":"临时表的应用","slug":"临时表的应用","link":"#临时表的应用","children":[]},{"level":3,"title":"为什么临时表可以重名？","slug":"为什么临时表可以重名","link":"#为什么临时表可以重名","children":[]},{"level":3,"title":"临时表和主备复制","slug":"临时表和主备复制","link":"#临时表和主备复制","children":[]}]},{"level":2,"title":"37 | 什么时候会使用内部临时表","slug":"_37-什么时候会使用内部临时表","link":"#_37-什么时候会使用内部临时表","children":[{"level":3,"title":"group by 执行流程","slug":"group-by-执行流程","link":"#group-by-执行流程","children":[]},{"level":3,"title":"group by 优化方法","slug":"group-by-优化方法","link":"#group-by-优化方法","children":[]},{"level":3,"title":"总结：","slug":"总结","link":"#总结","children":[]}]},{"level":2,"title":"38 | 都说InnoDB好，那还要不要使用Memory引擎？","slug":"_38-都说innodb好-那还要不要使用memory引擎","link":"#_38-都说innodb好-那还要不要使用memory引擎","children":[{"level":3,"title":"hash 索引和 B-Tree 索引","slug":"hash-索引和-b-tree-索引","link":"#hash-索引和-b-tree-索引","children":[]}]}],"git":{"updatedTime":1746293673000,"contributors":[{"name":"alice","username":"alice","email":"921757697@qq.com","commits":1,"url":"https://github.com/alice"}],"changelog":[{"hash":"e5945ebdbc3e2b976f95add711e081bdd86f39b7","time":1746293673000,"email":"921757697@qq.com","author":"alice","message":"deploy mysql"}]},"filePathRelative":"guide/mysql/mysql45讲/36-39-临时表-自增主键.md"}');export{b as comp,y as data};
