import{_ as s,c as a,e,o as l}from"./app-DzmgiGLk.js";const i="/simple-doc/assets/allmoc_object-DAXOvEOL.png",p={};function c(t,n){return l(),a("div",null,n[0]||(n[0]=[e('<h1 id="jvm内存分配" tabindex="-1"><a class="header-anchor" href="#jvm内存分配"><span>JVM内存分配</span></a></h1><h2 id="内存分配过程" tabindex="-1"><a class="header-anchor" href="#内存分配过程"><span>内存分配过程</span></a></h2><p><img src="'+i+`" alt="allmoc_object"></p><div class="language-markdown line-numbers-mode" data-highlighter="prismjs" data-ext="md"><pre><code><span class="line">开始</span>
<span class="line"></span>
<span class="line">标量替换：将栈上的数据类型转换为标量类型，以便在栈上分配内存。</span>
<span class="line"></span>
<span class="line">逃逸分析：分析代码，判断对象是否逃逸到方法外部，如果逃逸，则将对象分配在堆上。return</span>
<span class="line"></span>
<span class="line">栈上分配：将对象直接分配在栈上，以便快速访问。</span>
<span class="line"></span>
<span class="line">大对象： 大对象直接分配在老年代中，避免频繁GC。</span>
<span class="line"></span>
<span class="line">TLAB分配：如果对象大小超过TLAB的大小，则将对象直接分配在老年代中。</span>
<span class="line"></span>
<span class="line">对象创建：创建一个对象，并将其存储在堆上。</span>
<span class="line"></span>
<span class="line">minorGC: eden区满了，触发minorGC。</span>
<span class="line"></span>
<span class="line">s0: survivor0区满了，将eden区和s1区存活的对象复制到s0区，并清空eden区。</span>
<span class="line"></span>
<span class="line">s1: survivor1区满了，将eden区和s0区存活的对象复制到s1区，并清空eden区。</span>
<span class="line"></span>
<span class="line">age,minor gc,full gc: 老年代满了，触发minorGC，如果老年代仍然满了，则触发fullGC。</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="逃逸分析" tabindex="-1"><a class="header-anchor" href="#逃逸分析"><span>逃逸分析</span></a></h2><p>如何确定对象是否在栈上进行分配，当然得通过逃逸分析。 逃逸分析，就是看下一个方法是否会返回对象，如果返回，则需要将对象分配在堆上。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token class-name">Student</span> <span class="token function">getStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 对象分配到堆中</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Student</span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 对象分配到栈中</span></span>
<span class="line"><span class="token number">1.</span> 对于基本类型，直接在栈上分配内存。</span>
<span class="line"><span class="token number">2.</span> 对于对象引用，如果对象在方法中被创建，则分配在栈上。</span>
<span class="line"><span class="token number">3.</span> 对于对象引用，如果对象在方法中被传递，则分配在堆上。</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="标量替换" tabindex="-1"><a class="header-anchor" href="#标量替换"><span>标量替换</span></a></h2><p>标量替换，就是将栈上的数据类型转换为标量类型，以便在栈上分配内存. 将对象拆解成不可再分的对象，一些基础类型的变量。 聚合量，对象属性中还有对象</p><h2 id="内存分配" tabindex="-1"><a class="header-anchor" href="#内存分配"><span>内存分配</span></a></h2><p>JVM 内存分配主要通过两种方式：</p><ul><li>指针碰撞：堆内存是由一系列的内存块组成的，每个内存块都有一定的大小，虚拟机在运行时，通过指针来定位内存块。 一块内存，一半是已经分配的，一半是没分配的，当分配内存时，中间指针移动到未分配的内存块，分配完成后，指针移动到下一个内存块。</li><li>空闲列表：堆内存中维护一个空闲列表，虚拟机在运行时，通过空闲列表来分配内存。</li></ul><h2 id="指针碰撞" tabindex="-1"><a class="header-anchor" href="#指针碰撞"><span>指针碰撞</span></a></h2><p>指针碰撞是指在堆内存中，所有内存块的大小相同，虚拟机通过指针来定位内存块。</p><p>当需要在堆上分配一个对象时，虚拟机首先检查是否有足够的内存空间，如果有，就将指针指向该内存空间，如果没有，就向操作系统申请新的内存空间。</p><h2 id="空闲列表" tabindex="-1"><a class="header-anchor" href="#空闲列表"><span>空闲列表</span></a></h2><p>空闲列表是指在堆内存中，维护一个空闲列表，虚拟机通过空闲列表来分配内存。</p><p>当需要在堆上分配一个对象时，虚拟机首先检查是否有足够的内存空间，如果有，就从空闲列表中找到一块足够大的内存空间，如果没有，就向操作系统申请新的内存空间。</p><h2 id="内存分配策略" tabindex="-1"><a class="header-anchor" href="#内存分配策略"><span>内存分配策略</span></a></h2><p>JVM 内存分配策略有以下几种：</p><ul><li>固定大小分配：在堆内存中，为每个线程分配固定大小的内存，线程结束后，内存被释放。</li><li>按需分配：在堆内存中，为每个线程分配内存，线程结束后，内存被释放。</li><li>线程本地分配：在线程的虚拟机栈中，为每个线程分配内存，线程结束后，内存被释放。</li><li>直接内存分配：在堆外内存中，直接分配内存，不需要通过 JVM 的内存管理。</li></ul><h2 id="如何解决内存分配并发问题" tabindex="-1"><a class="header-anchor" href="#如何解决内存分配并发问题"><span>如何解决内存分配并发问题</span></a></h2><ul><li>CAS, compare and swap, 比较并交换，是一种原子操作，可以保证多个线程同时修改同一个变量时，只有一个线程能成功。</li><li>TLAB, thread local allocation buffer, 线程本地分配缓冲区，是一种技术，可以为每个线程分配一块内存，避免线程间的竞争。</li><li>对象池，对象池是一种技术，可以为每个线程分配一组对象，避免频繁创建对象。</li><li>堆外内存，堆外内存是一种技术，可以直接分配内存，不需要通过 JVM 的内存管理。</li></ul><h2 id="面试题" tabindex="-1"><a class="header-anchor" href="#面试题"><span>面试题</span></a></h2><p>为什么需要使用标量替换？</p><p>栈上分配对象是方法结束时对象就会被回收了减少了堆的内存压力并且减少了垃圾回收的开销。 使用标量替换的目的是为了提高程序的性能，通过将对象拆分成独立的标量，使得变量能够被寄存器更好的访问，减少了内存访问的开销</p>`,26)]))}const r=s(p,[["render",c]]),o=JSON.parse('{"path":"/guide/JVM/4-JVM%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D.html","title":"JVM内存分配","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"内存分配过程","slug":"内存分配过程","link":"#内存分配过程","children":[]},{"level":2,"title":"逃逸分析","slug":"逃逸分析","link":"#逃逸分析","children":[]},{"level":2,"title":"标量替换","slug":"标量替换","link":"#标量替换","children":[]},{"level":2,"title":"内存分配","slug":"内存分配","link":"#内存分配","children":[]},{"level":2,"title":"指针碰撞","slug":"指针碰撞","link":"#指针碰撞","children":[]},{"level":2,"title":"空闲列表","slug":"空闲列表","link":"#空闲列表","children":[]},{"level":2,"title":"内存分配策略","slug":"内存分配策略","link":"#内存分配策略","children":[]},{"level":2,"title":"如何解决内存分配并发问题","slug":"如何解决内存分配并发问题","link":"#如何解决内存分配并发问题","children":[]},{"level":2,"title":"面试题","slug":"面试题","link":"#面试题","children":[]}],"git":{"updatedTime":1746194446000,"contributors":[{"name":"alice","username":"alice","email":"921757697@qq.com","commits":1,"url":"https://github.com/alice"}],"changelog":[{"hash":"4951c196adb449238836dbb0eba9d13fbc2594be","time":1746194446000,"email":"921757697@qq.com","author":"alice","message":"deploy jvm"}]},"filePathRelative":"guide/JVM/4-JVM内存分配.md"}');export{r as comp,o as data};
