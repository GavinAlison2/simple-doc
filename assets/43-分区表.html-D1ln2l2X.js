import{_ as n,c as a,e as p,o as e}from"./app-DlGl6QFf.js";const t="/simple-doc/assets/partition-B-Un-ZvI.png",o="/simple-doc/assets/partition2-yWBA9y0E.png",l="/simple-doc/assets/partition3-CNW2Acw8.png",c="/simple-doc/assets/partition4-6lgORK9L.png",i={};function r(k,s){return e(),a("div",null,s[0]||(s[0]=[p(`<h1 id="_43-要不要使用分区表" tabindex="-1"><a class="header-anchor" href="#_43-要不要使用分区表"><span>43 - 要不要使用分区表？</span></a></h1><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>t<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span></span>
<span class="line">  <span class="token identifier"><span class="token punctuation">\`</span>ftime<span class="token punctuation">\`</span></span> <span class="token keyword">datetime</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token identifier"><span class="token punctuation">\`</span>c<span class="token punctuation">\`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>ftime<span class="token punctuation">\`</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>latin1</span>
<span class="line"><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> RANGE <span class="token punctuation">(</span><span class="token keyword">YEAR</span><span class="token punctuation">(</span>ftime<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token keyword">PARTITION</span> p_2017 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">2017</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span><span class="token punctuation">,</span></span>
<span class="line"> <span class="token keyword">PARTITION</span> p_2018 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">2018</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span><span class="token punctuation">,</span></span>
<span class="line"> <span class="token keyword">PARTITION</span> p_2019 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">2019</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token keyword">PARTITION</span> p_others <span class="token keyword">VALUES</span> LESS THAN MAXVALUE <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">insert</span> <span class="token keyword">into</span> t <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">&#39;2017-4-1&#39;</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">&#39;2018-4-1&#39;</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>磁盘文件</p><p><img src="`+t+'" alt="partition"></p><ol><li>对于引擎层来说，这是 4 个表；</li><li>对于 Server 层来说，这是 1 个表。</li></ol><p>分区表的引擎层行为</p><p><img src="'+o+'" alt="partition2"></p><p><img src="'+l+'" alt="partition3"></p><p>由于分区表的规则，session A 的 select 语句其实只操作了分区 p_2018。 如果是MyISAM则锁表p_2018 。</p><h2 id="手动分表和分区表有什么区别" tabindex="-1"><a class="header-anchor" href="#手动分表和分区表有什么区别"><span>手动分表和分区表有什么区别</span></a></h2><p>分区表和手工分表，一个是由 server 层来决定使用哪个分区，一个是由应用层代码来决定使用哪个分表。因此，从引擎层看，这两种方式也是没有差别的。 主要区别在server 层上，分区表一个被广为诟病的问题：打开表的行为。</p><h2 id="分区策略" tabindex="-1"><a class="header-anchor" href="#分区策略"><span>分区策略</span></a></h2><p>MyISAM 引擎每当第一次访问一个分区表的时候，MySQL 需要把所有的分区都访问一遍。MySQL 启动的时候，open_files_limit 参数使用的是默认值 1024，如果超过上限将报错。InnoDB 引擎的话，并不会出现这个问题。</p><p>分区表的 server 层行为</p><p>如果从 server 层看的话，一个分区表就只是一个表。</p><p><img src="'+c+'" alt="partition4"></p><p>虽然 session B 只需要操作 p_2107 这个分区，但是由于 session A 持有整个表 t 的 MDL 锁，就导致了 session B 的 alter 语句被堵住。</p><h2 id="分区表的应用场景" tabindex="-1"><a class="header-anchor" href="#分区表的应用场景"><span>分区表的应用场景</span></a></h2><p>分区表的一个显而易见的优势是对业务透明，相对于用户分表来说，使用分区表的业务代码更简洁。还有，分区表可以很方便的清理历史数据。 按照时间分区的分区表，就可以直接通过 alter tablet drop partition …这个语法删掉分区，从而删掉过期的历史数据。</p>',19)]))}const d=n(i,[["render",r]]),m=JSON.parse('{"path":"/guide/mysql/mysql45%E8%AE%B2/43-%E5%88%86%E5%8C%BA%E8%A1%A8.html","title":"43 - 要不要使用分区表？","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"手动分表和分区表有什么区别","slug":"手动分表和分区表有什么区别","link":"#手动分表和分区表有什么区别","children":[]},{"level":2,"title":"分区策略","slug":"分区策略","link":"#分区策略","children":[]},{"level":2,"title":"分区表的应用场景","slug":"分区表的应用场景","link":"#分区表的应用场景","children":[]}],"git":{"updatedTime":1746293673000,"contributors":[{"name":"alice","username":"alice","email":"921757697@qq.com","commits":1,"url":"https://github.com/alice"}],"changelog":[{"hash":"e5945ebdbc3e2b976f95add711e081bdd86f39b7","time":1746293673000,"email":"921757697@qq.com","author":"alice","message":"deploy mysql"}]},"filePathRelative":"guide/mysql/mysql45讲/43-分区表.md"}');export{d as comp,m as data};
