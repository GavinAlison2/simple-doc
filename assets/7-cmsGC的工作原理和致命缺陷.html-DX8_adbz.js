import{_ as a,c,e as t,o as i}from"./app-DN6Q4pKI.js";const l={};function s(m,e){return i(),c("div",null,e[0]||(e[0]=[t('<h1 id="cms-gc的工作原理和致命缺陷" tabindex="-1"><a class="header-anchor" href="#cms-gc的工作原理和致命缺陷"><span>CMS GC的工作原理和致命缺陷</span></a></h1><h2 id="_1-cms-gc的工作原理" tabindex="-1"><a class="header-anchor" href="#_1-cms-gc的工作原理"><span>1. CMS GC的工作原理</span></a></h2><p>CMS（Concurrent Mark Sweep）GC是一种以并发的方式进行垃圾回收的垃圾回收器。它主要有以下几个特点：</p><ol><li>并发：CMS GC采用了多线程并发的方式进行垃圾回收，多个线程同时运行，有效利用多核CPU的优势。</li><li>并行：CMS GC采用了并行的方式进行垃圾回收，多个垃圾回收线程同时扫描各个Region，有效减少垃圾回收的停顿时间。</li><li>标记-清除：CMS GC采用的是“标记-清除”算法，首先标记出所有需要回收的对象，然后统一回收掉标记的对象，这种方式会产生内存碎片。</li><li>低延迟：CMS GC的垃圾回收过程发生在应用程序线程之外，因此，它对应用程序的响应时间影响较小。</li></ol><p>CMS 处理数= (CPU数量+3)/4 CMS 处理器占比 = 1/4 + 3/(4*CPU数量) &gt;=25%</p><p>CMS至少占用 CPU的25%的核数</p>',6)]))}const o=a(l,[["render",s]]),r=JSON.parse('{"path":"/guide/JVM/7-cmsGC%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%92%8C%E8%87%B4%E5%91%BD%E7%BC%BA%E9%99%B7.html","title":"CMS GC的工作原理和致命缺陷","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"1. CMS GC的工作原理","slug":"_1-cms-gc的工作原理","link":"#_1-cms-gc的工作原理","children":[]}],"git":{"updatedTime":1746240722000,"contributors":[{"name":"alice","username":"alice","email":"921757697@qq.com","commits":2,"url":"https://github.com/alice"}],"changelog":[{"hash":"77e1afd92b98df66020fdb2f864dee5d0d6673a8","time":1746240722000,"email":"921757697@qq.com","author":"alice","message":"deploy jvm"},{"hash":"3e2d984cc19c77946a9430d1d65e4d80f328656b","time":1746208050000,"email":"921757697@qq.com","author":"alice","message":"deploy jvm"}]},"filePathRelative":"guide/JVM/7-cmsGC的工作原理和致命缺陷.md"}');export{o as comp,r as data};
