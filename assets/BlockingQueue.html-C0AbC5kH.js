import{_ as l,c as e,e as a,o as p}from"./app-DN6Q4pKI.js";const t={};function n(o,i){return p(),e("div",null,i[0]||(i[0]=[a('<h1 id="blockingqueue" tabindex="-1"><a class="header-anchor" href="#blockingqueue"><span>BlockingQueue</span></a></h1><h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>BlockingQueue 是 Java 5 引入的接口，它是一个支持阻塞的队列，即当队列为空时，从队头取元素的操作将被阻塞，当队列满时，往队尾添加元素的操作将被阻塞。</p><p>BlockingQueue 接口有以下几个主要实现类：</p><ul><li>ArrayBlockingQueue：一个由数组支持的有界阻塞队列。</li><li>SynchronousQueue：一个不存储元素的阻塞队列。</li><li>LinkedBlockingQueue：一个由链表支持的阻塞队列。</li><li>PriorityBlockingQueue：一个支持优先级排序的阻塞队列。</li><li>DelayQueue：一个支持延时获取元素的阻塞队列。</li><li>LinkedTransferQueue：一个由链表支持的阻塞队列，可以实现可中断的元素传输。</li></ul><h2 id="常用方法" tabindex="-1"><a class="header-anchor" href="#常用方法"><span>常用方法</span></a></h2><ul><li><p>add(E e)：添加元素到队列，如果队列已满，则阻塞。</p></li><li><p>offer(E e)：尝试添加元素到队列，如果队列已满，则返回 false，否则返回 true。</p></li><li><p>put(E e)：添加元素到队列，如果队列已满，则阻塞。</p></li><li><p>take()：获取队列头部的元素，如果队列为空，则阻塞。</p></li><li><p>poll()：尝试获取队列头部的元素，如果队列为空，则返回 null，否则返回元素。</p></li><li><p>element()：获取队列头部的元素，如果队列为空，则阻塞。</p></li><li><p>peek()：尝试获取队列头部的元素，如果队列为空，则返回 null，否则返回元素。</p></li><li><p>drainTo(Collection&lt;? super E&gt; c)：将队列中的元素全部转移到指定的 Collection 中，如果队列为空，则阻塞。</p></li><li><p>remainingCapacity()：返回队列剩余的容量。</p></li><li><p>clear()：清空队列。</p></li><li><p>isFull()：判断队列是否已满。</p></li><li><p>isEmpty()：判断队列是否为空。</p></li><li><p>size()：返回队列的大小。</p></li><li><p>remainingCapacity()：返回队列剩余的容量。</p></li><li><p>remove(Object o)：从队列中移除指定的元素。</p></li><li><p>contains(Object o)：判断队列中是否包含指定的元素。</p></li><li><p>toArray()：将队列中的元素转为数组。</p></li><li><p>iterator()：返回队列的迭代器。</p></li><li><p>spliterator()：返回队列的 spliterator。</p></li><li><p>forEach(Consumer&lt;? super E&gt; action)：遍历队列中的元素。</p></li><li><p>blockingQueue()：返回阻塞队列。</p></li><li><p>transfer(E e)：可中断地将元素从队头传输到队尾。</p></li><li><p>tryTransfer(E e)：尝试可中断地将元素从队头传输到队尾。</p></li><li><p>tryTransfer(E e, long timeout, TimeUnit unit)：尝试可中断地将元素从队头传输到队尾，最多等待指定的时间。</p></li><li><p>hasWaitingConsumer()：判断是否有线程等待获取元素。</p></li><li><p>drainTo(Collection&lt;? super E&gt; c, int maxElements)：将队列中的元素全部转移到指定的 Collection 中，最多转移指定数量的元素。</p></li></ul>',7)]))}const u=l(t,[["render",n]]),c=JSON.parse('{"path":"/guide/java-basic/BlockingQueue.html","title":"BlockingQueue","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"常用方法","slug":"常用方法","link":"#常用方法","children":[]}],"git":{"updatedTime":1746240722000,"contributors":[{"name":"alice","username":"alice","email":"921757697@qq.com","commits":1,"url":"https://github.com/alice"}],"changelog":[{"hash":"77e1afd92b98df66020fdb2f864dee5d0d6673a8","time":1746240722000,"email":"921757697@qq.com","author":"alice","message":"deploy jvm"}]},"filePathRelative":"guide/java-basic/BlockingQueue.md"}');export{u as comp,c as data};
