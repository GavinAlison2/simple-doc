import{_ as e}from"./20250420008-CWfxgdf_.js";import{_ as p,c as o,e as a,a as l,d as s,b as c,w as i,r as u,o as r}from"./app-DlGl6QFf.js";const k={};function d(m,n){const t=u("RouteLink");return r(),o("div",null,[n[3]||(n[3]=a(`<h1 id="structured-streaming-之-sink-解析" tabindex="-1"><a class="header-anchor" href="#structured-streaming-之-sink-解析"><span>Structured Streaming 之 Sink 解析</span></a></h1><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">本文内容适用范围：</span>
<span class="line">* 2018.11.02 update, Spark 2.4 全系列 √ (已发布：2.4.0)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,2)),l("p",null,[n[1]||(n[1]=s("阅读本文前，请一定先阅读 ")),c(t,{to:"/guide/etl/spark/Structured%20Streaming%20%E5%AE%9E%E7%8E%B0%E6%80%9D%E8%B7%AF%E4%B8%8E%E5%AE%9E%E7%8E%B0%E6%A6%82%E8%BF%B0%20.html"},{default:i(()=>n[0]||(n[0]=[s("Structured Streaming 实现思路与实现概述")])),_:1}),n[2]||(n[2]=s(" 一文，其中概述了 Structured Streaming 的实现思路（包括 StreamExecution, Source, Sink 等在 Structured Streaming 里的作用），有了全局概念后再看本文的细节解释。"))]),n[4]||(n[4]=a(`<h2 id="引言" tabindex="-1"><a class="header-anchor" href="#引言"><span>引言</span></a></h2><p>Structured Streaming 非常显式地提出了输入(Source)、执行(StreamExecution)、输出(Sink)的 3 个组件，并且在每个组件显式地做到 fault-tolerant，由此得到整个 streaming 程序的 end-to-end exactly-once guarantees.</p><p>具体到源码上，Sink 是一个抽象的接口 <a href="https://github.com/apache/spark/blob/master/sql/core/src/main/scala/org/apache/spark/sql/execution/streaming/Sink.scala" target="_blank" rel="noopener noreferrer">trait Sink</a> [1]，只有一个方法：</p><div class="language-scala line-numbers-mode" data-highlighter="prismjs" data-ext="scala"><pre><code><span class="line"><span class="token keyword">trait</span> Sink <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">def</span> addBatch<span class="token punctuation">(</span>batchId<span class="token operator">:</span> <span class="token builtin">Long</span><span class="token punctuation">,</span> data<span class="token operator">:</span> DataFrame<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个仅有的 <code>addBatch()</code> 方法支持了 Structured Streaming 实现 end-to-end exactly-once 处理所一定需要的功能。我们将马上解析这个 <code>addBatch()</code> 方法。</p><p>相比而言，前作 Spark Streaming 并没有对输出进行特别的抽象，而只是在 DStreamGraph [2] 里将一些 dstreams 标记为了 output。当需要 exactly-once 特性时，程序员可以根据当前批次的时间标识，来 <em><strong>自行维护和判断</strong></em> 一个批次是否已经执行过。</p><p>进化到 Structured Streaming 后，显式地抽象出了 Sink，并提供了一些原生幂等的 Sink 实现：</p><ul><li>已支持 <ul><li>HDFS-compatible file system，具体实现是 FileStreamSink extends Sink</li><li>Foreach sink，具体实现是 ForeachSink extends Sink</li><li>Kafka sink，具体实现是 KafkaSink extends Sink</li></ul></li><li>预计后续很快会支持 <ul><li>RDBMS</li></ul></li></ul><h2 id="sink-方法与功能" tabindex="-1"><a class="header-anchor" href="#sink-方法与功能"><span>Sink：方法与功能</span></a></h2><p>在 Structured Streaming 里，由 StreamExecution 作为持续查询的驱动器，分批次不断地：</p><p><img src="`+e+`" alt="Spark 1.0"></p><ol><li>在每个 StreamExecution 的批次最开始，StreamExecution 会向 Source 询问当前 Source 的最新进度，即最新的 offset</li><li>这个 Offset 给到 StreamExecution 后会被 StreamExecution 持久化到自己的 WAL 里</li><li>由 Source 根据 StreamExecution 所要求的 start offset、end offset，提供在 <code>(start, end]</code> 区间范围内的数据</li><li>StreamExecution 触发计算逻辑 logicalPlan 的优化与编译</li><li>把计算结果写出给 Sink <ul><li>具体是由 StreamExecution 调用 <code>Sink.addBatch(batchId: Long, data: DataFrame)</code></li><li>注意这时才会由 Sink 触发发生实际的取数据操作，以及计算过程</li><li>通常 Sink 直接可以直接把 <code>data: DataFrame</code> 的数据写出，并在完成后记录下 <code>batchId: Long</code></li><li>在故障恢复时，分两种情况讨论： <ul><li>(i) 如果上次执行在本步 <em><strong>结束前即失效</strong></em>，那么本次执行里 sink 应该完整写出计算结果</li><li>(ii) 如果上次执行在本步 <em><strong>结束后才失效</strong></em>，那么本次执行里 sink 可以重新写出计算结果（覆盖上次结果），也可以跳过写出计算结果（因为上次执行已经完整写出过计算结果了）</li></ul></li></ul></li><li>在数据完整写出到 Sink 后，StreamExecution 通知 Source 可以废弃数据；然后把成功的批次 id 写入到 batchCommitLog</li></ol><h2 id="sink-的具体实现-hdfs-api-compatible-fs-foreach" tabindex="-1"><a class="header-anchor" href="#sink-的具体实现-hdfs-api-compatible-fs-foreach"><span>Sink 的具体实现：HDFS-API compatible FS, Foreach</span></a></h2><h3 id="a-具体实现-hdfs-api-compatible-fs" tabindex="-1"><a class="header-anchor" href="#a-具体实现-hdfs-api-compatible-fs"><span>(a) 具体实现: HDFS-API compatible FS</span></a></h3><p>通常我们使用如下方法方法写出到 HDFS-API compatible FS:</p><div class="language-scala line-numbers-mode" data-highlighter="prismjs" data-ext="scala"><pre><code><span class="line">writeStream</span>
<span class="line">  <span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">&quot;parquet&quot;</span><span class="token punctuation">)</span>      <span class="token comment">// parquet, csv, json, text, orc ...</span></span>
<span class="line">  <span class="token punctuation">.</span>option<span class="token punctuation">(</span><span class="token string">&quot;checkpointLocation&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;path/to/checkpoint/dir&quot;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span>option<span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;path/to/destination/dir&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么我们看这里 <code>FileStreamSink</code> 具体的 <code>addBatch()</code> 实现是：</p><div class="language-scala line-numbers-mode" data-highlighter="prismjs" data-ext="scala"><pre><code><span class="line">  <span class="token comment">// 来自：class FileStreamSink extends Sink</span></span>
<span class="line">  <span class="token comment">// 版本：Spark 2.1.0</span></span>
<span class="line">  <span class="token keyword">override</span> <span class="token keyword">def</span> addBatch<span class="token punctuation">(</span>batchId<span class="token operator">:</span> <span class="token builtin">Long</span><span class="token punctuation">,</span> data<span class="token operator">:</span> DataFrame<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">/* 首先根据持久化的 fileLog 来判断这个 batchId 是否已经写出过 */</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>batchId <span class="token operator">&lt;=</span> fileLog<span class="token punctuation">.</span>getLatest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span>_<span class="token punctuation">.</span>_1<span class="token punctuation">)</span><span class="token punctuation">.</span>getOrElse<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">/* 如果 batchId 已经完整写出过，则本次跳过 addBatch */</span></span>
<span class="line">      logInfo<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token id function">s</span><span class="token string">&quot;Skipping already committed batch </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">batchId</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">/* 本次需要具体执行写出 data */</span></span>
<span class="line">      <span class="token comment">/* 初始化 FileCommitter -- FileCommitter 能正确处理 task 推测执行、task 失败重做等情况 */</span></span>
<span class="line">      <span class="token keyword">val</span> committer <span class="token operator">=</span> FileCommitProtocol<span class="token punctuation">.</span>instantiate<span class="token punctuation">(</span></span>
<span class="line">        className <span class="token operator">=</span> sparkSession<span class="token punctuation">.</span>sessionState<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>streamingFileCommitProtocolClass<span class="token punctuation">,</span></span>
<span class="line">        jobId <span class="token operator">=</span> batchId<span class="token punctuation">.</span>toString<span class="token punctuation">,</span></span>
<span class="line">        outputPath <span class="token operator">=</span> path<span class="token punctuation">,</span></span>
<span class="line">        isAppend <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">      committer <span class="token keyword">match</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">case</span> manifestCommitter<span class="token operator">:</span> ManifestFileCommitProtocol <span class="token keyword">=&gt;</span></span>
<span class="line">          manifestCommitter<span class="token punctuation">.</span>setupManifestOptions<span class="token punctuation">(</span>fileLog<span class="token punctuation">,</span> batchId<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">case</span> _ <span class="token keyword">=&gt;</span>  <span class="token comment">// Do nothing</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">      <span class="token comment">/* 获取需要做 partition 的 columns */</span></span>
<span class="line">      <span class="token keyword">val</span> partitionColumns<span class="token operator">:</span> Seq<span class="token punctuation">[</span>Attribute<span class="token punctuation">]</span> <span class="token operator">=</span> partitionColumnNames<span class="token punctuation">.</span>map <span class="token punctuation">{</span> col <span class="token keyword">=&gt;</span></span>
<span class="line">        <span class="token keyword">val</span> nameEquality <span class="token operator">=</span> data<span class="token punctuation">.</span>sparkSession<span class="token punctuation">.</span>sessionState<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>resolver</span>
<span class="line">        data<span class="token punctuation">.</span>logicalPlan<span class="token punctuation">.</span>output<span class="token punctuation">.</span>find<span class="token punctuation">(</span>f <span class="token keyword">=&gt;</span> nameEquality<span class="token punctuation">(</span>f<span class="token punctuation">.</span>name<span class="token punctuation">,</span> col<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getOrElse <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">throw</span> <span class="token keyword">new</span> RuntimeException<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token id function">s</span><span class="token string">&quot;Partition column </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">col</span></span><span class="token string"> not found in schema </span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression">data<span class="token punctuation">.</span>schema</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">      <span class="token comment">/* 真正写出数据 */</span></span>
<span class="line">      FileFormatWriter<span class="token punctuation">.</span>write<span class="token punctuation">(</span></span>
<span class="line">        sparkSession <span class="token operator">=</span> sparkSession<span class="token punctuation">,</span></span>
<span class="line">        queryExecution <span class="token operator">=</span> data<span class="token punctuation">.</span>queryExecution<span class="token punctuation">,</span></span>
<span class="line">        fileFormat <span class="token operator">=</span> fileFormat<span class="token punctuation">,</span></span>
<span class="line">        committer <span class="token operator">=</span> committer<span class="token punctuation">,</span></span>
<span class="line">        outputSpec <span class="token operator">=</span> FileFormatWriter<span class="token punctuation">.</span>OutputSpec<span class="token punctuation">(</span>path<span class="token punctuation">,</span> Map<span class="token punctuation">.</span>empty<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        hadoopConf <span class="token operator">=</span> hadoopConf<span class="token punctuation">,</span></span>
<span class="line">        partitionColumns <span class="token operator">=</span> partitionColumns<span class="token punctuation">,</span></span>
<span class="line">        bucketSpec <span class="token operator">=</span> None<span class="token punctuation">,</span></span>
<span class="line">        refreshFunction <span class="token operator">=</span> _ <span class="token keyword">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        options <span class="token operator">=</span> options<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="b-具体实现-foreach" tabindex="-1"><a class="header-anchor" href="#b-具体实现-foreach"><span>(b) 具体实现: Foreach</span></a></h3><p>通常我们使用如下方法写出到 foreach sink:</p><div class="language-scala line-numbers-mode" data-highlighter="prismjs" data-ext="scala"><pre><code><span class="line">writeStream</span>
<span class="line">  <span class="token comment">/* 假设进来的每条数据是 String 类型的 */</span></span>
<span class="line">  <span class="token punctuation">.</span>foreach<span class="token punctuation">(</span><span class="token keyword">new</span> ForeachWriter<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">/* 每个 partition 即每个 task 会在开始时调用此 open() 方法 */</span></span>
<span class="line">    <span class="token comment">/* 注意对于同一个 partitionId/version，此方法可能被先后调用多次，如 task 失效重做时 */</span></span>
<span class="line">    <span class="token comment">/* 注意对于同一个 partitionId/version，此方法也可能被同时调用，如推测执行时 */</span></span>
<span class="line">    <span class="token keyword">override</span> <span class="token keyword">def</span> <span class="token keyword">open</span><span class="token punctuation">(</span>partitionId<span class="token operator">:</span> <span class="token builtin">Long</span><span class="token punctuation">,</span> version<span class="token operator">:</span> <span class="token builtin">Long</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Boolean</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">      println<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token id function">s</span><span class="token string">&quot;open(</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">partitionId</span></span><span class="token string">, </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">version</span></span><span class="token string">)&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token boolean">true</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">/* 此 partition 内即每个 task 内的每条数据，此方法都被调用 */</span></span>
<span class="line">    <span class="token keyword">override</span> <span class="token keyword">def</span> process<span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> println<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token id function">s</span><span class="token string">&quot;process </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">value</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">/* 正常结束或异常结束时，此方法被调用。但一些异常情况时，此方法不一定被调用。 */</span></span>
<span class="line">    <span class="token keyword">override</span> <span class="token keyword">def</span> close<span class="token punctuation">(</span>errorOrNull<span class="token operator">:</span> Throwable<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> println<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token id function">s</span><span class="token string">&quot;close(</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">errorOrNull</span></span><span class="token string">)&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么我们看这里 <code>ForeachSink</code> 具体的 <code>addBatch()</code> 实现是：</p><div class="language-scala line-numbers-mode" data-highlighter="prismjs" data-ext="scala"><pre><code><span class="line">  <span class="token comment">// 来自：class ForeachSink extends Sink with Serializable</span></span>
<span class="line">  <span class="token comment">// 版本：Spark 2.1.0</span></span>
<span class="line">  <span class="token keyword">override</span> <span class="token keyword">def</span> addBatch<span class="token punctuation">(</span>batchId<span class="token operator">:</span> <span class="token builtin">Long</span><span class="token punctuation">,</span> data<span class="token operator">:</span> DataFrame<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">val</span> encoder <span class="token operator">=</span> encoderFor<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">.</span>resolveAndBind<span class="token punctuation">(</span></span>
<span class="line">      data<span class="token punctuation">.</span>logicalPlan<span class="token punctuation">.</span>output<span class="token punctuation">,</span></span>
<span class="line">      data<span class="token punctuation">.</span>sparkSession<span class="token punctuation">.</span>sessionState<span class="token punctuation">.</span>analyzer<span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">/* 是 rdd 的 foreachPartition，即是 task 级别 */</span></span>
<span class="line">    data<span class="token punctuation">.</span>queryExecution<span class="token punctuation">.</span>toRdd<span class="token punctuation">.</span>foreachPartition <span class="token punctuation">{</span> iter <span class="token keyword">=&gt;</span></span>
<span class="line">      <span class="token comment">/* partition/task 级别的 open */</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>writer<span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span>TaskContext<span class="token punctuation">.</span>getPartitionId<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> batchId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">while</span> <span class="token punctuation">(</span>iter<span class="token punctuation">.</span>hasNext<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">/* 对每条数据调用 process() 方法 */</span></span>
<span class="line">            writer<span class="token punctuation">.</span>process<span class="token punctuation">(</span>encoder<span class="token punctuation">.</span>fromRow<span class="token punctuation">(</span>iter<span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">case</span> e<span class="token operator">:</span> Throwable <span class="token keyword">=&gt;</span></span>
<span class="line">            <span class="token comment">/* 异常时调用 close() 方法 */</span></span>
<span class="line">            writer<span class="token punctuation">.</span>close<span class="token punctuation">(</span>e<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">throw</span> e</span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token comment">/* 正常写完调用 close() 方法 */</span></span>
<span class="line">        writer<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">/* 不写数据、直接调用 close() 方法 */</span></span>
<span class="line">        writer<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以我们看到，foreach sink 需要使用者提供 writer，所以这里的可定制度就非常高。</p><p>但是仍然需要注意，由于 foreach 的 writer 可能被 open() 多次，可能有多个 task 同时调用一个 writer。所以推荐 writer 一定要写成幂等的，如果 writer 不幂等、那么 Structured Streaming 框架本身也没有更多的办法能够保证 end-to-end exactly-once guarantees 了。</p><h3 id="c-具体实现-kafka" tabindex="-1"><a class="header-anchor" href="#c-具体实现-kafka"><span>(c) 具体实现: Kafka</span></a></h3><p>Spark 2.1.1 版本开始加入了 KafkaSink，使得 Spark 也能够将数据写入到 kafka 中。</p><p>通常我们使用如下方法写出到 kafka sink:</p><div class="language-scala line-numbers-mode" data-highlighter="prismjs" data-ext="scala"><pre><code><span class="line">writeStream</span>
<span class="line">  <span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">&quot;kafka&quot;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span>option<span class="token punctuation">(</span><span class="token string">&quot;checkpointLocation&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span>outputMode<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span>option<span class="token punctuation">(</span><span class="token string">&quot;kafka.bootstrap.servers&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token comment">// 写出到哪个集群</span></span>
<span class="line">  <span class="token punctuation">.</span>option<span class="token punctuation">(</span><span class="token string">&quot;topic&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token comment">// 写出到哪个 topic</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么我们看这里 <code>KafkaSink</code> 具体的 <code>addBatch()</code> 实现是：</p><div class="language-scala line-numbers-mode" data-highlighter="prismjs" data-ext="scala"><pre><code><span class="line">  <span class="token comment">// 来自：class KafkaSink extends Sink</span></span>
<span class="line">  <span class="token comment">// 版本：Spark 2.1.1, 2.2.0</span></span>
<span class="line">  <span class="token keyword">override</span> <span class="token keyword">def</span> addBatch<span class="token punctuation">(</span>batchId<span class="token operator">:</span> <span class="token builtin">Long</span><span class="token punctuation">,</span> data<span class="token operator">:</span> DataFrame<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>batchId <span class="token operator">&lt;=</span> latestBatchId<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      logInfo<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token id function">s</span><span class="token string">&quot;Skipping already committed batch </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">batchId</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// 主要是通过 KafkaWriter.write() 来做写出；</span></span>
<span class="line">      <span class="token comment">// 在 KafkaWriter.write() 里，主要是继续通过 KafkaWriteTask.execute() 来做写出</span></span>
<span class="line">      KafkaWriter<span class="token punctuation">.</span>write<span class="token punctuation">(</span>sqlContext<span class="token punctuation">.</span>sparkSession<span class="token punctuation">,</span></span>
<span class="line">        data<span class="token punctuation">.</span>queryExecution<span class="token punctuation">,</span> executorKafkaParams<span class="token punctuation">,</span> topic<span class="token punctuation">)</span></span>
<span class="line">      latestBatchId <span class="token operator">=</span> batchId</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么我们继续看这里 <code>KafkaWriteTask</code> 具体的 <code>execute()</code> 实现是：</p><div class="language-scala line-numbers-mode" data-highlighter="prismjs" data-ext="scala"><pre><code><span class="line">  <span class="token comment">// 来自：class KafkaWriteTask</span></span>
<span class="line">  <span class="token comment">// 版本：Spark 2.1.1, 2.2.0</span></span>
<span class="line">  <span class="token keyword">def</span> execute<span class="token punctuation">(</span>iterator<span class="token operator">:</span> Iterator<span class="token punctuation">[</span>InternalRow<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    producer <span class="token operator">=</span> <span class="token keyword">new</span> KafkaProducer<span class="token punctuation">[</span>Array<span class="token punctuation">[</span><span class="token builtin">Byte</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Array<span class="token punctuation">[</span><span class="token builtin">Byte</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">(</span>producerConfiguration<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span>hasNext <span class="token operator">&amp;&amp;</span> failedWrite <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">val</span> currentRow <span class="token operator">=</span> iterator<span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token comment">// 这里的 projection 主要是构建 projectedRow，使得：</span></span>
<span class="line">      <span class="token comment">// 其第 0 号元素是 topic</span></span>
<span class="line">      <span class="token comment">// 其第 1 号元素是 key 的 binary 表示</span></span>
<span class="line">      <span class="token comment">// 其第 2 号元素是 value 的 binary 表示</span></span>
<span class="line">      <span class="token keyword">val</span> projectedRow <span class="token operator">=</span> projection<span class="token punctuation">(</span>currentRow<span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">val</span> topic <span class="token operator">=</span> projectedRow<span class="token punctuation">.</span>getUTF8String<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">val</span> key <span class="token operator">=</span> projectedRow<span class="token punctuation">.</span>getBinary<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">val</span> value <span class="token operator">=</span> projectedRow<span class="token punctuation">.</span>getBinary<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>topic <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token keyword">new</span> NullPointerException<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token id function">s</span><span class="token string">&quot;null topic present in the data. Use the &quot;</span></span> <span class="token operator">+</span></span>
<span class="line">        <span class="token string-interpolation"><span class="token id function">s</span><span class="token string">&quot;</span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression">KafkaSourceProvider<span class="token punctuation">.</span>TOPIC_OPTION_KEY</span><span class="token punctuation">}</span></span><span class="token string"> option for setting a default topic.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token keyword">val</span> record <span class="token operator">=</span> <span class="token keyword">new</span> ProducerRecord<span class="token punctuation">[</span>Array<span class="token punctuation">[</span><span class="token builtin">Byte</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Array<span class="token punctuation">[</span><span class="token builtin">Byte</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">(</span>topic<span class="token punctuation">.</span>toString<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">val</span> callback <span class="token operator">=</span> <span class="token keyword">new</span> Callback<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">override</span> <span class="token keyword">def</span> onCompletion<span class="token punctuation">(</span>recordMetadata<span class="token operator">:</span> RecordMetadata<span class="token punctuation">,</span> e<span class="token operator">:</span> Exception<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">if</span> <span class="token punctuation">(</span>failedWrite <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> e <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            failedWrite <span class="token operator">=</span> e</span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      producer<span class="token punctuation">.</span>send<span class="token punctuation">(</span>record<span class="token punctuation">,</span> callback<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们需要说明的是，由于 Spark 本身会失败重做 —— 包括单个 task 的失败重做、stage 的失败重做、整个拓扑的失败重做等 —— 那么同一条数据可能被写入到 kafka 一次以上。由于 kafka 目前还不支持 transactional write，所以多写入的数据不能被撤销，会造成一些重复。当然 kafka 自身的高可用写入（比如写入 broker 了的数据的 ack 消息没有成功送达 producer，导致 producer 重新发送数据时），也有可能造成重复。</p><p>在 kafka 支持 transactional write 之前，可能需要下游实现下去重机制。比如如果下游仍然是 Structured Streaming，那么可以使用 streaming deduplication 来获得去重后的结果。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>我们总结一下截至目前，Sink 已有的具体实现：</p><table><thead><tr><th style="text-align:center;">Sinks</th><th style="text-align:center;">是否幂等写入</th><th style="text-align:center;">原生内置支持</th><th style="text-align:center;">注解</th></tr></thead><tbody><tr><td style="text-align:center;"><strong>HDFS-compatible file system</strong></td><td style="text-align:center;">√</td><td style="text-align:center;">已支持</td><td style="text-align:center;">包括但不限于 text, json, csv, parquet, orc, ...</td></tr><tr><td style="text-align:center;"><strong>ForeachSink</strong> (自定操作幂等)</td><td style="text-align:center;">√</td><td style="text-align:center;">已支持</td><td style="text-align:center;">可定制度非常高的 sink</td></tr><tr><td style="text-align:center;"><strong>Kafka</strong></td><td style="text-align:center;">×</td><td style="text-align:center;">已支持</td><td style="text-align:center;">Kafka 目前不支持幂等写入，所以可能会有重复写入<br>（但推荐接着 Kafka 使用 streaming de-duplication 来去重）</td></tr><tr><td style="text-align:center;"><strong>ForeachSink</strong> (自定操作不幂等)</td><td style="text-align:center;">×</td><td style="text-align:center;">已支持</td><td style="text-align:center;">不推荐使用不幂等的自定操作</td></tr></tbody></table><p>这里我们特别强调一下，虽然 Structured Streaming 也内置了 <code>console</code> 这个 Source，但其实它的主要用途只是在技术会议/讲座上做 demo，不应用于线上生产系统。</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><ol><li><a href="https://github.com/apache/spark/blob/master/sql/core/src/main/scala/org/apache/spark/sql/execution/streaming/Sink.scala" target="_blank" rel="noopener noreferrer">Github: org/apache/spark/sql/execution/streaming/Sink.scala</a></li><li><a href="https://github.com/apache/spark/blob/master/streaming/src/main/scala/org/apache/spark/streaming/DStreamGraph.scala" target="_blank" rel="noopener noreferrer">Github: org/apache/spark/streaming/DStreamGraph.scala</a></li></ol><br><br>`,43))])}const h=p(k,[["render",d]]),g=JSON.parse('{"path":"/guide/etl/spark/Structured-Streaming-%E4%B9%8BSink%20%E8%A7%A3%E6%9E%90.html","title":"Structured Streaming 之 Sink 解析","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"引言","slug":"引言","link":"#引言","children":[]},{"level":2,"title":"Sink：方法与功能","slug":"sink-方法与功能","link":"#sink-方法与功能","children":[]},{"level":2,"title":"Sink 的具体实现：HDFS-API compatible FS, Foreach","slug":"sink-的具体实现-hdfs-api-compatible-fs-foreach","link":"#sink-的具体实现-hdfs-api-compatible-fs-foreach","children":[{"level":3,"title":"(a) 具体实现: HDFS-API compatible FS","slug":"a-具体实现-hdfs-api-compatible-fs","link":"#a-具体实现-hdfs-api-compatible-fs","children":[]},{"level":3,"title":"(b) 具体实现: Foreach","slug":"b-具体实现-foreach","link":"#b-具体实现-foreach","children":[]},{"level":3,"title":"(c) 具体实现: Kafka","slug":"c-具体实现-kafka","link":"#c-具体实现-kafka","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"updatedTime":1753237474000,"contributors":[{"name":"alice","username":"alice","email":"921757697@qq.com","commits":2,"url":"https://github.com/alice"}],"changelog":[{"hash":"245816fee7920b84913505a4353b6b4f934da7c0","time":1753237474000,"email":"921757697@qq.com","author":"alice","message":"uniapp 组件"},{"hash":"7706e85b299e47a4a064f79e4ce4f11f0e5f015c","time":1745114781000,"email":"921757697@qq.com","author":"alice","message":"doc 整理"}]},"filePathRelative":"guide/etl/spark/Structured-Streaming-之Sink 解析.md"}');export{h as comp,g as data};
