import{_ as l}from"./20250420009-DhL5IorG.js";import{_ as c,c as r,e as t,a,d as s,b as p,w as i,r as u,o as k}from"./app-DlGl6QFf.js";const o="/simple-doc/assets/220-CGVb4H17.png",d="/simple-doc/assets/300-DLJJCRcw.png",m={};function v(g,n){const e=u("RouteLink");return k(),r("div",null,[n[6]||(n[6]=t(`<h1 id="_4-2-structured-streaming-之-watermark-解析" tabindex="-1"><a class="header-anchor" href="#_4-2-structured-streaming-之-watermark-解析"><span>4.2 Structured Streaming 之 Watermark 解析</span></a></h1><p><em><strong>[酷玩 Spark] Structured Streaming 源码解析系列</strong></em></p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">本文内容适用范围：</span>
<span class="line">* 2018.11.02 update, Spark 2.4 全系列 √ (已发布：2.4.0)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,3)),a("p",null,[n[1]||(n[1]=s("阅读本文前，请一定先阅读  ")),p(e,{to:"/guide/etl/spark/Structured%20Streaming%20%E4%B9%8B%20Event%20Time%20%E8%A7%A3%E6%9E%90.html"},{default:i(()=>n[0]||(n[0]=[s("Structured Streaming 之 Event Time 解析")])),_:1}),n[2]||(n[2]=s("，其中解析了 Structured Streaming 的 Event Time 及为什么需要 Watermark。"))]),n[7]||(n[7]=a("h2",{id:"引言",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#引言"},[a("span",null,"引言")])],-1)),n[8]||(n[8]=a("p",{align:"center"},[a("img",{src:o})],-1)),a("p",null,[n[4]||(n[4]=s("我们在前文 ")),p(e,{to:"/guide/etl/spark/Structured%20Streaming%20%E4%B9%8B%20Event%20Time%20%E8%A7%A3%E6%9E%90.html"},{default:i(()=>n[3]||(n[3]=[s("Structured Streaming 之 Event Time 解析")])),_:1}),n[5]||(n[5]=s(" 中的例子，在："))]),n[9]||(n[9]=t(`<ul><li>(a) 对 event time 做 <em>window()</em> + <em>groupBy().count()</em> 即利用状态做跨执行批次的聚合，并且</li><li>(b) 输出模式为 Append 模式</li></ul><p>时，需要知道在 <code>12:30</code> 结束后不会再有对 <code>window 12:00-12:10</code> 的更新，因而可以在 <code>12:30</code> 这个批次结束时，输出 <code>window 12:00-12:10</code> 的 1 条结果。</p><h2 id="watermark-机制" tabindex="-1"><a class="header-anchor" href="#watermark-机制"><span>Watermark 机制</span></a></h2><p>对上面这个例子泛化一点，是：</p><ul><li>(a+) 在对 event time 做 <em>window()</em> + <em>groupBy().aggregation()</em> 即利用状态做跨执行批次的聚合，并且</li><li>(b+) 输出模式为 Append 模式或 Update 模式</li></ul><p>时，Structured Streaming 将依靠 watermark 机制来限制状态存储的无限增长、并（对 Append 模式）尽早输出不再变更的结果。</p><p>换一个角度，如果既不是 Append 也不是 Update 模式，或者是 Append 或 Update 模式、但不需状态做跨执行批次的聚合时，则不需要启用 watermark 机制。</p><p>具体的，我们启用 watermark 机制的方式是：</p><div class="language-scala line-numbers-mode" data-highlighter="prismjs" data-ext="scala"><pre><code><span class="line"><span class="token keyword">val</span> words <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment">// streaming DataFrame of schema { timestamp: Timestamp, word: String }</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Group the data by window and word and compute the count of each group</span></span>
<span class="line"><span class="token keyword">val</span> windowedCounts <span class="token operator">=</span> words</span>
<span class="line">    <span class="token punctuation">.</span>withWatermark<span class="token punctuation">(</span><span class="token string">&quot;timestamp&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;10 minutes&quot;</span><span class="token punctuation">)</span>  <span class="token comment">// 注意这里的 watermark 设置！</span></span>
<span class="line">    <span class="token punctuation">.</span>groupBy<span class="token punctuation">(</span></span>
<span class="line">        window<span class="token punctuation">(</span>$<span class="token string">&quot;timestamp&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;10 minutes&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;5 minutes&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        $<span class="token string">&quot;word&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样即告诉 Structured Streaming，以 <code>timestamp</code> 列的最大值为锚点，往前推 10min 以前的数据不会再收到。这个值 —— 当前的最大 timestamp 再减掉 10min —— 这个随着 timestamp 不断更新的 Long 值，就是 watermark。</p><p align="center"><img src="`+o+'"></p><p>所以，在之前的这里图示中：</p><ul><li>在 <code>12:20</code> 这个批次结束后，锚点变成了 <code>12:20|dog owl</code> 这条记录的 event time <code>12:20</code> ，watermark 变成了 <code>12:20 - 10min = 12:10</code>；</li><li>所以，在 <code>12:30</code> 批次结束时，即知道 event time <code>12:10</code> 以前的数据不再收到了，因而 window <code>12:00-12:10</code> 的结果也不会再被更新，即可以安全地输出结果 <code>12:00-12:10|cat|2</code>；</li><li>在结果 <code>12:00-12:10|cat|2</code> 输出以后，State 中也不再保存 window <code>12:00-12:10</code> 的相关信息 —— 也即 State Store 中的此条状态得到了清理。</li></ul><h2 id="图解-watermark-的进展" tabindex="-1"><a class="header-anchor" href="#图解-watermark-的进展"><span>图解 Watermark 的进展</span></a></h2><p>下图中的这个来自官方的例子 [1]，直观的解释了 watermark 随着 event time 的进展情况（对应的相关参数仍与前面的例子一致）：</p><p align="center"><img src="'+d+'"></p><h2 id="详解-watermark-的进展" tabindex="-1"><a class="header-anchor" href="#详解-watermark-的进展"><span>详解 Watermark 的进展</span></a></h2><h3 id="a-watermark-的保存和恢复" tabindex="-1"><a class="header-anchor" href="#a-watermark-的保存和恢复"><span>(a) Watermark 的保存和恢复</span></a></h3><p>我们知道，在每次 StreamExecution 的每次增量执行（即 IncrementalExecution）开始后，首先会在 driver 端持久化相关的 source offsets 到 offsetLog 中，即下图中的步骤 (1)。实际在这个过程中，也将系统当前的 watermark 等值保存了进去。</p><p><img src="'+l+`" alt="Spark 1.0"></p><p>这样，在故障恢复时，可以从 offsetLog 中恢复出来的 watermark 值；当然在初次启动、还没有 offsetLog 时，watermark 的值会初始化为 0。</p><h3 id="b-watermark-用作过滤条件" tabindex="-1"><a class="header-anchor" href="#b-watermark-用作过滤条件"><span>(b) Watermark 用作过滤条件</span></a></h3><p>在每次 StreamExecution 的每次增量执行（即 IncrementalExecution）开始时，将 driver 端的 watermark 最新值（即已经写入到 offsetLog 里的值）作为过滤条件，加入到整个执行的 logicalPlan 中。</p><p>具体的是在 Append 和 Complete 模式下，且需要与 StateStore 进行交互时，由如下代码设置过滤条件：</p><div class="language-scala line-numbers-mode" data-highlighter="prismjs" data-ext="scala"><pre><code><span class="line"><span class="token comment">/** Generate a predicate that matches data older than the watermark */</span></span>
<span class="line">  <span class="token keyword">private</span> <span class="token keyword">lazy</span> <span class="token keyword">val</span> watermarkPredicate<span class="token operator">:</span> Option<span class="token punctuation">[</span>Predicate<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">val</span> optionalWatermarkAttribute <span class="token operator">=</span></span>
<span class="line">      keyExpressions<span class="token punctuation">.</span>find<span class="token punctuation">(</span>_<span class="token punctuation">.</span>metadata<span class="token punctuation">.</span>contains<span class="token punctuation">(</span>EventTimeWatermark<span class="token punctuation">.</span>delayKey<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    optionalWatermarkAttribute<span class="token punctuation">.</span>map <span class="token punctuation">{</span> watermarkAttribute <span class="token keyword">=&gt;</span></span>
<span class="line">      <span class="token comment">// If we are evicting based on a window, use the end of the window.  Otherwise just</span></span>
<span class="line">      <span class="token comment">// use the attribute itself.</span></span>
<span class="line">      <span class="token keyword">val</span> evictionExpression <span class="token operator">=</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>watermarkAttribute<span class="token punctuation">.</span>dataType<span class="token punctuation">.</span>isInstanceOf<span class="token punctuation">[</span>StructType<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          LessThanOrEqual<span class="token punctuation">(</span></span>
<span class="line">            GetStructField<span class="token punctuation">(</span>watermarkAttribute<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">            Literal<span class="token punctuation">(</span>eventTimeWatermark<span class="token punctuation">.</span>get <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">          LessThanOrEqual<span class="token punctuation">(</span></span>
<span class="line">            watermarkAttribute<span class="token punctuation">,</span></span>
<span class="line">            Literal<span class="token punctuation">(</span>eventTimeWatermark<span class="token punctuation">.</span>get <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">      logInfo<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token id function">s</span><span class="token string">&quot;Filtering state store on: </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">evictionExpression</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">      newPredicate<span class="token punctuation">(</span>evictionExpression<span class="token punctuation">,</span> keyExpressions<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总的来讲，就是进行 <code>event time 的字段 &lt;= watermark</code> 的过滤。</p><p>所以在 Append 模式下，把 StateStore 里符合这个过滤条件的状态进行输出，因为这些状态将来不会再更新了；在 Update 模式下，把符合这个过滤条件的状态删掉，因为这些状态将来不会再更新了。</p><h3 id="c-watermark-的更新" tabindex="-1"><a class="header-anchor" href="#c-watermark-的更新"><span>(c) Watermark 的更新</span></a></h3><p>在单次增量执行的过程中，按照每个 partition 即每个 task，在处理每一条数据时，同时收集 event time 的（统计）数字：</p><div class="language-scala line-numbers-mode" data-highlighter="prismjs" data-ext="scala"><pre><code><span class="line"><span class="token comment">// 来自 EventTimeWatermarkExec</span></span>
<span class="line"><span class="token keyword">case</span> <span class="token keyword">class</span> EventTimeStats<span class="token punctuation">(</span><span class="token keyword">var</span> max<span class="token operator">:</span> <span class="token builtin">Long</span><span class="token punctuation">,</span> <span class="token keyword">var</span> min<span class="token operator">:</span> <span class="token builtin">Long</span><span class="token punctuation">,</span> <span class="token keyword">var</span> sum<span class="token operator">:</span> <span class="token builtin">Long</span><span class="token punctuation">,</span> <span class="token keyword">var</span> count<span class="token operator">:</span> <span class="token builtin">Long</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">def</span> add<span class="token punctuation">(</span>eventTime<span class="token operator">:</span> <span class="token builtin">Long</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>max <span class="token operator">=</span> math<span class="token punctuation">.</span>max<span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>max<span class="token punctuation">,</span> eventTime<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>min <span class="token operator">=</span> math<span class="token punctuation">.</span>min<span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>min<span class="token punctuation">,</span> eventTime<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>sum <span class="token operator">+=</span> eventTime</span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">+=</span> <span class="token number">1</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">def</span> merge<span class="token punctuation">(</span>that<span class="token operator">:</span> EventTimeStats<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>max <span class="token operator">=</span> math<span class="token punctuation">.</span>max<span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>max<span class="token punctuation">,</span> that<span class="token punctuation">.</span>max<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>min <span class="token operator">=</span> math<span class="token punctuation">.</span>min<span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>min<span class="token punctuation">,</span> that<span class="token punctuation">.</span>min<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>sum <span class="token operator">+=</span> that<span class="token punctuation">.</span>sum</span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">+=</span> that<span class="token punctuation">.</span>count</span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">def</span> avg<span class="token operator">:</span> <span class="token builtin">Long</span> <span class="token operator">=</span> sum <span class="token operator">/</span> count</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么每个 partition 即每个 task，收集到了 event time 的 <code>max</code>, <code>min</code>, <code>sum</code>, <code>count</code> 值。在整个 job 结束时，各个 partition 即各个 task 的 <code>EventTimeStats</code> ，收集到 driver 端。</p><p>在 driver 端，在每次增量执行结束后，把收集到的所有的 eventTimeStats 取最大值，并进一步按需更新 watermark（本次可能更新，也可能不更新）：</p><div class="language-scala line-numbers-mode" data-highlighter="prismjs" data-ext="scala"><pre><code><span class="line"><span class="token comment">// 来自 StreamExecution</span></span>
<span class="line">lastExecution<span class="token punctuation">.</span>executedPlan<span class="token punctuation">.</span>collect <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">case</span> e<span class="token operator">:</span> EventTimeWatermarkExec <span class="token keyword">if</span> e<span class="token punctuation">.</span>eventTimeStats<span class="token punctuation">.</span>value<span class="token punctuation">.</span>count <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">=&gt;</span></span>
<span class="line">    logDebug<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token id function">s</span><span class="token string">&quot;Observed event time stats: </span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression">e<span class="token punctuation">.</span>eventTimeStats<span class="token punctuation">.</span>value</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">/* 所收集的 eventTimeStats 的 max 值，减去之前 withWatermark() 时指定的 delayMS 值 */</span></span>
<span class="line">    <span class="token comment">/* 结果保存为 newWatermarkMs */</span></span>
<span class="line">    e<span class="token punctuation">.</span>eventTimeStats<span class="token punctuation">.</span>value<span class="token punctuation">.</span>max <span class="token operator">-</span> e<span class="token punctuation">.</span>delayMs</span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">.</span>headOption<span class="token punctuation">.</span>foreach <span class="token punctuation">{</span> newWatermarkMs <span class="token keyword">=&gt;</span></span>
<span class="line">  <span class="token comment">/* 比较 newWatermarkMs 与当前的 batchWatermarkMs */</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>newWatermarkMs <span class="token operator">&gt;</span> offsetSeqMetadata<span class="token punctuation">.</span>batchWatermarkMs<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">/* 将当前的 batchWatermarkMs 的更新为 newWatermarkMs */</span></span>
<span class="line">    logInfo<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token id function">s</span><span class="token string">&quot;Updating eventTime watermark to: </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">newWatermarkMs</span></span><span class="token string"> ms&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    offsetSeqMetadata<span class="token punctuation">.</span>batchWatermarkMs <span class="token operator">=</span> newWatermarkMs</span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">/* 当前的 batchWatermarkMs 不需要更新 */</span></span>
<span class="line">    logDebug<span class="token punctuation">(</span></span>
<span class="line">      <span class="token string-interpolation"><span class="token id function">s</span><span class="token string">&quot;Event time didn&#39;t move: </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">newWatermarkMs</span></span><span class="token string"> &lt; &quot;</span></span> <span class="token operator">+</span></span>
<span class="line">      <span class="token string-interpolation"><span class="token id function">s</span><span class="token string">&quot;</span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression">offsetSeqMetadata<span class="token punctuation">.</span>batchWatermarkMs</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以我们看，在单次增量执行过程中，具体的是在做 <code>(b) Watermark 用作过滤条件</code> 的过滤过程中，watermark 维持不变。</p><p>直到在单次增量执行结束时，根据收集到的 eventTimeStats，才更新一个 watermark。更新后的 watermark 会被保存和故障时恢复，这个过程是我们在 <code>(a) Watermark 的保存和恢复</code> 中解析的。</p><h2 id="关于-watermark-的一些说明" tabindex="-1"><a class="header-anchor" href="#关于-watermark-的一些说明"><span>关于 watermark 的一些说明</span></a></h2><p>关于 Structured Streaming 的目前 watermark 机制，我们有几点说明：</p><ol><li>再次强调，(a+) 在对 event time 做 <em>window()</em> + <em>groupBy().aggregation()</em> 即利用状态做跨执行批次的聚合，并且 (b+) 输出模式为 Append 模式或 Update 模式时，才需要 watermark，其它时候不需要；</li><li>watermark 的本质是要帮助 StateStore 清理状态、不至于使 StateStore 无限增长；同时，维护 Append 正确的语义（即判断在何时某条结果不再改变、从而将其输出）；</li><li>目前版本（Spark 2.2）的 watermark 实现，是依靠最大 event time 减去一定 late threshold 得到的，尚未支持 Source 端提供的 watermark； <ul><li>未来可能的改进是，从 Source 端即开始提供关于 watermark 的特殊信息，传递到 StreamExecution 中使用 [2]，这样可以加快 watermark 的进展，从而能更早的得到输出数据</li></ul></li><li>Structured Streaming 对于 watermark 的承诺是：(a) watermark 值不后退（包括正常运行和发生故障恢复时）；(b) watermark 值达到后，大多时候会在下一个执行批次输出结果，但也有可能延迟一两个批次（发生故障恢复时），上层应用不应该对此有依赖。</li></ol><h2 id="扩展阅读" tabindex="-1"><a class="header-anchor" href="#扩展阅读"><span>扩展阅读</span></a></h2><ol><li><a href="https://github.com/apache/spark/blob/master/sql/core/src/main/scala/org/apache/spark/sql/execution/streaming/StatefulAggregate.scala" target="_blank" rel="noopener noreferrer">Github: org/apache/spark/sql/execution/streaming/StatefulAggregate.scala</a></li><li><a href="https://ci.apache.org/projects/flink/flink-docs-master/dev/event_timestamps_watermarks.html" target="_blank" rel="noopener noreferrer">Flink Doc: Generating Timestamps / Watermarks</a></li></ol><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><ol><li><a href="http://spark.apache.org/docs/latest/structured-streaming-programming-guide.html" target="_blank" rel="noopener noreferrer">Structured Streaming Programming Guide</a></li><li><a href="https://docs.google.com/document/d/1z-Pazs5v4rA31azvmYhu4I5xwqaNQl6ZLIS03xhkfCQ/edit" target="_blank" rel="noopener noreferrer">Design Doc: Structured Streaming Watermarks for handling late data and dropping old aggregates</a></li></ol><br>`,43))])}const w=c(m,[["render",v]]),f=JSON.parse('{"path":"/guide/etl/spark/Structured-Streaming-%E4%B9%8BWatermark%20%E8%A7%A3%E6%9E%90.html","title":"4.2 Structured Streaming 之 Watermark 解析","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"引言","slug":"引言","link":"#引言","children":[]},{"level":2,"title":"Watermark 机制","slug":"watermark-机制","link":"#watermark-机制","children":[]},{"level":2,"title":"图解 Watermark 的进展","slug":"图解-watermark-的进展","link":"#图解-watermark-的进展","children":[]},{"level":2,"title":"详解 Watermark 的进展","slug":"详解-watermark-的进展","link":"#详解-watermark-的进展","children":[{"level":3,"title":"(a) Watermark 的保存和恢复","slug":"a-watermark-的保存和恢复","link":"#a-watermark-的保存和恢复","children":[]},{"level":3,"title":"(b) Watermark 用作过滤条件","slug":"b-watermark-用作过滤条件","link":"#b-watermark-用作过滤条件","children":[]},{"level":3,"title":"(c) Watermark 的更新","slug":"c-watermark-的更新","link":"#c-watermark-的更新","children":[]}]},{"level":2,"title":"关于 watermark 的一些说明","slug":"关于-watermark-的一些说明","link":"#关于-watermark-的一些说明","children":[]},{"level":2,"title":"扩展阅读","slug":"扩展阅读","link":"#扩展阅读","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"updatedTime":1753237474000,"contributors":[{"name":"alice","username":"alice","email":"921757697@qq.com","commits":2,"url":"https://github.com/alice"}],"changelog":[{"hash":"245816fee7920b84913505a4353b6b4f934da7c0","time":1753237474000,"email":"921757697@qq.com","author":"alice","message":"uniapp 组件"},{"hash":"7706e85b299e47a4a064f79e4ce4f11f0e5f015c","time":1745114781000,"email":"921757697@qq.com","author":"alice","message":"doc 整理"}]},"filePathRelative":"guide/etl/spark/Structured-Streaming-之Watermark 解析.md"}');export{w as comp,f as data};
