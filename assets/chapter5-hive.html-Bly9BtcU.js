import{_ as i,c as a,e as l,o as r}from"./app-DKrcH86L.js";const p="/simple-doc/assets/1-BZfRMCdl.png",n="/simple-doc/assets/2-DJlnsQSf.png",t="/simple-doc/assets/3-D4aY5d3Y.png",s={};function h(d,e){return r(),a("div",null,e[0]||(e[0]=[l('<h1 id="hive-面试题" tabindex="-1"><a class="header-anchor" href="#hive-面试题"><span>Hive 面试题</span></a></h1><h2 id="目录" tabindex="-1"><a class="header-anchor" href="#目录"><span>目录</span></a></h2><ul><li>1.Hive内部表和外部表的区别</li><li>2.Hive索引</li><li>3.运维如何对Hive进行调度</li><li>4.ORC、Parquet等列式存储的优点</li><li>5.数据建模</li><li>6.为什么要数仓分层</li><li>7.Hive支持JSON</li><li>8.sort by和order by</li><li>9.数据倾斜</li><li>10.Hive 小文件</li><li>11.Hive优化</li></ul><h2 id="_1-hive内部表和外部表的区别" tabindex="-1"><a class="header-anchor" href="#_1-hive内部表和外部表的区别"><span>1. Hive内部表和外部表的区别</span></a></h2><p>未被external修饰的是内部表，被external修饰的为外部表。</p><p>区别：</p><ol><li>内部表数据由Hive自身管理，外部表数据由HDFS管理；</li><li>内部表数据存储的位置是 hive.metastore.warehouse.dir（默认：/user/hive/warehouse），外部表数据的存储位置由自己制定（如果没有LOCATION，Hive将在HDFS上的/user/hive/warehouse文件夹下以外部表的表名创建一个文件夹，并将属于这个表的数据存放在这里）；</li><li>删除内部表会直接删除元数据（metadata）及存储数据；删除外部表仅仅会删除元数据，HDFS上的文件并不会被删除。</li></ol><h2 id="_2-hive有索引吗" tabindex="-1"><a class="header-anchor" href="#_2-hive有索引吗"><span>2. Hive有索引吗</span></a></h2><p>Hive支持索引（3.0版本之前），但是Hive的索引与关系型数据库中的索引并不相同， 比如，Hive不支持主键或者外键。并且Hive索引提供的功能很有限，效率也并不高， 因此Hive索引很少使用。</p><ul><li>索引适用的场景：</li></ul><p>适用于不更新的静态字段。以免总是重建索引数据。 每次建立、更新数据后，都要重建索引以构建索引表。</p><ul><li>Hive索引的机制如下：</li></ul><p>hive在指定列上建立索引，会产生一张索引表（Hive的一张物理表）， 里面的字段包括：索引列的值、该值对应的HDFS文件路径、该值在文件中的偏移量。</p><p>Hive 0.8版本后引入bitmap索引处理器，这个处理器适用于去重后，值较少的列（例如，某字段的取值只可能是几个枚举值）</p><p>因为索引是用空间换时间，索引列的取值过多会导致建立bitmap索引表过大。</p><p><strong>注意</strong>：Hive中每次有数据时需要及时更新索引，相当于重建一个新表，否则会影响数据查询的效率和准确性，Hive官方文档已经明确表示Hive的索引不推荐被使用，在新版本的Hive中已经被废弃了。</p><p>扩展：Hive是在0.7版本之后支持索引的，在0.8版本后引入bitmap索引处理器，在3.0版本开始移除索引的功能，取而代之的是2.3版本开始的物化视图，自动重写的物化视图替代了索引的功能。</p><h2 id="_3-运维如何对hive进行调度" tabindex="-1"><a class="header-anchor" href="#_3-运维如何对hive进行调度"><span>3. 运维如何对Hive进行调度</span></a></h2><p>将hive的sql定义在脚本当中； 使用azkaban或者oozie进行任务的调度； 监控任务调度页面。</p><h2 id="_4-orc、parquet等列式存储的优点" tabindex="-1"><a class="header-anchor" href="#_4-orc、parquet等列式存储的优点"><span>4. ORC、Parquet等列式存储的优点</span></a></h2><p>ORC和Parquet都是高性能的存储方式，这两种存储格式总会带来存储和性能上的提升。</p><h3 id="parquet" tabindex="-1"><a class="header-anchor" href="#parquet"><span>Parquet:</span></a></h3><ul><li>Parquet支持嵌套的数据模型，类似于Protocol Buffers，每一个数据模型的schema包含多个字段，每一个字段有三个属性：重复次数、数据类型和字段名。</li></ul><p>重复次数可以是以下三种：required(只出现1次)，repeated(出现0次或多次)，optional(出现0次或1次)。 每一个字段的数据类型可以分成两种： group(复杂类型)和primitive(基本类型)。</p><ul><li><p>Parquet中没有Map、Array这样的复杂数据结构，但是可以通过repeated和group组合来实现的。</p></li><li><p>由于Parquet支持的数据模型比较松散，可能一条记录中存在比较深的嵌套关系，如果为每一条记录都维护一个类似的树状结可能会占用较大的存储空间， 因此Dremel论文中提出了一种高效的对于嵌套数据格式的压缩算法：Striping/Assembly算法。 通过Striping/Assembly算法，parquet可以使用较少的存储空间表示复杂的嵌套格式，并且通常Repetition level和Definition level都是较小的整数值，可以通过RLE算法对其进行压缩，进一步降低存储空间。</p></li><li><p>Parquet文件是以二进制方式存储的，是不可以直接读取和修改的，Parquet文件是自解析的，文件中包括该文件的数据和元数据。</p></li></ul><h3 id="orc" tabindex="-1"><a class="header-anchor" href="#orc"><span>ORC:</span></a></h3><ul><li>ORC文件是自描述的，它的元数据使用Protocol Buffers序列化，并且文件中的数据尽可能的压缩以降低存储空间的消耗。</li><li>和Parquet类似，ORC文件也是以二进制方式存储的，所以是不可以直接读取，ORC文件也是自解析的，它包含许多的元数据，这些元数据都是同构ProtoBuffer进行序列化的。</li><li>ORC会尽可能合并多个离散的区间尽可能的减少I/O次数。</li><li>ORC中使用了更加精确的索引信息，使得在读取数据时可以指定从任意一行开始读取，更细粒度的统计信息使得读取ORC文件跳过整个row group，ORC默认会对任何一块数据和索引信息使用ZLIB压缩，因此ORC文件占用的存储空间也更小。</li><li>在新版本的ORC中也加入了对Bloom Filter的支持，它可以进一步提升谓词下推的效率，Hive 1.2.0版本以后也加入了对此的支持。</li></ul><h2 id="_5-数据建模用的哪些模型" tabindex="-1"><a class="header-anchor" href="#_5-数据建模用的哪些模型"><span>5. 数据建模用的哪些模型？</span></a></h2><h3 id="_1-星型模型" tabindex="-1"><a class="header-anchor" href="#_1-星型模型"><span>1. 星型模型</span></a></h3><p>星形模式 <img src="'+p+'" alt="1"></p><p>星形模式(Star Schema)是最常用的维度建模方式。星型模式是以事实表为中心，所有的维度表直接连接在事实表上，像星星一样。 星形模式的维度建模由一个事实表和一组维表成，且具有以下特点：</p><p>a. 维表只和事实表关联，维表之间没有关联；</p><p>b. 每个维表主键为单列，且该主键放置在事实表中，作为两边连接的外键；</p><p>c. 以事实表为核心，维表围绕核心呈星形分布。</p><h3 id="_2-雪花模型" tabindex="-1"><a class="header-anchor" href="#_2-雪花模型"><span>2. 雪花模型</span></a></h3><p>雪花模式 <img src="'+n+'" alt="2"></p><p>雪花模式(Snowflake Schema)是对星形模式的扩展。雪花模式的维度表可以拥有其他维度表的，虽然这种模型相比星型更规范一些，但是由于这种模型不太容易理解，维护成本比较高，而且性能方面需要关联多层维表，性能比星型模型要低。</p><h3 id="_3-星座模型" tabindex="-1"><a class="header-anchor" href="#_3-星座模型"><span>3. 星座模型</span></a></h3><p>星座模型 <img src="'+t+`" alt="3"></p><p>星座模式是星型模式延伸而来，星型模式是基于一张事实表的，而星座模式是基于多张事实表的，而且共享维度信息。前面介绍的两种维度建模方法都是多维表对应单事实表，但在很多时候维度空间内的事实表不止一个，而一个维表也可能被多个事实表用到。在业务发展后期，绝大部分维度建模都采用的是星座模式。</p><p>数仓建模详细介绍可查看：通俗易懂数仓建模</p><h2 id="_6-为什么要对数据仓库分层" tabindex="-1"><a class="header-anchor" href="#_6-为什么要对数据仓库分层"><span>6. 为什么要对数据仓库分层？</span></a></h2><ul><li><p>用空间换时间，通过大量的预处理来提升应用系统的用户体验（效率），因此数据仓库会存在大量冗余的数据。</p></li><li><p>如果不分层的话，如果源业务系统的业务规则发生变化将会影响整个数据清洗过程，工作量巨大。</p></li><li><p>通过数据分层管理可以简化数据清洗的过程，因为把原来一步的工作分到了多个步骤去完成，相当于把一个复杂的工作拆成了多个简单的工作， 把一个大的黑盒变成了一个白盒，每一层的处理逻辑都相对简单和容易理解，这样我们比较容易保证每一个步骤的正确性，当数据发生错误的时候，往往我们只需要局部调整某个步骤即可。</p></li></ul><p>数据仓库详细介绍可查看：<a href="https://mp.weixin.qq.com/s/-W4Fh3fDhMJTyj92RuNOaw" target="_blank" rel="noopener noreferrer">万字详解整个数据仓库建设体系</a></p><p>作用知道了，就是先计算，在查询，先计算需要抽象出一些名字，这个抽象的名词放在聚合在一起，分层就是通过一些维度和度量将事实表进行分组，分组为一个个抽象的维度表，然后计算，然后在由用户查询</p><h2 id="_7-hive解析json" tabindex="-1"><a class="header-anchor" href="#_7-hive解析json"><span>7. Hive解析JSON</span></a></h2><p>Hive处理json数据总体来说有两个方向的路走：</p><ol><li>将json以字符串的方式整个入Hive表，然后通过使用UDF函数解析已经导入到hive中的数据，比如使用LATERAL VIEW json_tuple的方法，获取所需要的列名。</li><li>在导入之前将json拆成各个字段，导入Hive表的数据是已经解析过的。这将需要使用第三方的 SerDe。 详细介绍可查看：<a href="https://mp.weixin.qq.com/s/awCvlb9BzCRX-Da1_l1FYg" target="_blank" rel="noopener noreferrer">Hive解析Json数组超全讲解</a></li></ol><h2 id="_8-sort-by-和-order-by-的区别" tabindex="-1"><a class="header-anchor" href="#_8-sort-by-和-order-by-的区别"><span>8. sort by 和 order by 的区别</span></a></h2><p>order by 会对输入做全局排序，因此只有一个reducer（多个reducer无法保证全局有序）只有一个reducer，会导致当输入规模较大时，需要较长的计算时间。</p><p>sort by不是全局排序，其在数据进入reducer前完成排序. 因此，如果用sort by进行排序，并且设置mapred.reduce.tasks&gt;1， 则sort by只保证每个reducer的输出有序，不保证全局有序。</p><h2 id="_9-数据倾斜怎么解决" tabindex="-1"><a class="header-anchor" href="#_9-数据倾斜怎么解决"><span>9. 数据倾斜怎么解决</span></a></h2><p>数据倾斜问题主要有以下几种： 6</p><ul><li>空值引发的数据倾斜</li><li>不同数据类型引发的数据倾斜</li><li>不可拆分大文件引发的数据倾斜</li><li>数据膨胀引发的数据倾斜</li><li>表连接时引发的数据倾斜</li><li>确实无法减少数据量引发的数据倾斜</li></ul><p>以上倾斜问题的具体解决方案可查看：Hive千亿级数据倾斜解决方案</p><p>注意：对于 left join 或者 right join 来说，不会对关联的字段自动去除null值，对于 inner join 来说，会对关联的字段自动去除null值。</p><p>小伙伴们在阅读时注意下，在上面的文章（Hive千亿级数据倾斜解决方案）中，有一处sql出现了上述问题（举例的时候原本是想使用left join的，结果手误写成了join）。</p><h2 id="_10-hive-小文件过多怎么解决" tabindex="-1"><a class="header-anchor" href="#_10-hive-小文件过多怎么解决"><span>10. Hive 小文件过多怎么解决</span></a></h2><h3 id="_1-使用-hive-自带的-concatenate-命令-自动合并小文件" tabindex="-1"><a class="header-anchor" href="#_1-使用-hive-自带的-concatenate-命令-自动合并小文件"><span>1. 使用 hive 自带的 concatenate 命令，自动合并小文件</span></a></h3><p>使用方法：</p><p>#对于非分区表 <code>alter table A concatenate;</code></p><p>#对于分区表 <code>alter table B partition(day=20201224) concatenate;</code></p><p>注意：</p><p>1、concatenate 命令只支持 RCFILE 和 ORC 文件类型。 2、使用concatenate命令合并小文件时不能指定合并后的文件数量，但可以多次执行该命令。 3、当多次使用concatenate后文件数量不在变化，这个跟参数 mapreduce.input.fileinputformat.split.minsize=256mb 的设置有关，可设定每个文件的最小size。</p><h3 id="_2-调整参数减少map数量" tabindex="-1"><a class="header-anchor" href="#_2-调整参数减少map数量"><span>2. 调整参数减少Map数量</span></a></h3><p>设置map输入合并小文件的相关参数（执行Map前进行小文件合并）：</p><p>在mapper中将多个文件合成一个split作为输入（CombineHiveInputFormat底层是Hadoop的CombineFileInputFormat方法）：</p><p>set hive.input.format=org.apache.hadoop.hive.ql.io.CombineHiveInputFormat; -- 默认 每个Map最大输入大小（这个值决定了合并后文件的数量）：</p><p>set mapred.max.split.size=256000000; -- 256M 一个节点上split的至少大小（这个值决定了多个DataNode上的文件是否需要合并）：</p><p>set mapred.min.split.size.per.node=100000000; -- 100M 一个交换机下split的至少大小(这个值决定了多个交换机上的文件是否需要合并)：</p><p>set mapred.min.split.size.per.rack=100000000; -- 100M</p><h3 id="_3-减少reduce的数量" tabindex="-1"><a class="header-anchor" href="#_3-减少reduce的数量"><span>3. 减少Reduce的数量</span></a></h3><p>reduce 的个数决定了输出的文件的个数，所以可以调整reduce的个数控制hive表的文件数量。</p><p>hive中的分区函数 distribute by 正好是控制MR中partition分区的，可以通过设置reduce的数量，结合分区函数让数据均衡的进入每个reduce即可：</p><p>#设置reduce的数量有两种方式，第一种是直接设置reduce个数 set mapreduce.job.reduces=10;</p><p>#第二种是设置每个reduce的大小，Hive会根据数据总大小猜测确定一个reduce个数 set hive.exec.reducers.bytes.per.reducer=5120000000; -- 默认是1G，设置为5G</p><p>#执行以下语句，将数据均衡的分配到reduce中</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">set mapreduce.job.reduces=10;</span>
<span class="line">insert overwrite table A partition(dt)</span>
<span class="line">select * from B</span>
<span class="line">distribute by rand();</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于上述语句解释：如设置reduce数量为10，使用 rand()， 随机生成一个数 x % 10 ， 这样数据就会随机进入 reduce 中，防止出现有的文件过大或过小。</p><h3 id="_4-使用hadoop的archive将小文件归档" tabindex="-1"><a class="header-anchor" href="#_4-使用hadoop的archive将小文件归档"><span>4. 使用hadoop的archive将小文件归档</span></a></h3><p>Hadoop Archive简称HAR，是一个高效地将小文件放入HDFS块中的文件存档工具，它能够将多个小文件打包成一个HAR文件，这样在减少namenode内存使用的同时，仍然允许对文件进行透明的访问。</p><p>#用来控制归档是否可用 set hive.archive.enabled=true; #通知Hive在创建归档时是否可以设置父目录 set hive.archive.har.parentdir.settable=true; #控制需要归档文件的大小 set har.partfile.size=1099511627776;</p><p>使用以下命令进行归档： ALTER TABLE A ARCHIVE PARTITION(dt=&#39;2021-05-07&#39;, hr=&#39;12&#39;);</p><p>对已归档的分区恢复为原文件： ALTER TABLE A UNARCHIVE PARTITION(dt=&#39;2021-05-07&#39;, hr=&#39;12&#39;);</p><p>注意: 归档的分区可以查看不能 insert overwrite，必须先 unarchive Hive 小文件问题具体可查看：解决hive小文件过多问题</p><h2 id="_11-hive优化有哪些" tabindex="-1"><a class="header-anchor" href="#_11-hive优化有哪些"><span>11. Hive优化有哪些</span></a></h2><h3 id="_1-数据存储及压缩" tabindex="-1"><a class="header-anchor" href="#_1-数据存储及压缩"><span>1. 数据存储及压缩：</span></a></h3><p>针对hive中表的存储格式通常有orc和parquet，压缩格式一般使用snappy。 相比与textfile格式表，orc占有更少的存储。 因为hive底层使用MR计算架构，数据流是hdfs到磁盘再到hdfs，而且会有很多次， 所以使用orc数据格式和snappy压缩策略可以降低IO读写，还能降低网络传输量， 这样在一定程度上可以节省存储，还能提升hql任务执行效率；</p><h3 id="_2-通过调参优化" tabindex="-1"><a class="header-anchor" href="#_2-通过调参优化"><span>2. 通过调参优化：</span></a></h3><p>并行执行，调节parallel参数；</p><p>调节jvm参数，重用jvm；</p><p>设置map、reduce的参数；开启strict mode模式；</p><p>关闭推测执行设置。</p><h3 id="_3-有效地减小数据集将大表拆分成子表-结合使用外部表和分区表。" tabindex="-1"><a class="header-anchor" href="#_3-有效地减小数据集将大表拆分成子表-结合使用外部表和分区表。"><span>3. 有效地减小数据集将大表拆分成子表；结合使用外部表和分区表。</span></a></h3><h3 id="_4-sql优化" tabindex="-1"><a class="header-anchor" href="#_4-sql优化"><span>4. SQL优化</span></a></h3><p>大表对大表：尽量减少数据集，可以通过分区表，避免扫描全表或者全字段； 大表对小表：设置自动识别小表，将小表放入内存中去执行。 Hive优化详细剖析可查看：Hive企业级性能优化</p><h2 id="_12-tez引擎优点" tabindex="-1"><a class="header-anchor" href="#_12-tez引擎优点"><span>12. Tez引擎优点？</span></a></h2><p>Tez可以将多个有依赖的作业转换为一个作业，这样只需写一次HDFS，且中间节点较少，从而大大提升作业的计算性能。</p><p>Mr/tez/spark区别：</p><ul><li><p>Mr引擎：多job串联，基于磁盘，落盘的地方比较多。虽然慢，但一定能跑出结果。一般处理，周、月、年指标。</p></li><li><p>Spark引擎：虽然在Shuffle过程中也落盘，但是并不是所有算子都需要Shuffle，尤其是多算子过程，中间过程不落盘 DAG有向无环图。 兼顾了可靠性和效率。一般处理天指标。</p></li><li><p>Tez引擎：完全基于内存。 注意：如果数据量特别大，慎重使用。容易OOM。一般用于快速出结果，数据量比较小的场景。</p></li></ul>`,100)]))}const o=i(s,[["render",h]]),v=JSON.parse('{"path":"/guide/etl/hive/chapter5-hive.html","title":"Hive 面试题","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"目录","slug":"目录","link":"#目录","children":[]},{"level":2,"title":"1. Hive内部表和外部表的区别","slug":"_1-hive内部表和外部表的区别","link":"#_1-hive内部表和外部表的区别","children":[]},{"level":2,"title":"2. Hive有索引吗","slug":"_2-hive有索引吗","link":"#_2-hive有索引吗","children":[]},{"level":2,"title":"3. 运维如何对Hive进行调度","slug":"_3-运维如何对hive进行调度","link":"#_3-运维如何对hive进行调度","children":[]},{"level":2,"title":"4. ORC、Parquet等列式存储的优点","slug":"_4-orc、parquet等列式存储的优点","link":"#_4-orc、parquet等列式存储的优点","children":[{"level":3,"title":"Parquet:","slug":"parquet","link":"#parquet","children":[]},{"level":3,"title":"ORC:","slug":"orc","link":"#orc","children":[]}]},{"level":2,"title":"5. 数据建模用的哪些模型？","slug":"_5-数据建模用的哪些模型","link":"#_5-数据建模用的哪些模型","children":[{"level":3,"title":"1. 星型模型","slug":"_1-星型模型","link":"#_1-星型模型","children":[]},{"level":3,"title":"2. 雪花模型","slug":"_2-雪花模型","link":"#_2-雪花模型","children":[]},{"level":3,"title":"3. 星座模型","slug":"_3-星座模型","link":"#_3-星座模型","children":[]}]},{"level":2,"title":"6. 为什么要对数据仓库分层？","slug":"_6-为什么要对数据仓库分层","link":"#_6-为什么要对数据仓库分层","children":[]},{"level":2,"title":"7. Hive解析JSON","slug":"_7-hive解析json","link":"#_7-hive解析json","children":[]},{"level":2,"title":"8. sort by 和 order by 的区别","slug":"_8-sort-by-和-order-by-的区别","link":"#_8-sort-by-和-order-by-的区别","children":[]},{"level":2,"title":"9. 数据倾斜怎么解决","slug":"_9-数据倾斜怎么解决","link":"#_9-数据倾斜怎么解决","children":[]},{"level":2,"title":"10. Hive 小文件过多怎么解决","slug":"_10-hive-小文件过多怎么解决","link":"#_10-hive-小文件过多怎么解决","children":[{"level":3,"title":"1. 使用 hive 自带的 concatenate 命令，自动合并小文件","slug":"_1-使用-hive-自带的-concatenate-命令-自动合并小文件","link":"#_1-使用-hive-自带的-concatenate-命令-自动合并小文件","children":[]},{"level":3,"title":"2. 调整参数减少Map数量","slug":"_2-调整参数减少map数量","link":"#_2-调整参数减少map数量","children":[]},{"level":3,"title":"3. 减少Reduce的数量","slug":"_3-减少reduce的数量","link":"#_3-减少reduce的数量","children":[]},{"level":3,"title":"4. 使用hadoop的archive将小文件归档","slug":"_4-使用hadoop的archive将小文件归档","link":"#_4-使用hadoop的archive将小文件归档","children":[]}]},{"level":2,"title":"11. Hive优化有哪些","slug":"_11-hive优化有哪些","link":"#_11-hive优化有哪些","children":[{"level":3,"title":"1. 数据存储及压缩：","slug":"_1-数据存储及压缩","link":"#_1-数据存储及压缩","children":[]},{"level":3,"title":"2. 通过调参优化：","slug":"_2-通过调参优化","link":"#_2-通过调参优化","children":[]},{"level":3,"title":"3. 有效地减小数据集将大表拆分成子表；结合使用外部表和分区表。","slug":"_3-有效地减小数据集将大表拆分成子表-结合使用外部表和分区表。","link":"#_3-有效地减小数据集将大表拆分成子表-结合使用外部表和分区表。","children":[]},{"level":3,"title":"4. SQL优化","slug":"_4-sql优化","link":"#_4-sql优化","children":[]}]},{"level":2,"title":"12. Tez引擎优点？","slug":"_12-tez引擎优点","link":"#_12-tez引擎优点","children":[]}],"git":{"updatedTime":1744726067000,"contributors":[{"name":"alice","username":"alice","email":"921757697@qq.com","commits":3,"url":"https://github.com/alice"}],"changelog":[{"hash":"d075898e68e7a6d129496b2eb84d6f43099ce89c","time":1744726067000,"email":"921757697@qq.com","author":"alice","message":"deploy"},{"hash":"dfd0622aaebd86afdb6c3a976ac929291d829df9","time":1744704693000,"email":"921757697@qq.com","author":"alice","message":"deploy"},{"hash":"dbc8fce7f951c4a919f1b3e3e4548a92c08bdeba","time":1744649093000,"email":"921757697@qq.com","author":"alice","message":"deploy"}]},"filePathRelative":"guide/etl/hive/chapter5-hive.md"}');export{o as comp,v as data};
