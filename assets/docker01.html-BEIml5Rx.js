import{_ as s,c as n,e as a,o as i}from"./app-DzmgiGLk.js";const c={};function d(l,e){return i(),n("div",null,e[0]||(e[0]=[a(`<h1 id="docker简介" tabindex="-1"><a class="header-anchor" href="#docker简介"><span>Docker简介</span></a></h1><h2 id="核心概念" tabindex="-1"><a class="header-anchor" href="#核心概念"><span>核心概念</span></a></h2><ul><li><p>镜像(Image) 镜像即是副本，是容器的静态文件存储形式，通过命令docker run运行镜像即得到运行的docker容器，其定义类似windows ghost。 通过同一个镜像可以创建完全相同的docker容器。 镜像存储在仓库中，代码交付(程序及运行环境)即是镜像的交付。</p></li><li><p>容器 镜像通过命令运行后即是容器实例。镜像与容器关系类比与代码与程序。代码是程序的静态形式，代码执行即获得程序，程序是代码的动态形式。</p></li><li><p>仓库 仓库即是存储镜像的地方，类似于git仓库，分为本地仓库和远程仓库，通过命令docker pull和docker push可以拉取或者推送镜像文件。</p></li></ul><h2 id="初试docker" tabindex="-1"><a class="header-anchor" href="#初试docker"><span>初试Docker</span></a></h2><h3 id="目标" tabindex="-1"><a class="header-anchor" href="#目标"><span>目标</span></a></h3><p>基于Linux系统，Docker内编写shell脚本文件，Docker容器启动后执行该脚本文件在控制台输入hello world!。并将上述制作成镜像。</p><h3 id="步骤" tabindex="-1"><a class="header-anchor" href="#步骤"><span>步骤</span></a></h3><h4 id="_1-安装docker环境" tabindex="-1"><a class="header-anchor" href="#_1-安装docker环境"><span>1.安装Docker环境</span></a></h4><p>此处不再叙述，首先在Linux系统部署docker环境，通过yum install docker. 安装完成通过docker version验证是否安装成功。显示如下则表示成功</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line">Client:</span>
<span class="line"> Version:      <span class="token number">1.10</span>.3</span>
<span class="line"> API version:  <span class="token number">1.22</span></span>
<span class="line"> Go version:   go1.5.3</span>
<span class="line"> Git commit:   20f81dd</span>
<span class="line"> Built:        Thu Mar <span class="token number">10</span> <span class="token number">21</span>:49:11 <span class="token number">2016</span></span>
<span class="line"> OS/Arch:      linux/amd64</span>
<span class="line"></span>
<span class="line">Server:</span>
<span class="line"> Version:      <span class="token number">1.10</span>.3</span>
<span class="line"> API version:  <span class="token number">1.22</span></span>
<span class="line"> Go version:   go1.5.3</span>
<span class="line"> Git commit:   20f81dd</span>
<span class="line"> Built:        Thu Mar <span class="token number">10</span> <span class="token number">21</span>:49:11 <span class="token number">2016</span></span>
<span class="line"> OS/Arch:      linux/amd64</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-拉取标准镜像" tabindex="-1"><a class="header-anchor" href="#_2-拉取标准镜像"><span>2.拉取标准镜像</span></a></h4><p>首先拉取标准镜像，本文基于Linux环境部署tomcat服务器，因此拉取centos标准镜像。命令：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token function">docker</span> pull centos</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="_3-运行该镜像获得docker容器实例" tabindex="-1"><a class="header-anchor" href="#_3-运行该镜像获得docker容器实例"><span>3.运行该镜像获得docker容器实例</span></a></h4><p>查看下载的docker 镜像ID</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token function">docker</span> images</span>
<span class="line">REPOSITORY TAG IMAGE ID CREATED SIZE</span>
<span class="line">centos latest 49f7960eb7e4 <span class="token number">2</span> weeks ago <span class="token number">199.7</span> MB</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行镜像获取Docker容器实例 <code>docker run -i -t -d 49f7960eb7e4 /bin/bash</code></p><p>运行上述命令(49f7960eb7e4是IMAGE ID，按照自己机器的ID输入，不可照抄)进入运行并进入docker实例中。</p><p>-i 以交互方式运行 -t docker容器运行后进入终端命令行 -d以后台进程方式运行docker容器，这样在退出容器后其容器并没有退出。</p><h4 id="_4-进入docker容器" tabindex="-1"><a class="header-anchor" href="#_4-进入docker容器"><span>4.进入docker容器</span></a></h4><p>在运行上述命令后，控制台输入一串字符串<code>00d0ccf4aebaff1246ced1197264bb15fb80125bcac6156c754772f61bd16d01</code>,容器已经启动且在后台运行， 通过命令 <code>docker ps</code>可以查看到刚刚运行的容器</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token function">docker</span> <span class="token function">ps</span> CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES</span>
<span class="line">00d0ccf4aeba 49f7960eb7e4 “/bin/bash” About a minute ago Up About a minute</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>通过命令<code>docker exec</code>进入docker容器中</p><p><code>docker exec -it 00d0ccf4aeba /bin/bash</code></p><p>上述命令中00d0ccf4aeba 是docker ps命令输出的container ID，运行上述命令以后则进入到熟悉的linux命令行界面，下面就可以像操作linux系统一样操作。</p><h4 id="_5-编写脚本文件" tabindex="-1"><a class="header-anchor" href="#_5-编写脚本文件"><span>5.编写脚本文件</span></a></h4><p>/目录下编写脚本文件,定义为startup.sh</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token shebang important">#!/bin/bash</span></span>
<span class="line"><span class="token builtin class-name">echo</span> “Hello World <span class="token operator">!</span>”</span>
<span class="line"><span class="token builtin class-name">echo</span> “This is first docker.”</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>增加可执行权限</p><p><code>chmod a+x startup.sh</code></p><h4 id="_6-保存制作的docker镜像" tabindex="-1"><a class="header-anchor" href="#_6-保存制作的docker镜像"><span>6.保存制作的Docker镜像</span></a></h4><p>至此，完成docker镜像制作的准备工作。 通过命令exit退出该docker容器,回到物理机终端。 通过docker ps查看刚刚的docker容器。</p><p>注：因为在启动docker容器时候执行docker run -itd通过-d参数使容器后台运行，所以退出时其docker容器仍然在后台运行，如果运行docker run没有加-d参数，当退出时则是真正的退出，上述所做的修改将全部消失。</p><h4 id="_7-制作镜像" tabindex="-1"><a class="header-anchor" href="#_7-制作镜像"><span>7.制作镜像</span></a></h4><p><code>docker commit 00d0ccf4aeba my-image:v1</code> 其中00d0ccf4aeba 是container ID 上述指令语义是将容器00d0ccf4aeba重新打包为名称为my-image，标签为v1的新镜像</p><h4 id="_8-运行新的镜像" tabindex="-1"><a class="header-anchor" href="#_8-运行新的镜像"><span>8.运行新的镜像</span></a></h4><p>再次执行docker images会查看到刚刚制作的镜像my-image:v1。 执行命令docker run运行新镜像</p><p><code>docker run -itd 2b6238c926e8 /bin/bash /startup.sh</code></p><p>命令行输出如下:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line">Hello World <span class="token operator">!</span></span>
<span class="line">This is first docker.</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>至此，完成Docker镜像的制作。将该镜像docker push推到仓库中，然后再任何一台机器通过docker pull即可运行该容器。</p><p>常用指令 运行镜像 <code>docker run -i [image-id ]</code></p><p>运行镜像+脚本 <code>docker run -i -t [image-name] [script-name]</code></p><p>后台运行镜像+脚本 <code>docker run -i -t [image-name] [script-name]</code></p><p>显示运行的Docker容器 <code>docker ps</code></p><p>进入容器内 <code>docker exec -it [docker-id] /bin/bash</code></p><p>宿主机器与docker之间复制文件</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token function">docker</span> <span class="token function">cp</span> host_path containerID:container_path</span>
<span class="line"></span>
<span class="line"><span class="token function">docker</span> events</span>
<span class="line"></span>
<span class="line"><span class="token function">docker</span> logs</span>
<span class="line"></span>
<span class="line"><span class="token function">docker</span> inspect</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,48)]))}const p=s(c,[["render",d]]),o=JSON.parse('{"path":"/guide/devops/docker/docker01.html","title":"Docker简介","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"核心概念","slug":"核心概念","link":"#核心概念","children":[]},{"level":2,"title":"初试Docker","slug":"初试docker","link":"#初试docker","children":[{"level":3,"title":"目标","slug":"目标","link":"#目标","children":[]},{"level":3,"title":"步骤","slug":"步骤","link":"#步骤","children":[]}]}],"git":{"updatedTime":1746034246000,"contributors":[{"name":"alice","username":"alice","email":"921757697@qq.com","commits":1,"url":"https://github.com/alice"}],"changelog":[{"hash":"daf3790ef1795d02fbff734cf83b3c856cbb378c","time":1746034246000,"email":"921757697@qq.com","author":"alice","message":"deploy mysql"}]},"filePathRelative":"guide/devops/docker/docker01.md"}');export{p as comp,o as data};
