import{_ as s,c as a,e,o as p}from"./app-DzmgiGLk.js";const l="/simple-doc/assets/20250418001-DjTnLUTd.png",i="/simple-doc/assets/20250418002-BWMmVP6K.png",t="/simple-doc/assets/20250418003-CsnTCZDz.png",o="/simple-doc/assets/20250418004-CUgciEWY.png",c="/simple-doc/assets/20250418005-BCePXUYE.png",r="/simple-doc/assets/20250418006-cluVYwbd.png",u="/simple-doc/assets/20250418007-BQa4snfn.png",d="/simple-doc/assets/20250418008-3vR2V8sj.png",k={};function m(v,n){return p(),a("div",null,n[0]||(n[0]=[e(`<h1 id="hive-数据倾斜" tabindex="-1"><a class="header-anchor" href="#hive-数据倾斜"><span>Hive 数据倾斜</span></a></h1><p>直接以例子来实践，排查是否出现了数据倾斜，具体是哪段代码导致的倾斜，怎么解决这段代码的倾斜。</p><p>当执行过程中任务卡在 99%，大概率是出现了数据倾斜，但是通常我们的 SQL 很大，需要判断出是哪段代码导致的倾斜，才能利于我们解决倾斜。通过下面这个非常简单的例子来看下如何定位产生数据倾斜的代码。</p><h2 id="需求" tabindex="-1"><a class="header-anchor" href="#需求"><span>需求</span></a></h2><h3 id="表结构描述" tabindex="-1"><a class="header-anchor" href="#表结构描述"><span>表结构描述</span></a></h3><p>先来了解下这些表中我们需要用的字段及数据量：</p><p>表的字段非常多，此处仅列出我们需要的字段</p><p>第一张表：user_info （用户信息表，用户粒度）</p><ul><li>字段名, 字段含义, 字段描述</li><li>userkey, 用户 key, 用户标识</li><li>idno, 用户的身份证号, 用户实名认证时获取</li><li>phone, 用户的手机号, 用户注册时的手机号</li><li>name, 用户的姓名, 用户的姓名</li></ul><p>user_info 表的数据量：1.02 亿，大小：13.9G，所占空间：41.7G（HDFS三副本）</p><p>第二张表：user_active （用户活跃表，用户粒度）</p><ul><li>字段名, 字段含义, 字段描述</li><li>userkey, 用户 key, 用户标识</li><li>user_active_at, 活跃时间, 从埋点日志表中获取用户的最后活跃日期</li></ul><p>user_active 表的数据量：1.1 亿</p><p>第三张表：user_intend（用户意向表，此处只取近六个月的数据，用户粒度）</p><ul><li>字段名, 字段含义, 字段描述</li><li>phone, 用户的手机号, 有意向的用户必须是手机号注册的用户</li><li>intend_commodity, 用户意向次数最多的商品, 客户对某件商品意向次数最多</li><li>intend_rank, 用户意向等级, 用户的购买意愿等级，级数越高，意向越大</li></ul><p>user_intend 表的数据量：800 万</p><p>第四张表：user_order（用户订单表，此处只取近六个月的订单数据，用户粒度）</p><ul><li>字段名, 字段含义, 字段描述</li><li>idno, 用户的身份证号, 下订单的用户都是实名认证的</li><li>order_num, 用户的订单次数, 用户近六个月下单次数</li><li>order_amount, 用户的订单金额, 用户近六个月下单金额</li></ul><p>user_order 表的数据量：640 万</p><h3 id="需求描述" tabindex="-1"><a class="header-anchor" href="#需求描述"><span>需求描述</span></a></h3><p>需求非常简单，就是将以上四张表关联组成一张大宽表，大宽表中包含用户的基本信息，活跃情况，购买意向及此用户下订单情况。</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line"><span class="token keyword">select</span></span>
<span class="line">  a<span class="token punctuation">.</span>userkey<span class="token punctuation">,</span></span>
<span class="line">  a<span class="token punctuation">.</span>idno<span class="token punctuation">,</span></span>
<span class="line">  a<span class="token punctuation">.</span>phone<span class="token punctuation">,</span></span>
<span class="line">  a<span class="token punctuation">.</span>name<span class="token punctuation">,</span></span>
<span class="line">  b<span class="token punctuation">.</span>user_active_at<span class="token punctuation">,</span></span>
<span class="line">  c<span class="token punctuation">.</span>intend_commodity<span class="token punctuation">,</span></span>
<span class="line">  c<span class="token punctuation">.</span>intend_rank<span class="token punctuation">,</span></span>
<span class="line">  d<span class="token punctuation">.</span>order_num<span class="token punctuation">,</span></span>
<span class="line">  d<span class="token punctuation">.</span>order_amount</span>
<span class="line"><span class="token keyword">from</span> user_info a</span>
<span class="line"><span class="token keyword">left</span> <span class="token keyword">join</span> user_active b <span class="token keyword">on</span> a<span class="token punctuation">.</span>userkey <span class="token operator">=</span> b<span class="token punctuation">.</span>userkey</span>
<span class="line"><span class="token keyword">left</span> <span class="token keyword">join</span> user_intend c <span class="token keyword">on</span> a<span class="token punctuation">.</span>phone <span class="token operator">=</span> c<span class="token punctuation">.</span>phone</span>
<span class="line"><span class="token keyword">left</span> <span class="token keyword">join</span> user_order d <span class="token keyword">on</span> a<span class="token punctuation">.</span>idno <span class="token operator">=</span> d<span class="token punctuation">.</span>idno<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行上述语句，在执行到某个 job 时任务卡在 99%：</p><p><img src="`+l+`" alt="01"></p><p>这时我们就应该考虑出现数据倾斜了。其实还有一种情况可能是数据倾斜，就是任务超时被杀掉，Reduce 处理的数据量巨大，在做 full gc 的时候，stop the world。导致响应超时，超出默认的 600 秒，任务被杀掉。报错信息一般如下：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line">AttemptID:attempt_1624419433039_1569885_r_000000 Timed outafter <span class="token number">600</span> secs Container killed by the ApplicationMaster. Container killed onrequest. Exit code is <span class="token number">143</span> Container exited with a non-zero <span class="token builtin class-name">exit</span> code <span class="token number">143</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="倾斜问题排查" tabindex="-1"><a class="header-anchor" href="#倾斜问题排查"><span>倾斜问题排查</span></a></h3><p>数据倾斜大多数都是大 key 问题导致的。</p><p>如何判断是大 key 导致的问题，可以通过下面方法：</p><h4 id="_1-通过时间判断" tabindex="-1"><a class="header-anchor" href="#_1-通过时间判断"><span>1. 通过时间判断</span></a></h4><p>如果某个 reduce 的时间比其他 reduce 时间长的多，如下图，大部分 task 在 1 分钟之内完成，只有 r_000000 这个 task 执行 20 多分钟了还没完成。</p><p><img src="`+i+`" alt="02"></p><p>注意：要排除两种情况：</p><ol><li><p>如果每个 reduce 执行时间差不多，都特别长，不一定是数据倾斜导致的，可能是 reduce 设置过少导致的。</p></li><li><p>有时候，某个 task 执行的节点可能有问题，导致任务跑的特别慢。这个时候，mapreduce 的推测执行，会重启一个任务。如果新的任务在很短时间内能完成，通常则是由于 task 执行节点问题导致的个别 task 慢。但是如果推测执行后的 task 执行任务也特别慢，那更说明该 task 可能会有倾斜问题</p></li></ol><h4 id="_2-通过数据量判断" tabindex="-1"><a class="header-anchor" href="#_2-通过数据量判断"><span>2. 通过数据量判断</span></a></h4><p>通过任务 Counter 判断</p><p>Counter 会记录整个 job 以及每个 task 的统计信息。counter 的 url 一般类似：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">http://bd001:8088/proxy/application_1624419433039_1569885/mapreduce/singletaskcounter/task_1624419433039_1569885_r_000000/org.apache.hadoop.mapreduce.FileSystemCounter</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>通过输入记录数，普通的 task counter 如下，输入的记录数是 13 亿多:</p><p><img src="`+t+'" alt="03"></p><p>而 task=000000 的 counter 如下，其输入记录数是 230 多亿。是其他任务的 100 多倍：</p><p><img src="'+o+'" alt="04"></p><h3 id="定位-sql-代码" tabindex="-1"><a class="header-anchor" href="#定位-sql-代码"><span>定位 SQL 代码</span></a></h3><h4 id="_1-确定任务卡住的-stage" tabindex="-1"><a class="header-anchor" href="#_1-确定任务卡住的-stage"><span>1. 确定任务卡住的 stage</span></a></h4><p>通过 jobname 确定 stage：</p><p>一般 Hive 默认的 jobname 名称会带上 stage 阶段，如下通过 jobname 看到任务卡住的为 Stage-4：</p><p><img src="'+c+'" alt="05"></p><p>如果 jobname 是自定义的，那可能没法通过 jobname 判断 stage。需要借助于任务日志：</p><p>找到执行特别慢的那个 task，然后 Ctrl+F 搜索 “CommonJoinOperator: JOIN struct” 。Hive 在 join 的时候，会把 join 的 key 打印到日志中。如下：</p><p><img src="'+r+'" alt="06"></p><p>上图中的关键信息是：struct&lt;_col0:string, _col1:string, _col3:string&gt;</p><p>这时候，需要参考该 SQL 的执行计划。通过参考执行计划，可以断定该阶段为 Stage-4 阶段：</p><p><img src="'+u+'" alt="07"></p><h4 id="_2-确定-sql-执行代码" tabindex="-1"><a class="header-anchor" href="#_2-确定-sql-执行代码"><span>2. 确定 SQL 执行代码</span></a></h4><p>确定了执行阶段，即 stage。通过执行计划，则可以判断出是执行哪段代码时出现了倾斜。还是从此图，这个 stage 中进行连接操作的表别名是 d：</p><p><img src="'+d+`" alt="08"> 就可以推测出是在执行下面红框中代码时出现了数据倾斜，因为这行的表的别名是 d：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line"><span class="token keyword">select</span></span>
<span class="line">  a<span class="token punctuation">.</span>userkey<span class="token punctuation">,</span></span>
<span class="line">  a<span class="token punctuation">.</span>idno<span class="token punctuation">,</span></span>
<span class="line">  a<span class="token punctuation">.</span>phone<span class="token punctuation">,</span></span>
<span class="line">  a<span class="token punctuation">.</span>name<span class="token punctuation">,</span></span>
<span class="line">  b<span class="token punctuation">.</span>user_active_at<span class="token punctuation">,</span></span>
<span class="line">  c<span class="token punctuation">.</span>intend_commodity<span class="token punctuation">,</span></span>
<span class="line">  c<span class="token punctuation">.</span>intend_rank<span class="token punctuation">,</span></span>
<span class="line">  d<span class="token punctuation">.</span>order_num<span class="token punctuation">,</span></span>
<span class="line">  d<span class="token punctuation">.</span>order_amount</span>
<span class="line"><span class="token keyword">from</span> user_info a</span>
<span class="line"><span class="token keyword">left</span> <span class="token keyword">join</span> user_active b <span class="token keyword">on</span> a<span class="token punctuation">.</span>userkey <span class="token operator">=</span> b<span class="token punctuation">.</span>userkey</span>
<span class="line"><span class="token keyword">left</span> <span class="token keyword">join</span> user_intend c <span class="token keyword">on</span> a<span class="token punctuation">.</span>phone <span class="token operator">=</span> c<span class="token punctuation">.</span>phone</span>
<span class="line"><span class="token keyword">left</span> <span class="token keyword">join</span> user_order d <span class="token keyword">on</span> a<span class="token punctuation">.</span>idno <span class="token operator">=</span> d<span class="token punctuation">.</span>idno<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-解决倾斜" tabindex="-1"><a class="header-anchor" href="#_5-解决倾斜"><span>5. 解决倾斜</span></a></h3><p>我们知道了哪段代码引起的数据倾斜，就针对这段代码查看倾斜原因，看下这段代码的表中数据是否有异常。</p><h4 id="倾斜原因" tabindex="-1"><a class="header-anchor" href="#倾斜原因"><span>倾斜原因:</span></a></h4><p>本文的示例数据中 user_info 和 user_order 通过身份证号关联，检查发现 user_info 表中身份证号为空的有 7000 多万，原因就是这 7000 多万数据都分配到一个 reduce 去执行，导致数据倾斜。</p><h4 id="解决方法" tabindex="-1"><a class="header-anchor" href="#解决方法"><span>解决方法：</span></a></h4><p>可以先把身份证号为空的去除之后再关联，最后按照 userkey 连接，因为 userkey 全部都是有值的：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line"><span class="token keyword">with</span> t1 <span class="token keyword">as</span><span class="token punctuation">(</span></span>
<span class="line"><span class="token keyword">select</span></span>
<span class="line">  u<span class="token punctuation">.</span>userkey<span class="token punctuation">,</span></span>
<span class="line">  o<span class="token punctuation">.</span><span class="token operator">*</span></span>
<span class="line"><span class="token keyword">from</span> user_info u</span>
<span class="line"><span class="token keyword">left</span> <span class="token keyword">join</span> user_order o</span>
<span class="line"><span class="token keyword">on</span> u<span class="token punctuation">.</span>idno <span class="token operator">=</span> o<span class="token punctuation">.</span>idno</span>
<span class="line"><span class="token keyword">where</span> u<span class="token punctuation">.</span>idno <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span></span>
<span class="line"><span class="token comment">--是可以把where条件写在后面的，hive会进行谓词下推，先执行where条件在执行 left join</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">select</span></span>
<span class="line">  a<span class="token punctuation">.</span>userkey<span class="token punctuation">,</span></span>
<span class="line">  a<span class="token punctuation">.</span>idno<span class="token punctuation">,</span></span>
<span class="line">  a<span class="token punctuation">.</span>phone<span class="token punctuation">,</span></span>
<span class="line">  a<span class="token punctuation">.</span>name<span class="token punctuation">,</span></span>
<span class="line">  b<span class="token punctuation">.</span>user_active_at<span class="token punctuation">,</span></span>
<span class="line">  c<span class="token punctuation">.</span>intend_commodity<span class="token punctuation">,</span></span>
<span class="line">  c<span class="token punctuation">.</span>intend_rank<span class="token punctuation">,</span></span>
<span class="line">  d<span class="token punctuation">.</span>order_num<span class="token punctuation">,</span></span>
<span class="line">  d<span class="token punctuation">.</span>order_amount</span>
<span class="line"><span class="token keyword">from</span> user_info a</span>
<span class="line"><span class="token keyword">left</span> <span class="token keyword">join</span> user_active b <span class="token keyword">on</span> a<span class="token punctuation">.</span>userkey <span class="token operator">=</span> b<span class="token punctuation">.</span>userkey</span>
<span class="line"><span class="token keyword">left</span> <span class="token keyword">join</span> user_intend c <span class="token keyword">on</span> a<span class="token punctuation">.</span>phone <span class="token operator">=</span> c<span class="token punctuation">.</span>phone</span>
<span class="line"><span class="token keyword">left</span> <span class="token keyword">join</span> t1 d <span class="token keyword">on</span> a<span class="token punctuation">.</span>userkey <span class="token operator">=</span> d<span class="token punctuation">.</span>userkey<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以这样，给身份证为空的数据赋个随机值，但是要注意随机值不能和表中的身份证号有重复：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line"><span class="token keyword">select</span></span>
<span class="line">  a<span class="token punctuation">.</span>userkey<span class="token punctuation">,</span></span>
<span class="line">  a<span class="token punctuation">.</span>idno<span class="token punctuation">,</span></span>
<span class="line">  a<span class="token punctuation">.</span>phone<span class="token punctuation">,</span></span>
<span class="line">  a<span class="token punctuation">.</span>name<span class="token punctuation">,</span></span>
<span class="line">  b<span class="token punctuation">.</span>user_active_at<span class="token punctuation">,</span></span>
<span class="line">  c<span class="token punctuation">.</span>intend_commodity<span class="token punctuation">,</span></span>
<span class="line">  c<span class="token punctuation">.</span>intend_rank<span class="token punctuation">,</span></span>
<span class="line">  d<span class="token punctuation">.</span>order_num<span class="token punctuation">,</span></span>
<span class="line">  d<span class="token punctuation">.</span>order_amount</span>
<span class="line"><span class="token keyword">from</span> user_info a</span>
<span class="line"><span class="token keyword">left</span> <span class="token keyword">join</span> user_active b <span class="token keyword">on</span> a<span class="token punctuation">.</span>userkey <span class="token operator">=</span> b<span class="token punctuation">.</span>userkey</span>
<span class="line"><span class="token keyword">left</span> <span class="token keyword">join</span> user_intend c <span class="token keyword">on</span> a<span class="token punctuation">.</span>phone <span class="token operator">=</span> c<span class="token punctuation">.</span>phone</span>
<span class="line"><span class="token keyword">left</span> <span class="token keyword">join</span> user_order d <span class="token keyword">on</span> nvl<span class="token punctuation">(</span>a<span class="token punctuation">.</span>idno<span class="token punctuation">,</span>concat<span class="token punctuation">(</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">&#39;idnumber&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> d<span class="token punctuation">.</span>idno<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其他的解决数据倾斜的方法：</p><ol><li>过滤掉脏数据</li></ol><p>如果大 key 是无意义的脏数据，直接过滤掉。本场景中大 key 有实际意义，不能直接过滤掉。</p><ol start="2"><li>数据预处理</li></ol><p>数据做一下预处理（如上面例子，对 null 值赋一个随机值），尽量保证 join 的时候，同一个 key 对应的记录不要有太多。</p><ol start="3"><li>增加 reduce 个数</li></ol><p>如果数据中出现了多个大 key，增加 reduce 个数，可以让这些大 key 落到同一个 reduce 的概率小很多。</p><p>配置 reduce 个数：</p><p><code>set mapred.reduce.tasks = 15;</code></p><ol start="4"><li>转换为 mapjoin</li></ol><p>如果两个表 join 的时候，一个表为小表，可以用 mapjoin 做。</p><p>配置 mapjoin：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token builtin class-name">set</span> hive.auto.convert.join <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  是否开启自动mapjoin，默认是true</span>
<span class="line"><span class="token builtin class-name">set</span> <span class="token assign-left variable">hive.mapjoin.smalltable.filesize</span><span class="token operator">=</span><span class="token number">100000000</span><span class="token punctuation">;</span>   mapjoin的表size大小</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>启用倾斜连接优化</li></ol><p>hive 中可以设置 <code>hive.optimize.skewjoin</code> 将一个 join sql 分为两个 job。 同时可以设置下 <code>hive.skewjoin.key</code>，此参数表示 join 连接的 key 的行数超过指定的行数，就认为该键是偏斜连接键，就对 join 启用倾斜连接优化。 默认 key 的行数是 100000。</p><p>配置倾斜连接优化：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token builtin class-name">set</span> <span class="token assign-left variable">hive.optimize.skewjoin</span><span class="token operator">=</span>true<span class="token punctuation">;</span> 启用倾斜连接优化</span>
<span class="line"><span class="token builtin class-name">set</span> <span class="token assign-left variable">hive.skewjoin.key</span><span class="token operator">=</span><span class="token number">200000</span><span class="token punctuation">;</span> 超过20万行就认为该键是偏斜连接键</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="6"><li>调整内存设置</li></ol><p>适用于那些由于内存超限任务被 kill 掉的场景。通过加大内存起码能让任务跑起来，不至于被杀掉。该参数不一定会明显降低任务执行时间。</p><p>配置内存：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token builtin class-name">set</span> <span class="token assign-left variable">mapreduce.reduce.memory.mb</span><span class="token operator">=</span><span class="token number">5120</span><span class="token punctuation">;</span> 设置reduce内存大小</span>
<span class="line"><span class="token builtin class-name">set</span> <span class="token assign-left variable">mapreduce.reduce.java.opts</span><span class="token operator">=</span>-Xmx5000m <span class="token parameter variable">-XX:MaxPermSize</span><span class="token operator">=</span>128m<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>附：Hive 配置属性官方链接：https://cwiki.apache.org/confluence/display/Hive/Configuration+Properties</p>`,88)]))}const h=s(k,[["render",m]]),_=JSON.parse('{"path":"/guide/etl/hive/hive-%E6%95%B0%E6%8D%AE%E5%80%BE%E6%96%9C.html","title":"Hive 数据倾斜","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"需求","slug":"需求","link":"#需求","children":[{"level":3,"title":"表结构描述","slug":"表结构描述","link":"#表结构描述","children":[]},{"level":3,"title":"需求描述","slug":"需求描述","link":"#需求描述","children":[]},{"level":3,"title":"倾斜问题排查","slug":"倾斜问题排查","link":"#倾斜问题排查","children":[]},{"level":3,"title":"定位 SQL 代码","slug":"定位-sql-代码","link":"#定位-sql-代码","children":[]},{"level":3,"title":"5. 解决倾斜","slug":"_5-解决倾斜","link":"#_5-解决倾斜","children":[]}]}],"git":{"updatedTime":1744979874000,"contributors":[{"name":"alice","username":"alice","email":"921757697@qq.com","commits":1,"url":"https://github.com/alice"}],"changelog":[{"hash":"96752b8f970a514509271255e58a7659bcf6b8f8","time":1744979874000,"email":"921757697@qq.com","author":"alice","message":"doc 整理"}]},"filePathRelative":"guide/etl/hive/hive-数据倾斜.md"}');export{h as comp,_ as data};
