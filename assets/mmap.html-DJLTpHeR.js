import{_ as l,c as e,e as i,o as m}from"./app-DzmgiGLk.js";const n={};function p(h,a){return m(),e("div",null,a[0]||(a[0]=[i('<h1 id="mmap" tabindex="-1"><a class="header-anchor" href="#mmap"><span>mmap</span></a></h1><h2 id="内存映射文件" tabindex="-1"><a class="header-anchor" href="#内存映射文件"><span>内存映射文件</span></a></h2><p>内存映射文件（Memory-mapped file）是一种将磁盘文件映射到内存的技术。它可以让程序直接访问磁盘文件中的数据，而不需要将文件内容读入内存。</p><p>使用内存映射文件，可以减少内存的使用，提高程序的运行速度。</p><h2 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念"><span>基本概念</span></a></h2><p>mmap 即内存映射文件（Memory-mapped file），其作用是把一个文件或者设备的内容映射到进程的地址空间里。这意味着进程可以像访问内存一样直接访问文件或者设备，无需借助传统的 read 和 write 系统调用。</p><h2 id="工作原理" tabindex="-1"><a class="header-anchor" href="#工作原理"><span>工作原理</span></a></h2><ul><li>映射过程：当调用 mmap 系统调用时，操作系统会在进程的虚拟地址空间里分配一段地址区域，接着把文件或者设备的内容映射到这个区域。进程可以通过访问该地址区域来读写文件内容。</li><li>页表机制：操作系统利用页表来管理虚拟地址和物理地址之间的映射关系。当进程访问映射区域的地址时，操作系统会依据页表把虚拟地址转换为物理地址，从而实现对文件内容的访问。</li><li>缓存机制：操作系统会对映射区域进行缓存，以减少磁盘 I/O 操作。当进程对映射区域进行写操作时，操作系统会先把数据写入缓存，随后在合适的时机将数据同步到磁盘。</li></ul><h2 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景"><span>使用场景</span></a></h2><ul><li>文件读写：在需要频繁读写大文件的场景下，mmap 能够显著提升性能。因为它避免了多次系统调用和数据的拷贝，进程可以直接在内存中对文件进行读写操作。</li><li>进程间通信：多个进程可以映射同一个文件，从而实现数据的共享和通信。这样，进程间就可以直接通过访问共享的内存区域来交换数据，无需进行复杂的同步和通信操作。</li><li>设备驱动：mmap 也可用于将设备的内存映射到进程的地址空间，使得进程能够直接访问设备的寄存器和内存，从而实现对设备的控制和数据传输。</li></ul><h2 id="优缺点" tabindex="-1"><a class="header-anchor" href="#优缺点"><span>优缺点</span></a></h2><ul><li>优点 <ul><li>性能提升：减少了系统调用和数据拷贝的次数，从而提升了文件读写的性能。</li><li>代码简洁：进程可以像访问内存一样直接访问文件，无需使用复杂的 read 和 write 系统调用，使代码更加简洁易懂。</li></ul></li><li>缺点 <ul><li>内存占用：mmap 会占用进程的虚拟地址空间，对于内存资源有限的系统，可能会导致内存不足的问题。</li><li>同步问题：在多个进程同时访问共享的映射区域时，需要进行同步操作，以避免数据竞争和不一致的问题。</li><li>文件大小限制：mmap 要求文件大小不能超过系统的虚拟地址空间大小，对于非常大的文件，可能无法一次性映射。</li></ul></li></ul><h2 id="mmap-会占用进程的虚拟地址空间-这个空间是在内存中嘛" tabindex="-1"><a class="header-anchor" href="#mmap-会占用进程的虚拟地址空间-这个空间是在内存中嘛"><span>mmap 会占用进程的虚拟地址空间， 这个空间是在内存中嘛？</span></a></h2><p>mmap 所占用的进程虚拟地址空间并不直接等同于物理内存</p><h3 id="虚拟地址空间与物理内存的关系" tabindex="-1"><a class="header-anchor" href="#虚拟地址空间与物理内存的关系"><span>虚拟地址空间与物理内存的关系</span></a></h3><p>在现代操作系统里，为了实现进程的隔离和内存管理的灵活性，采用了虚拟内存管理机制。每个进程都有自己独立的虚拟地址空间，这是一个连续的地址范围，进程在运行时使用的就是这些虚拟地址。然而，这些虚拟地址并不会直接对应到物理内存，而是需要通过操作系统的页表机制将其映射到物理内存中的实际位置。</p><h3 id="mmap-对虚拟地址空间的占用" tabindex="-1"><a class="header-anchor" href="#mmap-对虚拟地址空间的占用"><span>mmap 对虚拟地址空间的占用</span></a></h3><p>当你调用 mmap 系统调用时，操作系统会在进程的虚拟地址空间里分配一段连续的地址区域，用来映射文件或者设备的内容。这个分配过程仅仅是在虚拟地址空间层面进行操作，并不会立刻分配物理内存。 例如，当你使用 mmap 映射一个大文件时，操作系统会为该文件在虚拟地址空间中预留出足够的地址范围，但并不会马上把文件内容加载到物理内存中。</p><h3 id="物理内存的使用情况" tabindex="-1"><a class="header-anchor" href="#物理内存的使用情况"><span>物理内存的使用情况</span></a></h3><ul><li>缺页中断机制：只有当进程真正访问映射区域的某个虚拟地址时，才会触发缺页中断。此时，操作系统会检查该虚拟地址对应的物理页是否已经存在于物理内存中。若不存在，操作系统会从磁盘（对于文件映射）或者设备中读取相应的数据页到物理内存，并更新页表，把虚拟地址映射到新分配的物理页上。</li><li>缓存和置换策略：操作系统会使用缓存机制来管理物理内存，优先将最近访问的数据页保留在物理内存中。当物理内存不足时，操作系统会采用置换策略（如 LRU）把一些不常用的数据页换出到磁盘，以腾出空间给其他需要的进程或数据。</li></ul><h3 id="示例说明" tabindex="-1"><a class="header-anchor" href="#示例说明"><span>示例说明</span></a></h3><p>假设你有一个大小为 1GB 的文件，使用 mmap 将其映射到进程的虚拟地址空间。在调用 mmap 时，操作系统会在进程的虚拟地址空间中分配 1GB 的连续地址范围，但并不会立即分配 1GB 的物理内存。只有当进程开始访问这个映射区域的不同部分时，操作系统才会根据需要逐步将文件的数据页加载到物理内存中。如果进程只访问了文件的前 100MB 内容，那么实际分配的物理内存可能也只有 100MB 左右。</p><p>综上所述，mmap 占用的是进程的虚拟地址空间，这个空间并不直接对应物理内存。物理内存的使用是根据进程的实际访问情况动态分配和管理的。</p>',23)]))}const r=l(n,[["render",p]]),t=JSON.parse('{"path":"/guide/linux/mmap.html","title":"mmap","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"内存映射文件","slug":"内存映射文件","link":"#内存映射文件","children":[]},{"level":2,"title":"基本概念","slug":"基本概念","link":"#基本概念","children":[]},{"level":2,"title":"工作原理","slug":"工作原理","link":"#工作原理","children":[]},{"level":2,"title":"使用场景","slug":"使用场景","link":"#使用场景","children":[]},{"level":2,"title":"优缺点","slug":"优缺点","link":"#优缺点","children":[]},{"level":2,"title":"mmap 会占用进程的虚拟地址空间， 这个空间是在内存中嘛？","slug":"mmap-会占用进程的虚拟地址空间-这个空间是在内存中嘛","link":"#mmap-会占用进程的虚拟地址空间-这个空间是在内存中嘛","children":[{"level":3,"title":"虚拟地址空间与物理内存的关系","slug":"虚拟地址空间与物理内存的关系","link":"#虚拟地址空间与物理内存的关系","children":[]},{"level":3,"title":"mmap 对虚拟地址空间的占用","slug":"mmap-对虚拟地址空间的占用","link":"#mmap-对虚拟地址空间的占用","children":[]},{"level":3,"title":"物理内存的使用情况","slug":"物理内存的使用情况","link":"#物理内存的使用情况","children":[]},{"level":3,"title":"示例说明","slug":"示例说明","link":"#示例说明","children":[]}]}],"git":{"updatedTime":1745299077000,"contributors":[{"name":"alice","username":"alice","email":"921757697@qq.com","commits":1,"url":"https://github.com/alice"}],"changelog":[{"hash":"016b58ed194f53d02856d8698f36fa1b7d96101d","time":1745299077000,"email":"921757697@qq.com","author":"alice","message":"doc 整理"}]},"filePathRelative":"guide/linux/mmap.md"}');export{r as comp,t as data};
