import{_ as s,c as a,e as p,o as e}from"./app-DN6Q4pKI.js";const t={};function o(c,n){return e(),a("div",null,n[0]||(n[0]=[p(`<h1 id="mysql-explained" tabindex="-1"><a class="header-anchor" href="#mysql-explained"><span>MySQL Explained</span></a></h1><p>explain显示了mysql如何使用索引来处理select语句以及连接表。可以帮助选择更好的索引和写出更优化的查询语句。</p><h2 id="什么是explain" tabindex="-1"><a class="header-anchor" href="#什么是explain"><span>什么是explain</span></a></h2><p>使用explain可以模拟优化器执行SQL查询语句，从而知道MySQL怎么处理你的SQL语句的，分析你的查询语句和表结构的性能瓶颈。</p><ul><li>explain能够干什么</li><li>读取表的顺序</li><li>哪些索引能够被使用</li><li>数据读取操作的操作类型</li><li>哪些索引能够被实际使用</li><li>表之间的引用</li><li>每张表有多少行被物理查询</li><li>创建一个学习用的数据库</li></ul><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line"><span class="token comment">-- mydb</span></span>
<span class="line"><span class="token comment">-- course</span></span>
<span class="line"><span class="token comment">-- stu_course</span></span>
<span class="line"><span class="token comment">-- student</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span>   <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">\`</span>mydb<span class="token punctuation">\`</span></span> <span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">USE</span> <span class="token identifier"><span class="token punctuation">\`</span>mydb<span class="token punctuation">\`</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">\`</span>course<span class="token punctuation">\`</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>course<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span></span>
<span class="line">  <span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">insert</span>  <span class="token keyword">into</span> <span class="token identifier"><span class="token punctuation">\`</span>course<span class="token punctuation">\`</span></span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span><span class="token punctuation">)</span> <span class="token keyword">values</span> </span>
<span class="line"><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&#39;语文&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">&#39;高等数学&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">&#39;视听说&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">&#39;体育&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">&#39;马克思概况&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token string">&#39;民族理论&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token string">&#39;毛中特&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">&#39;计算机基础&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token string">&#39;深度学习&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">&#39;Java程序设计&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token string">&#39;c语言程序设计&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token string">&#39;操作系统&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token string">&#39;计算机网络&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token string">&#39;计算机组成原理&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token string">&#39;数据结构&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token string">&#39;数据分析&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token string">&#39;大学物理&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">&#39;数字逻辑&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token string">&#39;嵌入式开发&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string">&#39;需求工程&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">\`</span>stu_course<span class="token punctuation">\`</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>stu_course<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span></span>
<span class="line">  <span class="token identifier"><span class="token punctuation">\`</span>sid<span class="token punctuation">\`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token identifier"><span class="token punctuation">\`</span>cid<span class="token punctuation">\`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>sid<span class="token punctuation">\`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">\`</span>cid<span class="token punctuation">\`</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">insert</span>  <span class="token keyword">into</span> <span class="token identifier"><span class="token punctuation">\`</span>stu_course<span class="token punctuation">\`</span></span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>sid<span class="token punctuation">\`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">\`</span>cid<span class="token punctuation">\`</span></span><span class="token punctuation">)</span> <span class="token keyword">values</span> </span>
<span class="line"><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token identifier"><span class="token punctuation">\`</span>student<span class="token punctuation">\`</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>student<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span></span>
<span class="line">  <span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token identifier"><span class="token punctuation">\`</span>age<span class="token punctuation">\`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">\`</span>name_age<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">\`</span>age<span class="token punctuation">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">\`</span>id_name_age<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">\`</span>age<span class="token punctuation">\`</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">31</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">insert</span>  <span class="token keyword">into</span> <span class="token identifier"><span class="token punctuation">\`</span>student<span class="token punctuation">\`</span></span><span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">\`</span>age<span class="token punctuation">\`</span></span><span class="token punctuation">)</span> <span class="token keyword">values</span> </span>
<span class="line"><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token string">&#39;乾隆&#39;</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token string">&#39;关羽&#39;</span><span class="token punctuation">,</span><span class="token number">43</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token string">&#39;刘备&#39;</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token string">&#39;刘永&#39;</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token string">&#39;后裔&#39;</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token string">&#39;吕子乔&#39;</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">&#39;嬴政&#39;</span><span class="token punctuation">,</span><span class="token number">76</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token string">&#39;孙悟空&#39;</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">&#39;安其拉&#39;</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token string">&#39;宋江&#39;</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">,</span><span class="token string">&#39;康熙&#39;</span><span class="token punctuation">,</span><span class="token number">51</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token string">&#39;张伟&#39;</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string">&#39;张郃&#39;</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token string">&#39;张飞&#39;</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">27</span><span class="token punctuation">,</span><span class="token string">&#39;朱元璋&#39;</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token string">&#39;李世民&#39;</span><span class="token punctuation">,</span><span class="token number">54</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token string">&#39;李逵&#39;</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">&#39;林冲&#39;</span><span class="token punctuation">,</span><span class="token number">43</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">&#39;橘右京&#39;</span><span class="token punctuation">,</span><span class="token number">43</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token string">&#39;沙和尚&#39;</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token string">&#39;猪八戒&#39;</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token string">&#39;王与&#39;</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token string">&#39;王建&#39;</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">&#39;王莽&#39;</span><span class="token punctuation">,</span><span class="token number">43</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token string">&#39;秦叔宝&#39;</span><span class="token punctuation">,</span><span class="token number">43</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token string">&#39;程咬金&#39;</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">&#39;荆轲&#39;</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">&#39;诸葛亮&#39;</span><span class="token punctuation">,</span><span class="token number">71</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token string">&#39;钟馗&#39;</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&#39;鲁班&#39;</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个数据库实际上的业务是:学生表 - 选课表 - 课程表</p><h2 id="如何使用explain" tabindex="-1"><a class="header-anchor" href="#如何使用explain"><span>如何使用explain</span></a></h2><p>使用而explain很简单就是，在你书写的SQL语句加一个单词 - explain，然后将 explain + SQL执行后会出现一个表，这个表会告诉你MySQL优化器是怎样执行你的SQL的。</p><p>就比如执行下面一句语句：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line"><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>MySQL会给你反馈下面一个信息：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line">    id  select_type  <span class="token keyword">table</span>    partitions  <span class="token keyword">type</span>    possible_keys  <span class="token keyword">key</span>       key_len  ref       <span class="token keyword">rows</span>  filtered  Extra        </span>
<span class="line"><span class="token comment">------  -----------  -------  ----------  ------  -------------  --------  -------  ------  ------  --------  -------------</span></span>
<span class="line">     <span class="token number">1</span>  <span class="token keyword">SIMPLE</span>       student  <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">)</span>      <span class="token keyword">index</span>   <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">)</span>         name_age  <span class="token number">68</span>       <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">)</span>      <span class="token number">30</span>    <span class="token number">100.00</span>  <span class="token keyword">Using</span> <span class="token keyword">index</span>  </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>具体这些信息是干什么的，会对你有什么帮助，会在下面告诉你。</p><h2 id="explain各个字段代表的意思" tabindex="-1"><a class="header-anchor" href="#explain各个字段代表的意思"><span>explain各个字段代表的意思</span></a></h2><ul><li>id ：select查询的序列号，包含一组数字，表示查询中执行select子句或操作表的顺序</li><li>select_type ：查询类型 或者是 其他操作类型</li><li>table ：正在访问哪个表</li><li>partitions ：匹配的分区</li><li>type ：访问的类型</li><li>possible_keys ：显示可能应用在这张表中的索引，一个或多个，但不一定实际使用到</li><li>key ：实际使用到的索引，如果为NULL，则没有使用索引</li><li>key_len ：表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度</li><li>ref ：显示索引的哪一列被使用了，如果可能的话，是一个常数，哪些列或常量被用于查找索引列上的值</li><li>rows ：根据表统计信息及索引选用情况，大致估算出找到所需的记录所需读取的行数</li><li>filtered ：查询的表行占表的百分比</li><li>Extra ：包含不适合在其它列中显示但十分重要的额外信息</li></ul><p>上面介绍了每个字段的意思，可以大体看一下，下面会逐一介绍每个字段表示的啥？该关注什么？</p><h3 id="id与table字段" tabindex="-1"><a class="header-anchor" href="#id与table字段"><span>id与table字段</span></a></h3><p>为什么要将id和table放在一起讲呢？因为通过这两个字段可以完全判断出你的每一条SQL语句的执行顺序和表的查询顺序。</p><p>先看id后看table，id和table在SQL执行判断过程中的关系就像是足球联赛的积分榜，首先一个联赛的球队排名应该先看积分，积分越高的球队排名越靠前，当两支或多只球队的积分一样高怎么办呢？那我们就看净胜球，净胜球越多的球队，排在前面。而在explain中你可以把id看作是球队积分，table当作是净胜球。</p><p>比如说我们explain一下这一条SQL：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line"><span class="token keyword">EXPLAIN</span></span>
<span class="line"><span class="token keyword">SELECT</span> </span>
<span class="line">    S<span class="token punctuation">.</span>id<span class="token punctuation">,</span>S<span class="token punctuation">.</span>name<span class="token punctuation">,</span>S<span class="token punctuation">.</span>age<span class="token punctuation">,</span>C<span class="token punctuation">.</span>id<span class="token punctuation">,</span>C<span class="token punctuation">.</span>name</span>
<span class="line"><span class="token keyword">FROM</span> course C <span class="token keyword">JOIN</span> stu_course SC <span class="token keyword">ON</span> C<span class="token punctuation">.</span>id <span class="token operator">=</span> SC<span class="token punctuation">.</span>cid</span>
<span class="line"><span class="token keyword">JOIN</span> student S <span class="token keyword">ON</span> S<span class="token punctuation">.</span>id <span class="token operator">=</span> SC<span class="token punctuation">.</span>sid</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果是这样：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line">    id  select_type  <span class="token keyword">table</span>   partitions  <span class="token keyword">type</span>    possible_keys        <span class="token keyword">key</span>      key_len  ref      </span>
<span class="line"><span class="token comment">------  -----------  ------  ----------  ------  -------------------  -------  -------  ----------- </span></span>
<span class="line">     <span class="token number">1</span>  <span class="token keyword">SIMPLE</span>       SC      <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">)</span>      <span class="token keyword">index</span>   <span class="token keyword">PRIMARY</span>              <span class="token keyword">PRIMARY</span>  <span class="token number">8</span>        <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">)</span>     </span>
<span class="line">     <span class="token number">1</span>  <span class="token keyword">SIMPLE</span>       C       <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">)</span>      eq_ref  <span class="token keyword">PRIMARY</span>              <span class="token keyword">PRIMARY</span>  <span class="token number">4</span>        mydb<span class="token punctuation">.</span>SC<span class="token punctuation">.</span>cid </span>
<span class="line">     <span class="token number">1</span>  <span class="token keyword">SIMPLE</span>       S       <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">)</span>      eq_ref  <span class="token keyword">PRIMARY</span><span class="token punctuation">,</span>id_name_age  <span class="token keyword">PRIMARY</span>  <span class="token number">4</span>        mydb<span class="token punctuation">.</span>SC<span class="token punctuation">.</span>sid </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们看到id全是1，那就说明光看id这个值是看不出来每个表的读取顺序的，那我们就来看table这一行，它的读取顺序是自上向下的，所以，这三个表的读取顺序应当是：SC - C - S。</p><p>再来看一条SQL</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line"><span class="token keyword">EXPLAIN</span></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span> </span>
<span class="line"><span class="token keyword">FROM</span> course <span class="token keyword">AS</span> C </span>
<span class="line"><span class="token keyword">WHERE</span> C<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span> <span class="token operator">=</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token keyword">SELECT</span> SC<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>cid<span class="token punctuation">\`</span></span> </span>
<span class="line">    <span class="token keyword">FROM</span> stu_course <span class="token keyword">AS</span> SC </span>
<span class="line">    <span class="token keyword">WHERE</span> SC<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>sid<span class="token punctuation">\`</span></span> <span class="token operator">=</span> </span>
<span class="line">    <span class="token punctuation">(</span></span>
<span class="line">        <span class="token keyword">SELECT</span> </span>
<span class="line">            S<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span> </span>
<span class="line">        <span class="token keyword">FROM</span> student <span class="token keyword">AS</span> S</span>
<span class="line">        <span class="token keyword">WHERE</span>  S<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token operator">=</span> <span class="token string">&quot;安其拉&quot;</span></span>
<span class="line">    <span class="token punctuation">)</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> SC<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>cid<span class="token punctuation">\`</span></span> <span class="token keyword">LIMIT</span> <span class="token number">1</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这条语句是查询结果是：一个叫安其拉的学生选的课里面，课程id最小的一门课的信息，然后来看一下explain的结果吧！</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line">    id  select_type  <span class="token keyword">table</span>   partitions  <span class="token keyword">type</span>    possible_keys  <span class="token keyword">key</span>      key_len  ref    </span>
<span class="line"><span class="token comment">------  -----------  ------  ----------  ------  -------------  -------  -------  ------  </span></span>
<span class="line">     <span class="token number">1</span>  <span class="token keyword">PRIMARY</span>      C       <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">)</span>      const   <span class="token keyword">PRIMARY</span>        <span class="token keyword">PRIMARY</span>  <span class="token number">4</span>        const   </span>
<span class="line">     <span class="token number">2</span>  SUBQUERY     SC      <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">)</span>      ref     <span class="token keyword">PRIMARY</span>        <span class="token keyword">PRIMARY</span>  <span class="token number">4</span>        const  </span>
<span class="line">     <span class="token number">3</span>  SUBQUERY     S       <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">)</span>      ref     name<span class="token punctuation">,</span>name_age  name     <span class="token number">63</span>       const </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时我们发现id是不相同的，所以我们很容易就看出表读取的顺序了是吧！C - SC - S</p><p>注意！！！！！！你仔细看一下最里面的子查询是查询的哪个表，是S这张表，然后外面一层呢？是SC这张表，最外面这一层呢？是C这张表，所以执行顺序应该是啥呢？是....是.....难道是S - SC - C吗？是id越大的table读取越在前面吗？是的！这就像刚才说的足球联赛积分，分数越高的球队的排序越靠前。</p><p>当然还有下面这种情况</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line"><span class="token keyword">EXPLAIN</span></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span> </span>
<span class="line"><span class="token keyword">FROM</span> course <span class="token keyword">AS</span> C </span>
<span class="line"><span class="token keyword">WHERE</span> C<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span> <span class="token operator">IN</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token keyword">SELECT</span> SC<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>cid<span class="token punctuation">\`</span></span> </span>
<span class="line">    <span class="token keyword">FROM</span> stu_course <span class="token keyword">AS</span> SC </span>
<span class="line">    <span class="token keyword">WHERE</span> SC<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>sid<span class="token punctuation">\`</span></span> <span class="token operator">=</span> </span>
<span class="line">    <span class="token punctuation">(</span></span>
<span class="line">        <span class="token keyword">SELECT</span> </span>
<span class="line">            S<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span> </span>
<span class="line">        <span class="token keyword">FROM</span> student <span class="token keyword">AS</span> S</span>
<span class="line">        <span class="token keyword">WHERE</span>  S<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token operator">=</span> <span class="token string">&quot;安其拉&quot;</span></span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个查询是：查询安其拉选课的课程信息</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line">    id  select_type  <span class="token keyword">table</span>   partitions  <span class="token keyword">type</span>    possible_keys  <span class="token keyword">key</span>      key_len  ref           </span>
<span class="line"><span class="token comment">------  -----------  ------  ----------  ------  -------------  -------  -------  ----------- </span></span>
<span class="line">     <span class="token number">1</span>  <span class="token keyword">PRIMARY</span>      SC      <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">)</span>      ref     <span class="token keyword">PRIMARY</span>        <span class="token keyword">PRIMARY</span>  <span class="token number">4</span>        const       </span>
<span class="line">     <span class="token number">1</span>  <span class="token keyword">PRIMARY</span>      C       <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">)</span>      eq_ref  <span class="token keyword">PRIMARY</span>        <span class="token keyword">PRIMARY</span>  <span class="token number">4</span>        mydb<span class="token punctuation">.</span>SC<span class="token punctuation">.</span>cid </span>
<span class="line">     <span class="token number">3</span>  SUBQUERY     S       <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">)</span>      ref     name<span class="token punctuation">,</span>name_age  name     <span class="token number">63</span>       const   </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果很明确：先看id应该是S表最先被读取，SC和C表id相同，然后table中SC更靠上，所以第二张读取的表应当是SC，最后读取C。</p><h3 id="select-type字段" tabindex="-1"><a class="header-anchor" href="#select-type字段"><span>select_type字段</span></a></h3><ul><li>SIMPLE 简单查询，不包括子查询和union查询</li></ul><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line"><span class="token keyword">EXPLAIN</span> </span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">JOIN</span> stu_course <span class="token keyword">ON</span> student<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span> <span class="token operator">=</span> sid</span>
<span class="line">    id  select_type  <span class="token keyword">table</span>       partitions  <span class="token keyword">type</span>    possible_keys        <span class="token keyword">key</span>      </span>
<span class="line"><span class="token comment">------  -----------  ----------  ----------  ------  -------------------  --------  </span></span>
<span class="line">     <span class="token number">1</span>  <span class="token keyword">SIMPLE</span>       student     <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">)</span>      <span class="token keyword">index</span>   <span class="token keyword">PRIMARY</span><span class="token punctuation">,</span>id_name_age  name_age  </span>
<span class="line">     <span class="token number">1</span>  <span class="token keyword">SIMPLE</span>       stu_course  <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">)</span>      ref     <span class="token keyword">PRIMARY</span>              <span class="token keyword">PRIMARY</span>  </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>PRIMARY 当存在子查询时，最外面的查询被标记为主查询</p></li><li><p>SUBQUERY 子查询</p></li></ul><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line"><span class="token keyword">EXPLAIN</span></span>
<span class="line"><span class="token keyword">SELECT</span> SC<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>cid<span class="token punctuation">\`</span></span> </span>
<span class="line"><span class="token keyword">FROM</span> stu_course <span class="token keyword">AS</span> SC </span>
<span class="line"><span class="token keyword">WHERE</span> SC<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>sid<span class="token punctuation">\`</span></span> <span class="token operator">=</span> </span>
<span class="line"><span class="token punctuation">(</span></span>
<span class="line">    <span class="token keyword">SELECT</span> </span>
<span class="line">        S<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span> </span>
<span class="line">    <span class="token keyword">FROM</span> student <span class="token keyword">AS</span> S</span>
<span class="line">    <span class="token keyword">WHERE</span>  S<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token operator">=</span> <span class="token string">&quot;安其拉&quot;</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-markdown line-numbers-mode" data-highlighter="prismjs" data-ext="md"><pre><code><span class="line">    id  select_type  table   partitions  type    possible_keys  key      key_len  ref      </span>
<span class="line"><span class="token hr punctuation">------  -----------  ------  ----------  ------  -------------  -------  -------  ------</span> </span>
<span class="line">     1  PRIMARY      SC      (NULL)      ref     PRIMARY        PRIMARY  4        const  </span>
<span class="line">     2  SUBQUERY     S       (NULL)      ref     name,name_age  name     63       const   </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>UNION 当一个查询在UNION关键字之后就会出现UNION</li><li>UNION RESULT 连接几个表查询后的结果</li></ul><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line"><span class="token keyword">EXPLAIN</span></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line"><span class="token keyword">UNION</span></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">2</span></span>
<span class="line">    id  select_type   <span class="token keyword">table</span>       partitions  <span class="token keyword">type</span>    possible_keys        <span class="token keyword">key</span>      </span>
<span class="line"><span class="token comment">------  ------------  ----------  ----------  ------  -------------------  ------- </span></span>
<span class="line">     <span class="token number">1</span>  <span class="token keyword">PRIMARY</span>       student     <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">)</span>      const   <span class="token keyword">PRIMARY</span><span class="token punctuation">,</span>id_name_age  <span class="token keyword">PRIMARY</span>  </span>
<span class="line">     <span class="token number">2</span>  <span class="token keyword">UNION</span>         student     <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">)</span>      const   <span class="token keyword">PRIMARY</span><span class="token punctuation">,</span>id_name_age  <span class="token keyword">PRIMARY</span> </span>
<span class="line"><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">)</span>  <span class="token keyword">UNION</span> RESULT  <span class="token operator">&lt;</span>union1<span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">&gt;</span>  <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">)</span>      <span class="token keyword">ALL</span>     <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">)</span>               <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">)</span>   </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面可以看到第三行table的值是&lt;union1,2&gt;</p><ul><li>DERIVED 在FROM列表中包含的子查询被标记为DERIVED（衍生），MySQL 会递归执行这些子查询，把结果放在临时表中 MySQL5.7+ 进行优化了，增加了derived_merge（派生合并），默认开启，可加快查询效率</li></ul><p>当你的MySQL是5.7及以上版本时你要将derived_merge关闭后才能看到DERIVED 状态</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line"><span class="token keyword">set</span> <span class="token keyword">session</span> optimizer_switch<span class="token operator">=</span><span class="token string">&#39;derived_merge=off&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">set</span> <span class="token keyword">global</span> optimizer_switch<span class="token operator">=</span><span class="token string">&#39;derived_merge=off&#39;</span><span class="token punctuation">;</span> </span>
<span class="line"><span class="token keyword">EXPLAIN</span></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> </span>
<span class="line"><span class="token punctuation">(</span></span>
<span class="line">    <span class="token keyword">SELECT</span> <span class="token operator">*</span> </span>
<span class="line">    <span class="token keyword">FROM</span> student <span class="token keyword">AS</span> S <span class="token keyword">JOIN</span> stu_course <span class="token keyword">AS</span> SC </span>
<span class="line">    <span class="token keyword">ON</span> S<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span> <span class="token operator">=</span> SC<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>sid<span class="token punctuation">\`</span></span></span>
<span class="line"><span class="token punctuation">)</span> <span class="token keyword">AS</span> SSC</span>
<span class="line">    id  select_type  <span class="token keyword">table</span>       partitions  <span class="token keyword">type</span>    possible_keys        <span class="token keyword">key</span>       </span>
<span class="line"><span class="token comment">------  -----------  ----------  ----------  ------  -------------------  -------- </span></span>
<span class="line">     <span class="token number">1</span>  <span class="token keyword">PRIMARY</span>      <span class="token operator">&lt;</span>derived2<span class="token operator">&gt;</span>  <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">)</span>      <span class="token keyword">ALL</span>     <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">)</span>               <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">)</span>    </span>
<span class="line">     <span class="token number">2</span>  DERIVED      S           <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">)</span>      <span class="token keyword">index</span>   <span class="token keyword">PRIMARY</span><span class="token punctuation">,</span>id_name_age  name_age </span>
<span class="line">     <span class="token number">2</span>  DERIVED      SC          <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">)</span>      ref     <span class="token keyword">PRIMARY</span>              <span class="token keyword">PRIMARY</span>  </span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面我们观察，最外层的主查询的表是<code>derived2</code>,而<code>S</code>和<code>SC</code>表的<code>select_type</code>都是<code>DERIVED</code>,这说明S和SC都被用来做衍生查询，而这两张表查询的结果组成了名为<code>derived2</code>的衍生表，而衍生表的命名就是<code>select_type + id</code>。</p><ul><li><p>partitions字段 该列显示的为分区表命中的分区情况。非分区表该字段为空（null）。</p></li><li><p>type字段 注意！！！注意！！！重点来了！</p></li></ul><p>首先说一下这个字段，要记住以下10个状态，（从左往右，越靠左边的越优秀）</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line">NULL <span class="token operator">&gt;</span> system <span class="token operator">&gt;</span> const <span class="token operator">&gt;</span> eq_ref <span class="token operator">&gt;</span> ref <span class="token operator">&gt;</span> ref_or_null <span class="token operator">&gt;</span> index_merge <span class="token operator">&gt;</span> range <span class="token operator">&gt;</span> index <span class="token operator">&gt;</span> ALL</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>NULL MySQL能够在优化阶段分解查询语句，在执行阶段用不着再访问表或索引</p><p>有没有这样一种疑惑，不查询索引也不查询表那你的数据是从哪里来的啊？谁说SELECT语句必须查询某样东西了？</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line"><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token number">5</span><span class="token operator">*</span><span class="token number">7</span></span>
<span class="line">    id  select_type  <span class="token keyword">table</span>   partitions  <span class="token keyword">type</span>    possible_keys  <span class="token keyword">key</span>     </span>
<span class="line"><span class="token comment">------  -----------  ------  ----------  ------  -------------  ------ </span></span>
<span class="line">     <span class="token number">1</span>  <span class="token keyword">SIMPLE</span>       <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">)</span>      <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">)</span>         <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">)</span> </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>存在这样一种情况，大家都知道索引是将数据在B+Tree中进行排序了，所以你的查询速率才这么高，那么B+树的最边上的叶子节点是不是要么是最大值要么是最小值啊？既然你都知道了，那MySQL比你更知道啊！当你要查询最大值或者最小值时，MySQL会直接到你的索引得分叶子节点上直接拿，所以不用访问表或者索引。</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line"><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token function">MAX</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">FROM</span> student</span>
<span class="line">    id  select_type  <span class="token keyword">table</span>   partitions  <span class="token keyword">type</span>    possible_keys  <span class="token keyword">key</span>    </span>
<span class="line"><span class="token comment">------  -----------  ------  ----------  ------  -------------  ------ </span></span>
<span class="line">     <span class="token number">1</span>  <span class="token keyword">SIMPLE</span>       <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">)</span>      <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">)</span>         <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">)</span> </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是！你要记住，NULL的前提是你已经建立了索引。</p><ul><li>SYSTEM 表只有一行记录（等于系统表），这是const类型的特列，平时不大会出现，可以忽略。</li><li>const 表示通过索引一次就找到了，const用于比较primary key或uique索引，因为只匹配一行数据，所以很快，如主键置于where列表中，MySQL就能将该查询转换为一个常量。</li></ul><p>简单来说，const是直接按主键或唯一键读取。</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line"><span class="token keyword">EXPLAIN</span></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">AS</span> S <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">10</span></span>
<span class="line">    id  select_type  <span class="token keyword">table</span>   partitions  <span class="token keyword">type</span>    possible_keys  <span class="token keyword">key</span>      </span>
<span class="line"><span class="token comment">------  -----------  ------  ----------  ------  -------------  -------  </span></span>
<span class="line">     <span class="token number">1</span>  <span class="token keyword">SIMPLE</span>       S       <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">)</span>      const   <span class="token keyword">PRIMARY</span>        <span class="token keyword">PRIMARY</span>  </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>eq_ref 用于联表查询的情况，按联表的主键或唯一键联合查询。</li></ul><p>多表join时，对于来自前面表的每一行，在当前表中只能找到一行。这可能是除了system和const之外最好的类型。当主键或唯一非NULL索引的所有字段都被用作join联接时会使用此类型。</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line"><span class="token keyword">EXPLAIN</span></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">AS</span> S <span class="token keyword">JOIN</span> stu_course <span class="token keyword">AS</span> SC <span class="token keyword">ON</span>  S<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span> <span class="token operator">=</span> SC<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>cid<span class="token punctuation">\`</span></span></span>
<span class="line">    id  select_type  <span class="token keyword">table</span>   partitions  <span class="token keyword">type</span>    possible_keys  <span class="token keyword">key</span>     </span>
<span class="line"><span class="token comment">------  -----------  ------  ----------  ------  -------------  -------  </span></span>
<span class="line">     <span class="token number">1</span>  <span class="token keyword">SIMPLE</span>       SC      <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">)</span>      <span class="token keyword">index</span>   <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">)</span>         <span class="token keyword">PRIMARY</span>  </span>
<span class="line">     <span class="token number">1</span>  <span class="token keyword">SIMPLE</span>       S       <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">)</span>      eq_ref  <span class="token keyword">PRIMARY</span>        <span class="token keyword">PRIMARY</span> </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上面查询为例，我们观察id和table会知道，先是从SC表中取出一行数据，然后再S表查找匹配的数据，我们观察，SC中取出cid和S表中的id比较，毫无疑问因为id是S表中的主键（不重复），所以只能出现一个id与cid的值相同。所以！满足条件 S 表的 type为eq_ref。</p><p>ref 可以用于单表扫描或者连接。如果是连接的话，驱动表的一条记录能够在被驱动表中通过非唯一（主键）属性所在索引中匹配多行数据，或者是在单表查询的时候通过非唯一（主键）属性所在索引中查到一行数据。</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line"><span class="token keyword">EXPLAIN</span> </span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">AS</span> S <span class="token keyword">JOIN</span> stu_course <span class="token keyword">AS</span> SC <span class="token keyword">ON</span> S<span class="token punctuation">.</span>id <span class="token operator">=</span> SC<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>sid<span class="token punctuation">\`</span></span></span>
<span class="line">不要在意<span class="token keyword">SQL</span>，以上<span class="token keyword">SQL</span>没有实际查询的意义只是用于表达用例</span>
<span class="line"></span>
<span class="line">    id  select_type  <span class="token keyword">table</span>   partitions  <span class="token keyword">type</span>    possible_keys  <span class="token keyword">key</span>      </span>
<span class="line"><span class="token comment">------  -----------  ------  ----------  ------  -------------  -------  </span></span>
<span class="line">     <span class="token number">1</span>  <span class="token keyword">SIMPLE</span>       S       <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">)</span>      <span class="token keyword">ALL</span>     <span class="token keyword">PRIMARY</span>        <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">)</span>   </span>
<span class="line">     <span class="token number">1</span>  <span class="token keyword">SIMPLE</span>       SC      <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">)</span>      ref     <span class="token keyword">PRIMARY</span>        <span class="token keyword">PRIMARY</span>  </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>SC的主键索引是（cid,sid）所以sid列中肯定是重复的数据，虽然在后面的key中显示使用了主键索引。然后，就很明确了S.id一行能在SC表中通过索引查询到多行数据。</p><p>下面是单表了，写一个例子，但是不细讲了</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line"><span class="token keyword">EXPLAIN</span></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">AS</span> S <span class="token keyword">WHERE</span> S<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token operator">=</span> <span class="token string">&quot;张飞&quot;</span></span>
<span class="line">    id  select_type  <span class="token keyword">table</span>   partitions  <span class="token keyword">type</span>    possible_keys  <span class="token keyword">key</span>        </span>
<span class="line"><span class="token comment">------  -----------  ------  ----------  ------  -------------  ---------- </span></span>
<span class="line">     <span class="token number">1</span>  <span class="token keyword">SIMPLE</span>       S       <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">)</span>      ref     index_name     index_name</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意name字段是有索引的哈！！！</p><p>ref_or_null 类似ref，但是可以搜索值为NULL的行</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line"><span class="token keyword">EXPLAIN</span></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">AS</span> S <span class="token keyword">WHERE</span> S<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token operator">=</span> <span class="token string">&quot;张飞&quot;</span> <span class="token operator">OR</span> S<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token operator">IS</span> <span class="token boolean">NULL</span></span>
<span class="line">    id  select_type  <span class="token keyword">table</span>   partitions  <span class="token keyword">type</span>         possible_keys  <span class="token keyword">key</span>        </span>
<span class="line"><span class="token comment">------  -----------  ------  ----------  -----------  -------------  ----------  </span></span>
<span class="line">     <span class="token number">1</span>  <span class="token keyword">SIMPLE</span>       S       <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">)</span>      ref_or_null  index_name     index_name  </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>index_merge 表示查询使用了两个以上的索引，最后取交集或者并集，常见and ，or的条件使用了不同的索引，官方排序这个在ref_or_null之后，但是实际上由于要读取多个索引，性能可能大部分时间都不如range。</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line"><span class="token keyword">EXPLAIN</span></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">AS</span> S <span class="token keyword">WHERE</span> S<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token operator">LIKE</span> <span class="token string">&quot;张%&quot;</span> <span class="token operator">OR</span> S<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>age<span class="token punctuation">\`</span></span> <span class="token operator">=</span> <span class="token number">30</span></span>
<span class="line">    id  select_type  <span class="token keyword">table</span>   partitions  <span class="token keyword">type</span>         possible_keys         <span class="token keyword">key</span>                   </span>
<span class="line"><span class="token comment">------  -----------  ------  ----------  -----------  --------------------  -------------------- </span></span>
<span class="line">     <span class="token number">1</span>  <span class="token keyword">SIMPLE</span>       S       <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">)</span>      index_merge  index_name<span class="token punctuation">,</span>index_age  index_name<span class="token punctuation">,</span>index_age </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>range 索引范围查询，常见于使用 =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, IS NULL, &lt;=&gt;, BETWEEN, IN()或者like等运算符的查询中。</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line"><span class="token keyword">EXPLAIN</span></span>
<span class="line"><span class="token keyword">SELECT</span> S<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>age<span class="token punctuation">\`</span></span> <span class="token keyword">FROM</span> student  <span class="token keyword">AS</span> S <span class="token keyword">WHERE</span> S<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>age<span class="token punctuation">\`</span></span> <span class="token operator">&gt;</span> <span class="token number">30</span></span>
<span class="line">    id  select_type  <span class="token keyword">table</span>   partitions  <span class="token keyword">type</span>    possible_keys         <span class="token keyword">key</span>         </span>
<span class="line"><span class="token comment">------  -----------  ------  ----------  ------  --------------------  ----------  </span></span>
<span class="line">     <span class="token number">1</span>  <span class="token keyword">SIMPLE</span>       S       <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">)</span>      range   index_name<span class="token punctuation">,</span>index_age  index_name  </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>index index只遍历索引树，通常比All快。因为，索引文件通常比数据文件小，也就是虽然all和index都是读全表，但index是从索引中读取的，而all是从硬盘读的。</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line"><span class="token keyword">EXPLAIN</span></span>
<span class="line"><span class="token keyword">SELECT</span> S<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token keyword">FROM</span> student <span class="token keyword">AS</span> S </span>
<span class="line">    id  select_type  <span class="token keyword">table</span>   partitions  <span class="token keyword">type</span>    possible_keys  <span class="token keyword">key</span>         </span>
<span class="line"><span class="token comment">------  -----------  ------  ----------  ------  -------------  ----------  </span></span>
<span class="line">     <span class="token number">1</span>  <span class="token keyword">SIMPLE</span>       S       <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">)</span>      <span class="token keyword">index</span>   <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">)</span>         index_name  </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ALL 如果一个查询的type是All,并且表的数据量很大，那么请解决它！！！ possible_keys字段 这个表里面存在且可能会被使用的索引，可能会在这个字段下面出现，但是一般都以key为准。</p><p>key字段 实际使用的索引，如果为null,则没有使用索引，否则会显示你使用了哪些索引，查询中若使用了覆盖索引（查询的列刚好是索引），则该索引仅出现在key列表。</p><p>ref字段 显示哪些列被使用了，如果可能的话，最好是一个常数。哪些列或常量被用于查找索引列上的值。</p><p>rows字段和Filter字段 rows是根据表的统计信息和索引的选用情况，优化器大概帮你估算出你执行这行函数所需要查询的行数。</p><p>Filter是查询的行数与总行数的比值。其实作用与rows差不多，都是数值越小，效率越高。</p><p>Extra字段 这一字段包含不适合在其他列显示，但是也非常重要的额外信息。</p><p>Using filesort 表示当SQL中有一个地方需要对一些数据进行排序的时候，优化器找不到能够使用的索引，所以只能使用外部的索引排序，外部排序就不断的在磁盘和内存中交换数据，这样就摆脱不了很多次磁盘IO，以至于SQL执行的效率很低。反之呢？由于索引的底层是B+Tree实现的，他的叶子节点本来就是有序的，这样的查询能不爽吗？</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line"><span class="token keyword">EXPLAIN</span></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> course <span class="token keyword">AS</span> C <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> C<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> </span>
<span class="line"> <span class="token keyword">type</span>    possible_keys  <span class="token keyword">key</span>     key_len  ref       <span class="token keyword">rows</span>  filtered  Extra           </span>
<span class="line"> <span class="token comment">------  -------------  ------  -------  ------  ------  --------  ----------------</span></span>
<span class="line"> <span class="token keyword">ALL</span>     <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">)</span>         <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">)</span>   <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">)</span>      <span class="token number">20</span>    <span class="token number">100.00</span>  <span class="token keyword">Using</span> filesort  </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>没有给C.name建立索引，所以在根据C.name排序的时候，他就使用了外部排序</p><p>Using tempporary 表示在对MySQL查询结果进行排序时，使用了临时表,,这样的查询效率是比外部排序更低的，常见于order by和group by。</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line"><span class="token keyword">EXPLAIN</span></span>
<span class="line"><span class="token keyword">SELECT</span> C<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token keyword">FROM</span> course <span class="token keyword">AS</span> C <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> C<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span></span>
<span class="line">possible_keys  <span class="token keyword">key</span>     key_len  ref       <span class="token keyword">rows</span>  filtered  Extra                            </span>
<span class="line"><span class="token comment">-------------  ------  -------  ------  ------  --------  ---------------------------------</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">)</span>         <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">)</span>   <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">)</span>      <span class="token number">20</span>    <span class="token number">100.00</span>  <span class="token keyword">Using</span> <span class="token keyword">temporary</span><span class="token punctuation">;</span> <span class="token keyword">Using</span> filesort</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面这个查询就是同时触发了Using temporary和Using filesort，可谓是雪上加霜。</p><p>Using index 表示使用了索引，很优秀👍。 Using where 使用了where但是好像没啥用。 Using join buffer 表明使用了连接缓存,比如说在查询的时候，多表join的次数非常多，那么将配置文件中的缓冲区的join buffer调大一些。 impossible where 筛选条件没能筛选出任何东西 distinct 优化distinct操作，在找到第一匹配的元组后即停止找同样值的动作</p>`,92)]))}const i=s(t,[["render",o]]),u=JSON.parse('{"path":"/guide/mysql/mysql-explained.html","title":"MySQL Explained","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"什么是explain","slug":"什么是explain","link":"#什么是explain","children":[]},{"level":2,"title":"如何使用explain","slug":"如何使用explain","link":"#如何使用explain","children":[]},{"level":2,"title":"explain各个字段代表的意思","slug":"explain各个字段代表的意思","link":"#explain各个字段代表的意思","children":[{"level":3,"title":"id与table字段","slug":"id与table字段","link":"#id与table字段","children":[]},{"level":3,"title":"select_type字段","slug":"select-type字段","link":"#select-type字段","children":[]}]}],"git":{"updatedTime":1753237474000,"contributors":[{"name":"alice","username":"alice","email":"921757697@qq.com","commits":3,"url":"https://github.com/alice"}],"changelog":[{"hash":"245816fee7920b84913505a4353b6b4f934da7c0","time":1753237474000,"email":"921757697@qq.com","author":"alice","message":"uniapp 组件"},{"hash":"5ab09e6e2b722a11620cdfb7761866fc10068022","time":1753236131000,"email":"921757697@qq.com","author":"alice","message":"deploy uniapp 组件"},{"hash":"1aa8f9ae6eff191a92c0a6ec3f2bbc615028e97c","time":1746957383000,"email":"921757697@qq.com","author":"alice","message":"deploy mysql 手绘图"}]},"filePathRelative":"guide/mysql/mysql-explained.md"}');export{i as comp,u as data};
