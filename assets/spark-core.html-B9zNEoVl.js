import{_ as s,c as a,e as p,o as t}from"./app-DQJzW1CO.js";const e={};function o(l,n){return t(),a("div",null,n[0]||(n[0]=[p(`<h1 id="spark-core" tabindex="-1"><a class="header-anchor" href="#spark-core"><span>Spark Core</span></a></h1><p>三大数据结构</p><ul><li>RDD: 弹性分布式数据集</li><li>累加器: 分布式共享只写变量</li><li>广播变量: 分布式共享只读变量</li></ul><h2 id="rdd" tabindex="-1"><a class="header-anchor" href="#rdd"><span>RDD</span></a></h2><p>​ RDD（Resilient Distributed Dataset）叫做弹性分布式数据集，是 Spark 中最基本的数据处理模型。代码中是一个抽象类，它代表一个弹性的、不可变、可分区、里面的元素可并行计算的集合。</p><p>弹性</p><ul><li><p>存储的弹性：内存与磁盘的自动切换；</p></li><li><p>容错的弹性：数据丢失可以自动恢复；</p></li><li><p>计算的弹性：计算出错重试机制；</p></li><li><p>分片的弹性：可根据需要重新分片。</p></li><li><p>分布式：数据存储在大数据集群不同节点上</p></li><li><p>数据集：RDD 封装了计算逻辑，并不保存数据</p></li><li><p>数据抽象：RDD 是一个抽象类，需要子类具体实现</p></li><li><p>不可变：RDD 封装了计算逻辑，是不可以改变的，想要改变，只能产生新的 RDD，在新的 RDD 里面封装计算逻辑</p></li><li><p>可分区、并行计算</p></li></ul><h3 id="执行原理" tabindex="-1"><a class="header-anchor" href="#执行原理"><span>执行原理</span></a></h3><p>​ 从计算的角度来讲，数据处理过程中需要计算资源（内存 &amp; CPU）和计算模型（逻辑）。执行时，需要将计算资源和计算模型进行协调和整合。Spark 框架在执行时，先申请资源，然后将应用程序的数据处理逻辑分解成一个一个的计算任务。然后将任务发到已经分配资源的计算节点上, 按照指定的计算模型进行数据计算。最后得到计算结果。</p><p>RDD 是 Spark 框架中用于数据处理的核心模型，接下来我们看看，在 Yarn 环境中，RDD的工作原理:</p><ol><li>启动 Yarn 集群环境</li><li>Spark 通过申请资源创建调度节点和计算节点</li><li>Spark 框架根据需求将计算逻辑根据分区划分成不同的任务</li><li>调度节点将任务根据计算节点状态发送到对应的计算节点进行计算</li></ol><p>从以上流程可以看出 RDD 在整个流程中主要用于将逻辑进行封装，并生成 Task 发送给Executor 节点执行计算，接下来我们就一起看看 Spark 框架中 RDD 是具体是如何进行数据处理的。</p><h3 id="基础编程" tabindex="-1"><a class="header-anchor" href="#基础编程"><span>基础编程</span></a></h3><ol><li>创建 RDD</li></ol><p>从集合（内存）中创建 RDD</p><div class="language-scala line-numbers-mode" data-highlighter="prismjs" data-ext="scala"><pre><code><span class="line"><span class="token keyword">val</span> sparkConf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setMaster<span class="token punctuation">(</span><span class="token string">&quot;local[]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span><span class="token string">&quot;spark&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">val</span> sparkContext <span class="token operator">=</span> <span class="token keyword">new</span> SparkContext<span class="token punctuation">(</span>sparkConf<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">val</span> rdd1 <span class="token operator">=</span> sparkContext<span class="token punctuation">.</span>parallelize<span class="token punctuation">(</span> List<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">val</span> rdd2 <span class="token operator">=</span> sparkContext<span class="token punctuation">.</span>makeRDD<span class="token punctuation">(</span> List<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">rdd1<span class="token punctuation">.</span>collect<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span></span>
<span class="line">rdd2<span class="token punctuation">.</span>collect<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span></span>
<span class="line">sparkContext<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span> </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从底层代码实现来讲，makeRDD 方法其实就是 parallelize 方法</p><div class="language-scala line-numbers-mode" data-highlighter="prismjs" data-ext="scala"><pre><code><span class="line"><span class="token keyword">def</span> makeRDD<span class="token punctuation">[</span>T<span class="token operator">:</span> ClassTag<span class="token punctuation">]</span><span class="token punctuation">(</span> seq<span class="token operator">:</span> Seq<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">,</span> numSlices<span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> defaultParallelism<span class="token punctuation">)</span><span class="token operator">:</span> RDD<span class="token punctuation">[</span>T<span class="token punctuation">]</span> <span class="token operator">=</span> withScope <span class="token punctuation">{</span></span>
<span class="line">    parallelize<span class="token punctuation">(</span>seq<span class="token punctuation">,</span> numSlices<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>从外部存储（文件）创建 RDD 由外部存储系统的数据集创建 RDD 包括：本地的文件系统，所有 Hadoop 支持的数据集，比如 HDFS、HBase 等。</li></ol><div class="language-scala line-numbers-mode" data-highlighter="prismjs" data-ext="scala"><pre><code><span class="line"><span class="token keyword">val</span> sparkConf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setMaster<span class="token punctuation">(</span><span class="token string">&quot;local[]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span><span class="token string">&quot;spark&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">val</span> sparkContext <span class="token operator">=</span> <span class="token keyword">new</span> SparkContext<span class="token punctuation">(</span>sparkConf<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">val</span> rdd <span class="token operator">=</span> sparkContext<span class="token punctuation">.</span>textFile<span class="token punctuation">(</span><span class="token string">&quot;file:///path/to/file&quot;</span><span class="token punctuation">)</span></span>
<span class="line">rdd<span class="token punctuation">.</span>collect<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span></span>
<span class="line">sparkContext<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span> </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>从其他 RDD 创建 主要是通过一个 RDD 运算完后，再产生新的 RDD。详情请参考后续章节</li><li>直接创建 RDD（new） 使用 new 的方式直接构造 RDD，一般由 Spark 框架自身使用。</li></ol><h3 id="rdd-并行度与分区" tabindex="-1"><a class="header-anchor" href="#rdd-并行度与分区"><span>RDD 并行度与分区</span></a></h3><p>默认情况下，Spark 可以将一个作业切分多个任务后，发送给 Executor 节点并行计算，而能够并行计算的任务数量我们称之为并行度。这个数量可以在构建 RDD 时指定。记住，这里的并行执行的任务数量，并不是指的切分任务的数量，不要混淆了。</p><div class="language-scala line-numbers-mode" data-highlighter="prismjs" data-ext="scala"><pre><code><span class="line"><span class="token keyword">val</span> sparkConf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setMaster<span class="token punctuation">(</span><span class="token string">&quot;local[]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span><span class="token string">&quot;spark&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">val</span> sparkContext <span class="token operator">=</span> <span class="token keyword">new</span> SparkContext<span class="token punctuation">(</span>sparkConf<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">val</span> dataRDD<span class="token operator">:</span> RDD<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span> <span class="token operator">=</span> sparkContext<span class="token punctuation">.</span>makeRDD<span class="token punctuation">(</span> List<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">val</span> fileRDD<span class="token operator">:</span> RDD<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span> <span class="token operator">=</span> sparkContext<span class="token punctuation">.</span>textFile<span class="token punctuation">(</span> <span class="token string">&quot;input&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line">fileRDD<span class="token punctuation">.</span>collect<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span></span>
<span class="line">sparkContext<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>读取内存数据时，数据可以按照并行度的设定进行数据的分区操作，数据分区规则的 Spark 核心源码如下：</p><div class="language-scala line-numbers-mode" data-highlighter="prismjs" data-ext="scala"><pre><code><span class="line"><span class="token keyword">def</span> positions<span class="token punctuation">(</span>length<span class="token operator">:</span> <span class="token builtin">Long</span><span class="token punctuation">,</span> numSlices<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">:</span> Iterator<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">(</span><span class="token number">0</span> until numSlices<span class="token punctuation">)</span><span class="token punctuation">.</span>iterator<span class="token punctuation">.</span>map <span class="token punctuation">{</span> i <span class="token keyword">=&gt;</span></span>
<span class="line">        <span class="token keyword">val</span> start <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i  length<span class="token punctuation">)</span> <span class="token operator">/</span> numSlices<span class="token punctuation">)</span><span class="token punctuation">.</span>toInt</span>
<span class="line">        <span class="token keyword">val</span> end <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>  length<span class="token punctuation">)</span> <span class="token operator">/</span> numSlices<span class="token punctuation">)</span><span class="token punctuation">.</span>toInt</span>
<span class="line">        <span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span> </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>读取文件数据时，数据是按照 Hadoop 文件读取的规则进行切片分区，而切片规则和数据读取的规则有些差异，具体 Spark 核心源码如下</p><div class="language-scala line-numbers-mode" data-highlighter="prismjs" data-ext="scala"><pre><code><span class="line">public InputSplit<span class="token punctuation">[</span><span class="token punctuation">]</span> getSplits<span class="token punctuation">(</span>JobConf job<span class="token punctuation">,</span> int numSplits<span class="token punctuation">)</span> throws IOException <span class="token punctuation">{</span></span>
<span class="line">    long totalSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// compute total size</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>FileStatus file<span class="token operator">:</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// check we have valid files</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span>isDirectory<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">throw</span> <span class="token keyword">new</span> IOException<span class="token punctuation">(</span><span class="token string">&quot;Not a file: &quot;</span><span class="token operator">+</span> file<span class="token punctuation">.</span>getPath<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        totalSize <span class="token operator">+=</span> file<span class="token punctuation">.</span>getLen<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    long goalSize <span class="token operator">=</span> totalSize <span class="token operator">/</span> <span class="token punctuation">(</span>numSplits <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> numSplits<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    long minSize <span class="token operator">=</span> Math<span class="token punctuation">.</span>max<span class="token punctuation">(</span>job<span class="token punctuation">.</span>getLong<span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>lib<span class="token punctuation">.</span>input<span class="token punctuation">.</span> FileInputFormat<span class="token punctuation">.</span>SPLIT_MINSIZE<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> minSplitSize<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>FileStatus file<span class="token operator">:</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>isSplitable<span class="token punctuation">(</span>fs<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            long blockSize <span class="token operator">=</span> file<span class="token punctuation">.</span>getBlockSize<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            long splitSize <span class="token operator">=</span> computeSplitSize<span class="token punctuation">(</span>goalSize<span class="token punctuation">,</span> minSize<span class="token punctuation">,</span> blockSize<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">protected</span> long computeSplitSize<span class="token punctuation">(</span>long goalSize<span class="token punctuation">,</span> long minSize<span class="token punctuation">,</span>long blockSize<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> Math<span class="token punctuation">.</span>max<span class="token punctuation">(</span>minSize<span class="token punctuation">,</span> Math<span class="token punctuation">.</span>min<span class="token punctuation">(</span>goalSize<span class="token punctuation">,</span> blockSize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="rdd-转换算子" tabindex="-1"><a class="header-anchor" href="#rdd-转换算子"><span>RDD 转换算子</span></a></h3><p>RDD 根据数据处理方式的不同将算子整体上分为 Value 类型、双 Value 类型和 Key-Value类型</p><ol><li>Value 类型</li></ol><ul><li>map：对每个元素进行转换操作，返回一个新的元素</li><li>flatMap：对每个元素进行转换操作，返回多个元素</li></ul><h3 id="rdd-序列化" tabindex="-1"><a class="header-anchor" href="#rdd-序列化"><span>RDD 序列化</span></a></h3><ol><li>闭包检查</li></ol><p>​ 从计算的角度, 算子以外的代码都是在 Driver 端执行, 算子里面的代码都是在 Executor端执行。那么在 scala 的函数式编程中，就会导致算子内经常会用到算子外的数据，这样就形成了闭包的效果，如果使用的算子外的数据无法序列化，就意味着无法传值给Executor端执行，就会发生错误，所以需要在执行任务计算前，检测闭包内的对象是否可以进行序列化，这个操作我们称之为闭包检测。Scala2.12 版本后闭包编译方式发生了改变</p><ol start="2"><li>序列化方法和属性</li></ol><p>从计算的角度, 算子以外的代码都是在 Driver 端执行, 算子里面的代码都是在 Executor端执行，看如下代码:</p><div class="language-scala line-numbers-mode" data-highlighter="prismjs" data-ext="scala"><pre><code><span class="line"><span class="token keyword">object</span> serializable02_function <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//1.创建 SparkConf 并设置 App 名称</span></span>
<span class="line">        <span class="token keyword">val</span> conf<span class="token operator">:</span> SparkConf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span><span class="token string">&quot;SparkCoreTest&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setMaster<span class="token punctuation">(</span><span class="token string">&quot;local[]&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">//2.创建 SparkContext，该对象是提交 Spark App 的入口</span></span>
<span class="line">        <span class="token keyword">val</span> sc<span class="token operator">:</span> SparkContext <span class="token operator">=</span> <span class="token keyword">new</span> SparkContext<span class="token punctuation">(</span>conf<span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">//3.创建一个 RDD</span></span>
<span class="line">        <span class="token keyword">val</span> rdd<span class="token operator">:</span> RDD<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span> <span class="token operator">=</span> sc<span class="token punctuation">.</span>makeRDD<span class="token punctuation">(</span>Array<span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;hello spark&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;hive&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;atguigu&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">//3.1 创建一个 Search 对象</span></span>
<span class="line">        <span class="token keyword">val</span> search <span class="token operator">=</span> <span class="token keyword">new</span> Search<span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">//3.2 函数传递，打印：ERROR Task not serializable</span></span>
<span class="line">        search<span class="token punctuation">.</span>getMatch1<span class="token punctuation">(</span>rdd<span class="token punctuation">)</span><span class="token punctuation">.</span>collect<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">//3.3 属性传递，打印：ERROR Task not serializable</span></span>
<span class="line">        search<span class="token punctuation">.</span>getMatch2<span class="token punctuation">(</span>rdd<span class="token punctuation">)</span><span class="token punctuation">.</span>collect<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">//4.关闭连接</span></span>
<span class="line">        sc<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span> </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> Search<span class="token punctuation">(</span>query<span class="token operator">:</span><span class="token builtin">String</span><span class="token punctuation">)</span> <span class="token keyword">extends</span> Serializable <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">def</span> isMatch<span class="token punctuation">(</span>s<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Boolean</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">        s<span class="token punctuation">.</span>contains<span class="token punctuation">(</span>query<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 函数序列化案例</span></span>
<span class="line">    <span class="token keyword">def</span> getMatch1 <span class="token punctuation">(</span>rdd<span class="token operator">:</span> RDD<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> RDD<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//rdd.filter(this.isMatch)</span></span>
<span class="line">        rdd<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>isMatch<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span> </span>
<span class="line">    <span class="token comment">// 属性序列化案例</span></span>
<span class="line">    <span class="token keyword">def</span> getMatch2<span class="token punctuation">(</span>rdd<span class="token operator">:</span> RDD<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> RDD<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//rdd.filter(x =&gt; x.contains(this.query))</span></span>
<span class="line">        rdd<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>x <span class="token keyword">=&gt;</span> x<span class="token punctuation">.</span>contains<span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">//val q = query</span></span>
<span class="line">        <span class="token comment">//rdd.filter(x =&gt; x.contains(q))</span></span>
<span class="line">    <span class="token punctuation">}</span> </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>Kryo 序列化框架</li></ol><p>参考地址: https://github.com/EsotericSoftware/kryo</p><p>​ Java 的序列化能够序列化任何的类。但是比较重（字节多），序列化后，对象的提交也比较大。Spark 出于性能的考虑，Spark2.0 开始支持另外一种 Kryo 序列化机制。Kryo 速度是 Serializable 的 10 倍。当 RDD 在 Shuffle 数据的时候，简单数据类型、数组和字符串类型已经在 Spark 内部使用 Kryo 来序列化。</p><p>注意：即使使用 Kryo 序列化，也要继承 Serializable 接口。</p><div class="language-scala line-numbers-mode" data-highlighter="prismjs" data-ext="scala"><pre><code><span class="line"><span class="token keyword">object</span> serializable_Kryo <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">val</span> conf<span class="token operator">:</span> SparkConf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span><span class="token string">&quot;SerDemo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setMaster<span class="token punctuation">(</span><span class="token string">&quot;local[]&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 替换默认的序列化机制</span></span>
<span class="line">        <span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token string">&quot;spark.serializer&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;org.apache.spark.serializer.KryoSerializer&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 注册需要使用 kryo 序列化的自定义类</span></span>
<span class="line">        <span class="token punctuation">.</span>registerKryoClasses<span class="token punctuation">(</span>Array<span class="token punctuation">(</span>classOf<span class="token punctuation">[</span>Searcher<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">val</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> SparkContext<span class="token punctuation">(</span>conf<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">val</span> rdd<span class="token operator">:</span> RDD<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span> <span class="token operator">=</span> sc<span class="token punctuation">.</span>makeRDD<span class="token punctuation">(</span>Array<span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;hello atguigu&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;atguigu&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;hahah&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">val</span> searcher <span class="token operator">=</span> <span class="token keyword">new</span> Searcher<span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">val</span> result<span class="token operator">:</span> RDD<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span> <span class="token operator">=</span> searcher<span class="token punctuation">.</span>getMatchedRDD1<span class="token punctuation">(</span>rdd<span class="token punctuation">)</span></span>
<span class="line">        result<span class="token punctuation">.</span>collect<span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span> </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">case</span> <span class="token keyword">class</span> Searcher<span class="token punctuation">(</span><span class="token keyword">val</span> query<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">def</span> isMatch<span class="token punctuation">(</span>s<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">        s<span class="token punctuation">.</span>contains<span class="token punctuation">(</span>query<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">def</span> getMatchedRDD1<span class="token punctuation">(</span>rdd<span class="token operator">:</span> RDD<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">        rdd<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>isMatch<span class="token punctuation">)</span> </span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">def</span> getMatchedRDD2<span class="token punctuation">(</span>rdd<span class="token operator">:</span> RDD<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">val</span> q <span class="token operator">=</span> query</span>
<span class="line">        rdd<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>_<span class="token punctuation">.</span>contains<span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span> </span>
<span class="line"><span class="token punctuation">}</span> </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="rdd-依赖关系" tabindex="-1"><a class="header-anchor" href="#rdd-依赖关系"><span>RDD 依赖关系</span></a></h3><ol><li>RDD 血缘关系</li></ol><p>RDD 只支持粗粒度转换，即在大量记录上执行的单个操作。将创建 RDD 的一系列 Lineage（血统）记录下来，以便恢复丢失的分区。RDD 的 Lineage 会记录 RDD 的元数据信息和转换行为，当该 RDD 的部分分区数据丢失时，它可以根据这些信息来重新运算和恢复丢失的数据分区。</p><div class="language-scala line-numbers-mode" data-highlighter="prismjs" data-ext="scala"><pre><code><span class="line"><span class="token keyword">val</span> fileRDD<span class="token operator">:</span> RDD<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span> <span class="token operator">=</span> sc<span class="token punctuation">.</span>textFile<span class="token punctuation">(</span><span class="token string">&quot;input/1.txt&quot;</span><span class="token punctuation">)</span></span>
<span class="line">println<span class="token punctuation">(</span>fileRDD<span class="token punctuation">.</span>toDebugString<span class="token punctuation">)</span></span>
<span class="line">println<span class="token punctuation">(</span><span class="token string">&quot;----------------------&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">val</span> wordRDD<span class="token operator">:</span> RDD<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span> <span class="token operator">=</span> fileRDD<span class="token punctuation">.</span>flatMap<span class="token punctuation">(</span>_<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">println<span class="token punctuation">(</span>wordRDD<span class="token punctuation">.</span>toDebugString<span class="token punctuation">)</span></span>
<span class="line">println<span class="token punctuation">(</span><span class="token string">&quot;----------------------&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">val</span> mapRDD<span class="token operator">:</span> RDD<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> wordRDD<span class="token punctuation">.</span>map<span class="token punctuation">(</span><span class="token punctuation">(</span>_<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">println<span class="token punctuation">(</span>mapRDD<span class="token punctuation">.</span>toDebugString<span class="token punctuation">)</span></span>
<span class="line">println<span class="token punctuation">(</span><span class="token string">&quot;----------------------&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">val</span> resultRDD<span class="token operator">:</span> RDD<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> mapRDD<span class="token punctuation">.</span>reduceByKey<span class="token punctuation">(</span>_<span class="token operator">+</span>_<span class="token punctuation">)</span></span>
<span class="line">println<span class="token punctuation">(</span>resultRDD<span class="token punctuation">.</span>toDebugString<span class="token punctuation">)</span></span>
<span class="line">resultRDD<span class="token punctuation">.</span>collect<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>RDD 依赖关系</li></ol><p>这里所谓的依赖关系，其实就是两个相邻 RDD 之间的关系</p><div class="language-scala line-numbers-mode" data-highlighter="prismjs" data-ext="scala"><pre><code><span class="line"><span class="token keyword">val</span> sc<span class="token operator">:</span> SparkContext <span class="token operator">=</span> <span class="token keyword">new</span> SparkContext<span class="token punctuation">(</span>conf<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">val</span> fileRDD<span class="token operator">:</span> RDD<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span> <span class="token operator">=</span> sc<span class="token punctuation">.</span>textFile<span class="token punctuation">(</span><span class="token string">&quot;input/1.txt&quot;</span><span class="token punctuation">)</span></span>
<span class="line">println<span class="token punctuation">(</span>fileRDD<span class="token punctuation">.</span>dependencies<span class="token punctuation">)</span></span>
<span class="line">println<span class="token punctuation">(</span><span class="token string">&quot;----------------------&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">val</span> wordRDD<span class="token operator">:</span> RDD<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span> <span class="token operator">=</span> fileRDD<span class="token punctuation">.</span>flatMap<span class="token punctuation">(</span>_<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">println<span class="token punctuation">(</span>wordRDD<span class="token punctuation">.</span>dependencies<span class="token punctuation">)</span></span>
<span class="line">println<span class="token punctuation">(</span><span class="token string">&quot;----------------------&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">val</span> mapRDD<span class="token operator">:</span> RDD<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> wordRDD<span class="token punctuation">.</span>map<span class="token punctuation">(</span><span class="token punctuation">(</span>_<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">println<span class="token punctuation">(</span>mapRDD<span class="token punctuation">.</span>dependencies<span class="token punctuation">)</span></span>
<span class="line">println<span class="token punctuation">(</span><span class="token string">&quot;----------------------&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">val</span> resultRDD<span class="token operator">:</span> RDD<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> mapRDD<span class="token punctuation">.</span>reduceByKey<span class="token punctuation">(</span>_<span class="token operator">+</span>_<span class="token punctuation">)</span></span>
<span class="line">println<span class="token punctuation">(</span>resultRDD<span class="token punctuation">.</span>dependencies<span class="token punctuation">)</span></span>
<span class="line">resultRDD<span class="token punctuation">.</span>collect<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>RDD 窄依赖</li></ol><p>窄依赖表示每一个父(上游)RDD 的 Partition 最多被子（下游）RDD 的一个 Partition 使用，窄依赖我们形象的比喻为独生子女。</p><p><code>class OneToOneDependency[T](rdd: RDD[T]) extends NarrowDependency[T](rdd)</code></p><ol start="4"><li>RDD 宽依赖</li></ol><p>宽依赖表示同一个父（上游）RDD 的 Partition 被多个子（下游）RDD 的 Partition 依赖，会引起 Shuffle，总结：宽依赖我们形象的比喻为多生。</p><div class="language-scala line-numbers-mode" data-highlighter="prismjs" data-ext="scala"><pre><code><span class="line"><span class="token keyword">class</span> ShuffleDependency<span class="token punctuation">[</span>K<span class="token operator">:</span> ClassTag<span class="token punctuation">,</span> V<span class="token operator">:</span> ClassTag<span class="token punctuation">,</span> C<span class="token operator">:</span> ClassTag<span class="token punctuation">]</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token annotation punctuation">@transient</span> <span class="token keyword">private</span> <span class="token keyword">val</span> _rdd<span class="token operator">:</span> RDD<span class="token punctuation">[</span>_ <span class="token operator">&lt;</span><span class="token operator">:</span> Product2<span class="token punctuation">[</span>K<span class="token punctuation">,</span> V<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">val</span> partitioner<span class="token operator">:</span> Partitioner<span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">val</span> serializer<span class="token operator">:</span> Serializer <span class="token operator">=</span> SparkEnv<span class="token punctuation">.</span>get<span class="token punctuation">.</span>serializer<span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">val</span> keyOrdering<span class="token operator">:</span> Option<span class="token punctuation">[</span>Ordering<span class="token punctuation">[</span>K<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> None<span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">val</span> aggregator<span class="token operator">:</span> Option<span class="token punctuation">[</span>Aggregator<span class="token punctuation">[</span>K<span class="token punctuation">,</span> V<span class="token punctuation">,</span> C<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> None<span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">val</span> mapSideCombine<span class="token operator">:</span> <span class="token builtin">Boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">extends</span> Dependency<span class="token punctuation">[</span>Product2<span class="token punctuation">[</span>K<span class="token punctuation">,</span> V<span class="token punctuation">]</span><span class="token punctuation">]</span> </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>RDD 阶段划分</li></ol><p>DAG（Directed Acyclic Graph）有向无环图是由点和线组成的拓扑图形，该图形具有方向，不会闭环。例如，DAG 记录了 RDD 的转换过程和任务的阶段。</p><ol start="6"><li>RDD 阶段划分源码</li></ol><div class="language-scala line-numbers-mode" data-highlighter="prismjs" data-ext="scala"><pre><code><span class="line"><span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// New stage creation may throw an exception if, for example, jobs are run on a</span></span>
<span class="line">    <span class="token comment">// HadoopRDD whose underlying HDFS files have been deleted.</span></span>
<span class="line">    finalStage <span class="token operator">=</span> createResultStage<span class="token punctuation">(</span>finalRDD<span class="token punctuation">,</span> func<span class="token punctuation">,</span> partitions<span class="token punctuation">,</span> jobId<span class="token punctuation">,</span> callSite<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> e<span class="token operator">:</span> Exception <span class="token keyword">=&gt;</span></span>
<span class="line">    logWarning<span class="token punctuation">(</span><span class="token string">&quot;Creating new stage failed due to exception - job: &quot;</span> <span class="token operator">+</span> jobId<span class="token punctuation">,</span> e<span class="token punctuation">)</span></span>
<span class="line">    listener<span class="token punctuation">.</span>jobFailed<span class="token punctuation">(</span>e<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">……</span>
<span class="line"><span class="token keyword">private</span> <span class="token keyword">def</span> createResultStage<span class="token punctuation">(</span></span>
<span class="line">    rdd<span class="token operator">:</span> RDD<span class="token punctuation">[</span>_<span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    func<span class="token operator">:</span> <span class="token punctuation">(</span>TaskContext<span class="token punctuation">,</span> Iterator<span class="token punctuation">[</span>_<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">=&gt;</span> _<span class="token punctuation">,</span></span>
<span class="line">    partitions<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    jobId<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span>callSite<span class="token operator">:</span> CallSite<span class="token punctuation">)</span><span class="token operator">:</span> ResultStage <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">val</span> parents <span class="token operator">=</span> getOrCreateParentStages<span class="token punctuation">(</span>rdd<span class="token punctuation">,</span> jobId<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">val</span> id <span class="token operator">=</span> nextStageId<span class="token punctuation">.</span>getAndIncrement<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">val</span> stage <span class="token operator">=</span> <span class="token keyword">new</span> ResultStage<span class="token punctuation">(</span>id<span class="token punctuation">,</span> rdd<span class="token punctuation">,</span> func<span class="token punctuation">,</span> partitions<span class="token punctuation">,</span> parents<span class="token punctuation">,</span> jobId<span class="token punctuation">,</span> callSite<span class="token punctuation">)</span></span>
<span class="line">    stageIdToStage<span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token operator">=</span> stage</span>
<span class="line">    updateJobIdStageIdMaps<span class="token punctuation">(</span>jobId<span class="token punctuation">,</span> stage<span class="token punctuation">)</span></span>
<span class="line">    stage</span>
<span class="line"><span class="token punctuation">}</span> </span>
<span class="line">……</span>
<span class="line"><span class="token keyword">private</span> <span class="token keyword">def</span> getOrCreateParentStages<span class="token punctuation">(</span>rdd<span class="token operator">:</span> RDD<span class="token punctuation">[</span>_<span class="token punctuation">]</span><span class="token punctuation">,</span> firstJobId<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">:</span> List<span class="token punctuation">[</span>Stage<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    getShuffleDependencies<span class="token punctuation">(</span>rdd<span class="token punctuation">)</span><span class="token punctuation">.</span>map <span class="token punctuation">{</span> shuffleDep <span class="token keyword">=&gt;</span></span>
<span class="line">        getOrCreateShuffleMapStage<span class="token punctuation">(</span>shuffleDep<span class="token punctuation">,</span> firstJobId<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">.</span>toList</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">……</span>
<span class="line"><span class="token keyword">private</span><span class="token punctuation">[</span>scheduler<span class="token punctuation">]</span> <span class="token keyword">def</span> getShuffleDependencies<span class="token punctuation">(</span>rdd<span class="token operator">:</span> RDD<span class="token punctuation">[</span>_<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> HashSet<span class="token punctuation">[</span>ShuffleDependency<span class="token punctuation">[</span>_<span class="token punctuation">,</span> _<span class="token punctuation">,</span> _<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">val</span> parents <span class="token operator">=</span> <span class="token keyword">new</span> HashSet<span class="token punctuation">[</span>ShuffleDependency<span class="token punctuation">[</span>_<span class="token punctuation">,</span> _<span class="token punctuation">,</span> _<span class="token punctuation">]</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">val</span> visited <span class="token operator">=</span> <span class="token keyword">new</span> HashSet<span class="token punctuation">[</span>RDD<span class="token punctuation">[</span>_<span class="token punctuation">]</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">val</span> waitingForVisit <span class="token operator">=</span> <span class="token keyword">new</span> Stack<span class="token punctuation">[</span>RDD<span class="token punctuation">[</span>_<span class="token punctuation">]</span><span class="token punctuation">]</span></span>
<span class="line">    waitingForVisit<span class="token punctuation">.</span>push<span class="token punctuation">(</span>rdd<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>waitingForVisit<span class="token punctuation">.</span>nonEmpty<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">val</span> toVisit <span class="token operator">=</span> waitingForVisit<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">(</span>toVisit<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            visited <span class="token operator">+=</span> toVisit</span>
<span class="line">            toVisit<span class="token punctuation">.</span>dependencies<span class="token punctuation">.</span>foreach <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">case</span> shuffleDep<span class="token operator">:</span> ShuffleDependency<span class="token punctuation">[</span>_<span class="token punctuation">,</span> _<span class="token punctuation">,</span> _<span class="token punctuation">]</span> <span class="token keyword">=&gt;</span> parents <span class="token operator">+=</span> shuffleDep</span>
<span class="line">                <span class="token keyword">case</span> dependency <span class="token keyword">=&gt;</span> waitingForVisit<span class="token punctuation">.</span>push<span class="token punctuation">(</span>dependency<span class="token punctuation">.</span>rdd<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span> </span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    parents</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="7"><li>RDD 任务划分</li></ol><p>RDD 任务切分中间分为：Application、Job、Stage 和 Task</p><p>⚫ Application：初始化一个 SparkContext 即生成一个 Application；</p><p>⚫ Job：一个 Action 算子就会生成一个 Job；</p><p>⚫ Stage：Stage 等于宽依赖(ShuffleDependency)的个数加 1；</p><p>⚫ Task：一个 Stage 阶段中，最后一个 RDD 的分区个数就是 Task 的个数。</p><p>注意：Application-&gt;Job-&gt;Stage-&gt;Task 每一层都是 1 对 n 的关系。</p><ol start="8"><li>RDD 任务划分源码</li></ol><div class="language-scala line-numbers-mode" data-highlighter="prismjs" data-ext="scala"><pre><code><span class="line"><span class="token keyword">val</span> tasks<span class="token operator">:</span> Seq<span class="token punctuation">[</span>Task<span class="token punctuation">[</span>_<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">    stage <span class="token keyword">match</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">case</span> stage<span class="token operator">:</span> ShuffleMapStage <span class="token keyword">=&gt;</span></span>
<span class="line">        partitionsToCompute<span class="token punctuation">.</span>map <span class="token punctuation">{</span> id <span class="token keyword">=&gt;</span></span>
<span class="line">            <span class="token keyword">val</span> locs <span class="token operator">=</span> taskIdToLocations<span class="token punctuation">(</span>id<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">val</span> part <span class="token operator">=</span> stage<span class="token punctuation">.</span>rdd<span class="token punctuation">.</span>partitions<span class="token punctuation">(</span>id<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">new</span> ShuffleMapTask<span class="token punctuation">(</span>stage<span class="token punctuation">.</span>id<span class="token punctuation">,</span> stage<span class="token punctuation">.</span>latestInfo<span class="token punctuation">.</span>attemptId<span class="token punctuation">,</span> taskBinary<span class="token punctuation">,</span> part<span class="token punctuation">,</span> locs<span class="token punctuation">,</span> stage<span class="token punctuation">.</span>latestInfo<span class="token punctuation">.</span>taskMetrics<span class="token punctuation">,</span> properties<span class="token punctuation">,</span> Option<span class="token punctuation">(</span>jobId<span class="token punctuation">)</span><span class="token punctuation">,</span> Option<span class="token punctuation">(</span>sc<span class="token punctuation">.</span>applicationId<span class="token punctuation">)</span><span class="token punctuation">,</span> sc<span class="token punctuation">.</span>applicationAttemptId<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">case</span> stage<span class="token operator">:</span> ResultStage <span class="token keyword">=&gt;</span></span>
<span class="line">        partitionsToCompute<span class="token punctuation">.</span>map <span class="token punctuation">{</span> id <span class="token keyword">=&gt;</span></span>
<span class="line">            <span class="token keyword">val</span> p<span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> stage<span class="token punctuation">.</span>partitions<span class="token punctuation">(</span>id<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">val</span> part <span class="token operator">=</span> stage<span class="token punctuation">.</span>rdd<span class="token punctuation">.</span>partitions<span class="token punctuation">(</span>p<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">val</span> locs <span class="token operator">=</span> taskIdToLocations<span class="token punctuation">(</span>id<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">new</span> ResultTask<span class="token punctuation">(</span>stage<span class="token punctuation">.</span>id<span class="token punctuation">,</span> stage<span class="token punctuation">.</span>latestInfo<span class="token punctuation">.</span>attemptId<span class="token punctuation">,</span>taskBinary<span class="token punctuation">,</span> part<span class="token punctuation">,</span> locs<span class="token punctuation">,</span> id<span class="token punctuation">,</span> properties<span class="token punctuation">,</span> stage<span class="token punctuation">.</span>latestInfo<span class="token punctuation">.</span>taskMetrics<span class="token punctuation">,</span>Option<span class="token punctuation">(</span>jobId<span class="token punctuation">)</span><span class="token punctuation">,</span> Option<span class="token punctuation">(</span>sc<span class="token punctuation">.</span>applicationId<span class="token punctuation">)</span><span class="token punctuation">,</span>sc<span class="token punctuation">.</span>applicationAttemptId<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">……</span>
<span class="line"></span>
<span class="line"><span class="token keyword">val</span> partitionsToCompute<span class="token operator">:</span> Seq<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span> <span class="token operator">=</span> stage<span class="token punctuation">.</span>findMissingPartitions<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">……</span>
<span class="line"></span>
<span class="line"><span class="token keyword">override</span> <span class="token keyword">def</span> findMissingPartitions<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Seq<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    mapOutputTrackerMaster</span>
<span class="line">    <span class="token punctuation">.</span>findMissingPartitions<span class="token punctuation">(</span>shuffleDep<span class="token punctuation">.</span>shuffleId<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span>getOrElse<span class="token punctuation">(</span><span class="token number">0</span> until numPartitions<span class="token punctuation">)</span> </span>
<span class="line"><span class="token punctuation">}</span> </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="spark-dag中job-为什么会分stage" tabindex="-1"><a class="header-anchor" href="#spark-dag中job-为什么会分stage"><span>spark dag中job 为什么会分stage,</span></a></h2><p>在 Spark DAG（有向无环图）中，Job 被划分为 Stage 的主要原因是 基于数据依赖关系的划分，特别是 宽依赖（Shuffle Dependency）和窄依赖（Narrow Dependency） 的区别。这种划分是为了优化任务调度和执行效率。以下是详细解释：</p><h3 id="_1-stage-划分的核心依据-宽依赖-shuffle-dependency" tabindex="-1"><a class="header-anchor" href="#_1-stage-划分的核心依据-宽依赖-shuffle-dependency"><span>1. Stage 划分的核心依据：宽依赖（Shuffle Dependency）</span></a></h3><p>Spark 的 DAG Scheduler 会将 Job 拆分成多个 Stage，关键分界线是宽依赖（Shuffle Dependency）：</p><ul><li>窄依赖（Narrow Dependency）： <ul><li>一个分区的数据最多被一个子分区依赖（如 map、filter）。</li><li>这类操作可以流水线化执行（无需等待其他任务完成）。</li></ul></li><li>宽依赖（Shuffle Dependency）： <ul><li>一个分区的数据可能被多个子分区依赖（如 groupByKey、reduceByKey）。</li><li>需要跨节点数据混洗（Shuffle），必须等前一个 Stage 的所有任务完成后才能开始下一个 Stage。</li></ul></li></ul><h3 id="为什么遇到宽依赖就要分-stage" tabindex="-1"><a class="header-anchor" href="#为什么遇到宽依赖就要分-stage"><span>为什么遇到宽依赖就要分 Stage？</span></a></h3><p>因为 Shuffle 是分布式计算的“同步点”，必须等待所有上游任务完成数据输出后，下游任务才能读取数据。</p><h3 id="stage-的类型" tabindex="-1"><a class="header-anchor" href="#stage-的类型"><span>Stage 的类型</span></a></h3><p>一个 Job 通常分为两种 Stage：</p><ul><li>ShuffleMapStage：宽依赖的 Stage，需要执行 Shuffle 操作。</li><li>ResultStage：窄依赖的 Stage，不需要执行 Shuffle 操作。</li></ul><p>. 具体划分过程 步骤 1：从最终的 RDD 反向回溯，遇到宽依赖就划分一个新的 Stage。</p><p>步骤 2：窄依赖的操作会被合并到同一个 Stage 中（形成流水线执行）。</p><p>例子：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line">rdd <span class="token operator">=</span> sc<span class="token punctuation">.</span>textFile<span class="token punctuation">(</span><span class="token string">&quot;data.txt&quot;</span><span class="token punctuation">)</span>  </span>
<span class="line">  <span class="token punctuation">.</span>flatMap<span class="token punctuation">(</span><span class="token keyword">lambda</span> line<span class="token punctuation">:</span> line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 窄依赖 → 同 Stage  </span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> word<span class="token punctuation">:</span> <span class="token punctuation">(</span>word<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>           <span class="token comment"># 窄依赖 → 同 Stage  </span></span>
<span class="line">  <span class="token punctuation">.</span>reduceByKey<span class="token punctuation">(</span><span class="token keyword">lambda</span> a<span class="token punctuation">,</span> b<span class="token punctuation">:</span> a <span class="token operator">+</span> b<span class="token punctuation">)</span>       <span class="token comment"># 宽依赖 → 新 Stage  </span></span>
<span class="line">  <span class="token punctuation">.</span>collect<span class="token punctuation">(</span><span class="token punctuation">)</span>                             <span class="token comment"># ResultStage</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Stage 0：textFile → flatMap → map（窄依赖连续执行）。</li><li>Stage 1：reduceByKey（需要 Shuffle）。</li><li>Stage 2：collect()（最终结果）。</li></ul><h3 id="为什么这样设计" tabindex="-1"><a class="header-anchor" href="#为什么这样设计"><span>为什么这样设计</span></a></h3><ul><li>并行优化： 同一 Stage 内的窄依赖任务可以并行执行（无需等待）。</li><li>容错效率： Stage 失败时只需重算该 Stage 及其下游 Stage（而非整个 Job）。</li><li>资源调度： Shuffle 是资源密集型操作，明确 Stage 边界有助于合理分配资源。</li></ul><p>关键点,说明</p><ul><li>Stage 划分依据,遇到宽依赖（Shuffle）时切分 Stage。</li><li>窄依赖, 合并到同一 Stage，流水线执行。</li><li>宽依赖, 强制分 Stage，需等待 Shuffle 完成。</li><li>优化目标, 减少 Shuffle 开销，提高并行度和容错效率。</li></ul>`,88)]))}const i=s(e,[["render",o]]),u=JSON.parse('{"path":"/guide/etl/spark/spark-core.html","title":"Spark Core","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"RDD","slug":"rdd","link":"#rdd","children":[{"level":3,"title":"执行原理","slug":"执行原理","link":"#执行原理","children":[]},{"level":3,"title":"基础编程","slug":"基础编程","link":"#基础编程","children":[]},{"level":3,"title":"RDD 并行度与分区","slug":"rdd-并行度与分区","link":"#rdd-并行度与分区","children":[]},{"level":3,"title":"RDD 转换算子","slug":"rdd-转换算子","link":"#rdd-转换算子","children":[]},{"level":3,"title":"RDD 序列化","slug":"rdd-序列化","link":"#rdd-序列化","children":[]},{"level":3,"title":"RDD 依赖关系","slug":"rdd-依赖关系","link":"#rdd-依赖关系","children":[]}]},{"level":2,"title":"spark dag中job 为什么会分stage,","slug":"spark-dag中job-为什么会分stage","link":"#spark-dag中job-为什么会分stage","children":[{"level":3,"title":"1. Stage 划分的核心依据：宽依赖（Shuffle Dependency）","slug":"_1-stage-划分的核心依据-宽依赖-shuffle-dependency","link":"#_1-stage-划分的核心依据-宽依赖-shuffle-dependency","children":[]},{"level":3,"title":"为什么遇到宽依赖就要分 Stage？","slug":"为什么遇到宽依赖就要分-stage","link":"#为什么遇到宽依赖就要分-stage","children":[]},{"level":3,"title":"Stage 的类型","slug":"stage-的类型","link":"#stage-的类型","children":[]},{"level":3,"title":"为什么这样设计","slug":"为什么这样设计","link":"#为什么这样设计","children":[]}]}],"git":{"updatedTime":1744907061000,"contributors":[{"name":"alice","username":"alice","email":"921757697@qq.com","commits":2,"url":"https://github.com/alice"}],"changelog":[{"hash":"6865a6735449381c1fba9a14aa9ad0c9bd2e80fc","time":1744907061000,"email":"921757697@qq.com","author":"alice","message":"deploy"},{"hash":"ed3efd30873b7b11bb3e93fbd0987e8659762f01","time":1744895120000,"email":"921757697@qq.com","author":"alice","message":"deploy"}]},"filePathRelative":"guide/etl/spark/spark-core.md"}');export{i as comp,u as data};
