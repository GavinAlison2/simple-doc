import{_ as n,c as s,e,o as t}from"./app-CNZ6fT6P.js";const p={};function c(l,a){return t(),s("div",null,a[0]||(a[0]=[e(`<h1 id="ts-decorator-ts-的装饰器" tabindex="-1"><a class="header-anchor" href="#ts-decorator-ts-的装饰器"><span>TS Decorator ts 的装饰器</span></a></h1><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token function">npm</span> i reflect-metadata <span class="token parameter variable">--save</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 在 tsconfig.json 里配置 emitDecoratorMetadataL: true, experimentalDecorators: true 选项。</span></span>
<span class="line"><span class="token comment"># 在文件头 import &quot;reflect-metadata&quot;;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="对应的-api" tabindex="-1"><a class="header-anchor" href="#对应的-api"><span>对应的 API</span></a></h2><ul><li><code>@Reflect.metadata(key: string, value: any)</code> 给类添加元数据</li><li><code>@Reflect.defineMetadata(metadataKey: string, metadataValue: any, target: Function)</code> 给类定义元数据</li><li><code>@Reflect.hasMetadata(metadataKey: string, target: Function)</code> 判断是否有元数据</li><li><code>@Reflect.getMetadata(metadataKey: string, target: Function)</code> 获取元数据</li><li><code>@Reflect.getOwnMetadata(metadataKey: string, target: Function)</code> 获取自己的元数据</li><li><code>@Reflect.getMetadataKeys(target: Function)</code> 获取元数据的键名列表</li></ul><h2 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h2><p>· 定义元数据</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token string">&quot;reflect-metadata&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">setMetadata</span><span class="token punctuation">(</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">metadata</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">setMetadata</span></span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;zhangsan&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>· 获取元数据</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token string">&quot;reflect-metadata&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">getMetadata</span><span class="token punctuation">(</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// zhangsan</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9)]))}const o=n(p,[["render",c]]),r=JSON.parse('{"path":"/guide/Typescript/ts-decorator.html","title":"TS Decorator ts 的装饰器","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"对应的 API","slug":"对应的-api","link":"#对应的-api","children":[]},{"level":2,"title":"示例","slug":"示例","link":"#示例","children":[]}],"git":{"updatedTime":1744909079000,"contributors":[{"name":"alice","username":"alice","email":"921757697@qq.com","commits":1,"url":"https://github.com/alice"}],"changelog":[{"hash":"f5aef0c6b8a7a6ad7c2a9cbcadaddcd7542e42ec","time":1744909079000,"email":"921757697@qq.com","author":"alice","message":"typescript"}]},"filePathRelative":"guide/Typescript/ts-decorator.md"}');export{o as comp,r as data};
