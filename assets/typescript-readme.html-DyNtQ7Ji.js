import{_ as s,c as a,e,o as t}from"./app-DzmgiGLk.js";const i={};function l(c,n){return t(),a("div",null,n[0]||(n[0]=[e(`<h1 id="typescript" tabindex="-1"><a class="header-anchor" href="#typescript"><span>typescript</span></a></h1><h2 id="工具" tabindex="-1"><a class="header-anchor" href="#工具"><span>工具</span></a></h2><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token function">npm</span> <span class="token function">install</span>  typescript ts-node <span class="token parameter variable">--save</span></span>
<span class="line"><span class="token function">npm</span> i nodemon --save-dev  <span class="token comment"># 安装 nodemon 包以监控更改并自动重启 Node 应用程序</span></span>
<span class="line"><span class="token function">npm</span> init <span class="token parameter variable">-y</span>  <span class="token comment"># 初始化 package.json 文件</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">package.json</span>
<span class="line"></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">   <span class="token string">&quot;scripts&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token string">&quot;start&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;nodemon&quot;</span>,</span>
<span class="line">      <span class="token string">&quot;build&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;tsc&quot;</span>,  <span class="token comment"># 编译 ts 文件为 js 文件</span></span>
<span class="line">      <span class="token string">&quot;exec&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;ts-node ./src/index.ts&quot;</span>,</span>
<span class="line">      <span class="token string">&quot;dev&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;nodemon --exec ts-node ./src/index.ts --watch ./src --ext .ts,.js --ignore dist,node_modules&quot;</span>,  <span class="token comment"># 监视更改并自动重启应用程序</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="table-of-contents" tabindex="-1"><a class="header-anchor" href="#table-of-contents"><span>table of contents</span></a></h2><ol><li>什么是 ts -. ts 类型 -. 类型注解</li><li>类型推断 <code>x as y</code> 就是类型转换</li><li>类型声明 <code>let var const :</code></li><li>类型总览</li><li>常用类型 5.0.1 原始类型 string number boolean null undefined void unknown symbol never any bigint 字面量类型 5.0.2 对象类型 function array object tuple enum 联合类型 交叉类型 类型别名 5.1. 基础类型 - number - string - boolean - null - undefined - void - any - array - object - symbol - bigint - never - 字面量类型 123 &#39;abc&#39; - 枚举类型 enum - 元组类型 tuple 5.2 联合类型 - <code>| &amp;</code> 5.3 交叉类型 5.4 类型别名 type 关键字定义别名 5.5 字符串字面量类型</li><li>接口 6.1 扩展接口</li><li>类 7.1 类声明 7.2 类表达式 7.3 类属性, 只读属性, 静态方法和属性 7.4 构造函数, 实例方法, 静态属性, 实例属性, 访问器属性 7.5 抽象类 7.6 接口多继承 类单继承</li><li>泛型</li><li>装饰器 decorator 装饰器可以用来拓展类的功能 <code>@xx</code> 类装饰器, <code>@function</code> 函数装饰器, <code>@parameter</code> 参数装饰器, <code>@property</code> 类属性装饰器, <code>@method</code> 类方法装饰器, <code>@class</code> 类装饰器</li><li>模块</li><li>命名空间</li><li>控制语句 12.1 if else switch case 12.2 for while do 12.3 break continue return throw try catch finally</li><li>函数 13.1 函数声明 13.2 函数表达式, 函数类型 13.3 默认参数 13.4 剩余参数 13.5 函数重载</li></ol>`,5)]))}const p=s(i,[["render",l]]),r=JSON.parse('{"path":"/guide/Typescript/typescript-readme.html","title":"typescript","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"工具","slug":"工具","link":"#工具","children":[]},{"level":2,"title":"table of contents","slug":"table-of-contents","link":"#table-of-contents","children":[]}],"git":{"updatedTime":1744909079000,"contributors":[{"name":"alice","username":"alice","email":"921757697@qq.com","commits":1,"url":"https://github.com/alice"}],"changelog":[{"hash":"f5aef0c6b8a7a6ad7c2a9cbcadaddcd7542e42ec","time":1744909079000,"email":"921757697@qq.com","author":"alice","message":"typescript"}]},"filePathRelative":"guide/Typescript/typescript-readme.md"}');export{p as comp,r as data};
